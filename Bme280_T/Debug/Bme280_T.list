
Bme280_T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000818c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08008250  08008250  00018250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087ec  080087ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080087ec  080087ec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087ec  080087ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087ec  080087ec  000187ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080087f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001dc  080089d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080089d0  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb3a  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1c  00000000  00000000  0002cd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a196  00000000  00000000  0002fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c28c  00000000  00000000  00049c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e9a  00000000  00000000  00055eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8d84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000338c  00000000  00000000  000e8dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008234 	.word	0x08008234

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08008234 	.word	0x08008234

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f885 	bl	800154c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffcf 	bl	80013f0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f877 	bl	800154c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f86d 	bl	800154c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fff1 	bl	8001468 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ffe7 	bl	8001468 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	0047      	lsls	r7, r0, #1
 80004b6:	1c0c      	adds	r4, r1, #0
 80004b8:	0a6d      	lsrs	r5, r5, #9
 80004ba:	0e3f      	lsrs	r7, r7, #24
 80004bc:	0fc6      	lsrs	r6, r0, #31
 80004be:	2f00      	cmp	r7, #0
 80004c0:	d066      	beq.n	8000590 <__aeabi_fdiv+0xe8>
 80004c2:	2fff      	cmp	r7, #255	; 0xff
 80004c4:	d06c      	beq.n	80005a0 <__aeabi_fdiv+0xf8>
 80004c6:	2300      	movs	r3, #0
 80004c8:	00ea      	lsls	r2, r5, #3
 80004ca:	2580      	movs	r5, #128	; 0x80
 80004cc:	4699      	mov	r9, r3
 80004ce:	469a      	mov	sl, r3
 80004d0:	04ed      	lsls	r5, r5, #19
 80004d2:	4315      	orrs	r5, r2
 80004d4:	3f7f      	subs	r7, #127	; 0x7f
 80004d6:	0260      	lsls	r0, r4, #9
 80004d8:	0061      	lsls	r1, r4, #1
 80004da:	0a43      	lsrs	r3, r0, #9
 80004dc:	4698      	mov	r8, r3
 80004de:	0e09      	lsrs	r1, r1, #24
 80004e0:	0fe4      	lsrs	r4, r4, #31
 80004e2:	2900      	cmp	r1, #0
 80004e4:	d048      	beq.n	8000578 <__aeabi_fdiv+0xd0>
 80004e6:	29ff      	cmp	r1, #255	; 0xff
 80004e8:	d010      	beq.n	800050c <__aeabi_fdiv+0x64>
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	00d8      	lsls	r0, r3, #3
 80004ee:	04d2      	lsls	r2, r2, #19
 80004f0:	4302      	orrs	r2, r0
 80004f2:	4690      	mov	r8, r2
 80004f4:	2000      	movs	r0, #0
 80004f6:	397f      	subs	r1, #127	; 0x7f
 80004f8:	464a      	mov	r2, r9
 80004fa:	0033      	movs	r3, r6
 80004fc:	1a7f      	subs	r7, r7, r1
 80004fe:	4302      	orrs	r2, r0
 8000500:	496c      	ldr	r1, [pc, #432]	; (80006b4 <__aeabi_fdiv+0x20c>)
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	588a      	ldr	r2, [r1, r2]
 8000506:	4063      	eors	r3, r4
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4697      	mov	pc, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	d16d      	bne.n	80005ec <__aeabi_fdiv+0x144>
 8000510:	2002      	movs	r0, #2
 8000512:	3fff      	subs	r7, #255	; 0xff
 8000514:	e033      	b.n	800057e <__aeabi_fdiv+0xd6>
 8000516:	2300      	movs	r3, #0
 8000518:	4698      	mov	r8, r3
 800051a:	0026      	movs	r6, r4
 800051c:	4645      	mov	r5, r8
 800051e:	4682      	mov	sl, r0
 8000520:	4653      	mov	r3, sl
 8000522:	2b02      	cmp	r3, #2
 8000524:	d100      	bne.n	8000528 <__aeabi_fdiv+0x80>
 8000526:	e07f      	b.n	8000628 <__aeabi_fdiv+0x180>
 8000528:	2b03      	cmp	r3, #3
 800052a:	d100      	bne.n	800052e <__aeabi_fdiv+0x86>
 800052c:	e094      	b.n	8000658 <__aeabi_fdiv+0x1b0>
 800052e:	2b01      	cmp	r3, #1
 8000530:	d017      	beq.n	8000562 <__aeabi_fdiv+0xba>
 8000532:	0038      	movs	r0, r7
 8000534:	307f      	adds	r0, #127	; 0x7f
 8000536:	2800      	cmp	r0, #0
 8000538:	dd5f      	ble.n	80005fa <__aeabi_fdiv+0x152>
 800053a:	076b      	lsls	r3, r5, #29
 800053c:	d004      	beq.n	8000548 <__aeabi_fdiv+0xa0>
 800053e:	230f      	movs	r3, #15
 8000540:	402b      	ands	r3, r5
 8000542:	2b04      	cmp	r3, #4
 8000544:	d000      	beq.n	8000548 <__aeabi_fdiv+0xa0>
 8000546:	3504      	adds	r5, #4
 8000548:	012b      	lsls	r3, r5, #4
 800054a:	d503      	bpl.n	8000554 <__aeabi_fdiv+0xac>
 800054c:	0038      	movs	r0, r7
 800054e:	4b5a      	ldr	r3, [pc, #360]	; (80006b8 <__aeabi_fdiv+0x210>)
 8000550:	3080      	adds	r0, #128	; 0x80
 8000552:	401d      	ands	r5, r3
 8000554:	28fe      	cmp	r0, #254	; 0xfe
 8000556:	dc67      	bgt.n	8000628 <__aeabi_fdiv+0x180>
 8000558:	01ad      	lsls	r5, r5, #6
 800055a:	0a6d      	lsrs	r5, r5, #9
 800055c:	b2c0      	uxtb	r0, r0
 800055e:	e002      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000560:	001e      	movs	r6, r3
 8000562:	2000      	movs	r0, #0
 8000564:	2500      	movs	r5, #0
 8000566:	05c0      	lsls	r0, r0, #23
 8000568:	4328      	orrs	r0, r5
 800056a:	07f6      	lsls	r6, r6, #31
 800056c:	4330      	orrs	r0, r6
 800056e:	bce0      	pop	{r5, r6, r7}
 8000570:	46ba      	mov	sl, r7
 8000572:	46b1      	mov	r9, r6
 8000574:	46a8      	mov	r8, r5
 8000576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000578:	2b00      	cmp	r3, #0
 800057a:	d12b      	bne.n	80005d4 <__aeabi_fdiv+0x12c>
 800057c:	2001      	movs	r0, #1
 800057e:	464a      	mov	r2, r9
 8000580:	0033      	movs	r3, r6
 8000582:	494e      	ldr	r1, [pc, #312]	; (80006bc <__aeabi_fdiv+0x214>)
 8000584:	4302      	orrs	r2, r0
 8000586:	0092      	lsls	r2, r2, #2
 8000588:	588a      	ldr	r2, [r1, r2]
 800058a:	4063      	eors	r3, r4
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4697      	mov	pc, r2
 8000590:	2d00      	cmp	r5, #0
 8000592:	d113      	bne.n	80005bc <__aeabi_fdiv+0x114>
 8000594:	2304      	movs	r3, #4
 8000596:	4699      	mov	r9, r3
 8000598:	3b03      	subs	r3, #3
 800059a:	2700      	movs	r7, #0
 800059c:	469a      	mov	sl, r3
 800059e:	e79a      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d105      	bne.n	80005b0 <__aeabi_fdiv+0x108>
 80005a4:	2308      	movs	r3, #8
 80005a6:	4699      	mov	r9, r3
 80005a8:	3b06      	subs	r3, #6
 80005aa:	27ff      	movs	r7, #255	; 0xff
 80005ac:	469a      	mov	sl, r3
 80005ae:	e792      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 80005b0:	230c      	movs	r3, #12
 80005b2:	4699      	mov	r9, r3
 80005b4:	3b09      	subs	r3, #9
 80005b6:	27ff      	movs	r7, #255	; 0xff
 80005b8:	469a      	mov	sl, r3
 80005ba:	e78c      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 80005bc:	0028      	movs	r0, r5
 80005be:	f001 ff25 	bl	800240c <__clzsi2>
 80005c2:	2776      	movs	r7, #118	; 0x76
 80005c4:	1f43      	subs	r3, r0, #5
 80005c6:	409d      	lsls	r5, r3
 80005c8:	2300      	movs	r3, #0
 80005ca:	427f      	negs	r7, r7
 80005cc:	4699      	mov	r9, r3
 80005ce:	469a      	mov	sl, r3
 80005d0:	1a3f      	subs	r7, r7, r0
 80005d2:	e780      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 ff19 	bl	800240c <__clzsi2>
 80005da:	4642      	mov	r2, r8
 80005dc:	1f43      	subs	r3, r0, #5
 80005de:	2176      	movs	r1, #118	; 0x76
 80005e0:	409a      	lsls	r2, r3
 80005e2:	4249      	negs	r1, r1
 80005e4:	1a09      	subs	r1, r1, r0
 80005e6:	4690      	mov	r8, r2
 80005e8:	2000      	movs	r0, #0
 80005ea:	e785      	b.n	80004f8 <__aeabi_fdiv+0x50>
 80005ec:	21ff      	movs	r1, #255	; 0xff
 80005ee:	2003      	movs	r0, #3
 80005f0:	e782      	b.n	80004f8 <__aeabi_fdiv+0x50>
 80005f2:	001e      	movs	r6, r3
 80005f4:	20ff      	movs	r0, #255	; 0xff
 80005f6:	2500      	movs	r5, #0
 80005f8:	e7b5      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80005fa:	2301      	movs	r3, #1
 80005fc:	1a1b      	subs	r3, r3, r0
 80005fe:	2b1b      	cmp	r3, #27
 8000600:	dcaf      	bgt.n	8000562 <__aeabi_fdiv+0xba>
 8000602:	379e      	adds	r7, #158	; 0x9e
 8000604:	0029      	movs	r1, r5
 8000606:	40bd      	lsls	r5, r7
 8000608:	40d9      	lsrs	r1, r3
 800060a:	1e6a      	subs	r2, r5, #1
 800060c:	4195      	sbcs	r5, r2
 800060e:	430d      	orrs	r5, r1
 8000610:	076b      	lsls	r3, r5, #29
 8000612:	d004      	beq.n	800061e <__aeabi_fdiv+0x176>
 8000614:	230f      	movs	r3, #15
 8000616:	402b      	ands	r3, r5
 8000618:	2b04      	cmp	r3, #4
 800061a:	d000      	beq.n	800061e <__aeabi_fdiv+0x176>
 800061c:	3504      	adds	r5, #4
 800061e:	016b      	lsls	r3, r5, #5
 8000620:	d544      	bpl.n	80006ac <__aeabi_fdiv+0x204>
 8000622:	2001      	movs	r0, #1
 8000624:	2500      	movs	r5, #0
 8000626:	e79e      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000628:	20ff      	movs	r0, #255	; 0xff
 800062a:	2500      	movs	r5, #0
 800062c:	e79b      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800062e:	2580      	movs	r5, #128	; 0x80
 8000630:	2600      	movs	r6, #0
 8000632:	20ff      	movs	r0, #255	; 0xff
 8000634:	03ed      	lsls	r5, r5, #15
 8000636:	e796      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000638:	2300      	movs	r3, #0
 800063a:	4698      	mov	r8, r3
 800063c:	2080      	movs	r0, #128	; 0x80
 800063e:	03c0      	lsls	r0, r0, #15
 8000640:	4205      	tst	r5, r0
 8000642:	d009      	beq.n	8000658 <__aeabi_fdiv+0x1b0>
 8000644:	4643      	mov	r3, r8
 8000646:	4203      	tst	r3, r0
 8000648:	d106      	bne.n	8000658 <__aeabi_fdiv+0x1b0>
 800064a:	4645      	mov	r5, r8
 800064c:	4305      	orrs	r5, r0
 800064e:	026d      	lsls	r5, r5, #9
 8000650:	0026      	movs	r6, r4
 8000652:	20ff      	movs	r0, #255	; 0xff
 8000654:	0a6d      	lsrs	r5, r5, #9
 8000656:	e786      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000658:	2080      	movs	r0, #128	; 0x80
 800065a:	03c0      	lsls	r0, r0, #15
 800065c:	4305      	orrs	r5, r0
 800065e:	026d      	lsls	r5, r5, #9
 8000660:	20ff      	movs	r0, #255	; 0xff
 8000662:	0a6d      	lsrs	r5, r5, #9
 8000664:	e77f      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000666:	4641      	mov	r1, r8
 8000668:	016a      	lsls	r2, r5, #5
 800066a:	0148      	lsls	r0, r1, #5
 800066c:	4282      	cmp	r2, r0
 800066e:	d219      	bcs.n	80006a4 <__aeabi_fdiv+0x1fc>
 8000670:	211b      	movs	r1, #27
 8000672:	2500      	movs	r5, #0
 8000674:	3f01      	subs	r7, #1
 8000676:	2601      	movs	r6, #1
 8000678:	0014      	movs	r4, r2
 800067a:	006d      	lsls	r5, r5, #1
 800067c:	0052      	lsls	r2, r2, #1
 800067e:	2c00      	cmp	r4, #0
 8000680:	db01      	blt.n	8000686 <__aeabi_fdiv+0x1de>
 8000682:	4290      	cmp	r0, r2
 8000684:	d801      	bhi.n	800068a <__aeabi_fdiv+0x1e2>
 8000686:	1a12      	subs	r2, r2, r0
 8000688:	4335      	orrs	r5, r6
 800068a:	3901      	subs	r1, #1
 800068c:	2900      	cmp	r1, #0
 800068e:	d1f3      	bne.n	8000678 <__aeabi_fdiv+0x1d0>
 8000690:	1e50      	subs	r0, r2, #1
 8000692:	4182      	sbcs	r2, r0
 8000694:	0038      	movs	r0, r7
 8000696:	307f      	adds	r0, #127	; 0x7f
 8000698:	001e      	movs	r6, r3
 800069a:	4315      	orrs	r5, r2
 800069c:	2800      	cmp	r0, #0
 800069e:	dd00      	ble.n	80006a2 <__aeabi_fdiv+0x1fa>
 80006a0:	e74b      	b.n	800053a <__aeabi_fdiv+0x92>
 80006a2:	e7aa      	b.n	80005fa <__aeabi_fdiv+0x152>
 80006a4:	211a      	movs	r1, #26
 80006a6:	2501      	movs	r5, #1
 80006a8:	1a12      	subs	r2, r2, r0
 80006aa:	e7e4      	b.n	8000676 <__aeabi_fdiv+0x1ce>
 80006ac:	01ad      	lsls	r5, r5, #6
 80006ae:	2000      	movs	r0, #0
 80006b0:	0a6d      	lsrs	r5, r5, #9
 80006b2:	e758      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006b4:	080082f0 	.word	0x080082f0
 80006b8:	f7ffffff 	.word	0xf7ffffff
 80006bc:	08008330 	.word	0x08008330

080006c0 <__aeabi_i2f>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d013      	beq.n	80006ee <__aeabi_i2f+0x2e>
 80006c6:	17c3      	asrs	r3, r0, #31
 80006c8:	18c5      	adds	r5, r0, r3
 80006ca:	405d      	eors	r5, r3
 80006cc:	0fc4      	lsrs	r4, r0, #31
 80006ce:	0028      	movs	r0, r5
 80006d0:	f001 fe9c 	bl	800240c <__clzsi2>
 80006d4:	239e      	movs	r3, #158	; 0x9e
 80006d6:	0001      	movs	r1, r0
 80006d8:	1a1b      	subs	r3, r3, r0
 80006da:	2b96      	cmp	r3, #150	; 0x96
 80006dc:	dc0f      	bgt.n	80006fe <__aeabi_i2f+0x3e>
 80006de:	2808      	cmp	r0, #8
 80006e0:	dd01      	ble.n	80006e6 <__aeabi_i2f+0x26>
 80006e2:	3908      	subs	r1, #8
 80006e4:	408d      	lsls	r5, r1
 80006e6:	026d      	lsls	r5, r5, #9
 80006e8:	0a6d      	lsrs	r5, r5, #9
 80006ea:	b2d8      	uxtb	r0, r3
 80006ec:	e002      	b.n	80006f4 <__aeabi_i2f+0x34>
 80006ee:	2400      	movs	r4, #0
 80006f0:	2000      	movs	r0, #0
 80006f2:	2500      	movs	r5, #0
 80006f4:	05c0      	lsls	r0, r0, #23
 80006f6:	4328      	orrs	r0, r5
 80006f8:	07e4      	lsls	r4, r4, #31
 80006fa:	4320      	orrs	r0, r4
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	2b99      	cmp	r3, #153	; 0x99
 8000700:	dd0b      	ble.n	800071a <__aeabi_i2f+0x5a>
 8000702:	2205      	movs	r2, #5
 8000704:	002e      	movs	r6, r5
 8000706:	1a12      	subs	r2, r2, r0
 8000708:	40d6      	lsrs	r6, r2
 800070a:	0002      	movs	r2, r0
 800070c:	321b      	adds	r2, #27
 800070e:	4095      	lsls	r5, r2
 8000710:	0028      	movs	r0, r5
 8000712:	1e45      	subs	r5, r0, #1
 8000714:	41a8      	sbcs	r0, r5
 8000716:	0035      	movs	r5, r6
 8000718:	4305      	orrs	r5, r0
 800071a:	2905      	cmp	r1, #5
 800071c:	dd01      	ble.n	8000722 <__aeabi_i2f+0x62>
 800071e:	1f4a      	subs	r2, r1, #5
 8000720:	4095      	lsls	r5, r2
 8000722:	002a      	movs	r2, r5
 8000724:	4e08      	ldr	r6, [pc, #32]	; (8000748 <__aeabi_i2f+0x88>)
 8000726:	4032      	ands	r2, r6
 8000728:	0768      	lsls	r0, r5, #29
 800072a:	d009      	beq.n	8000740 <__aeabi_i2f+0x80>
 800072c:	200f      	movs	r0, #15
 800072e:	4028      	ands	r0, r5
 8000730:	2804      	cmp	r0, #4
 8000732:	d005      	beq.n	8000740 <__aeabi_i2f+0x80>
 8000734:	3204      	adds	r2, #4
 8000736:	0150      	lsls	r0, r2, #5
 8000738:	d502      	bpl.n	8000740 <__aeabi_i2f+0x80>
 800073a:	239f      	movs	r3, #159	; 0x9f
 800073c:	4032      	ands	r2, r6
 800073e:	1a5b      	subs	r3, r3, r1
 8000740:	0192      	lsls	r2, r2, #6
 8000742:	0a55      	lsrs	r5, r2, #9
 8000744:	b2d8      	uxtb	r0, r3
 8000746:	e7d5      	b.n	80006f4 <__aeabi_i2f+0x34>
 8000748:	fbffffff 	.word	0xfbffffff

0800074c <__aeabi_dadd>:
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	464f      	mov	r7, r9
 8000750:	46d6      	mov	lr, sl
 8000752:	4646      	mov	r6, r8
 8000754:	000d      	movs	r5, r1
 8000756:	0001      	movs	r1, r0
 8000758:	0018      	movs	r0, r3
 800075a:	b5c0      	push	{r6, r7, lr}
 800075c:	0017      	movs	r7, r2
 800075e:	032b      	lsls	r3, r5, #12
 8000760:	0a5a      	lsrs	r2, r3, #9
 8000762:	0f4b      	lsrs	r3, r1, #29
 8000764:	4313      	orrs	r3, r2
 8000766:	00ca      	lsls	r2, r1, #3
 8000768:	4691      	mov	r9, r2
 800076a:	0302      	lsls	r2, r0, #12
 800076c:	006e      	lsls	r6, r5, #1
 800076e:	0041      	lsls	r1, r0, #1
 8000770:	0a52      	lsrs	r2, r2, #9
 8000772:	0fec      	lsrs	r4, r5, #31
 8000774:	0f7d      	lsrs	r5, r7, #29
 8000776:	4315      	orrs	r5, r2
 8000778:	0d76      	lsrs	r6, r6, #21
 800077a:	0d49      	lsrs	r1, r1, #21
 800077c:	0fc0      	lsrs	r0, r0, #31
 800077e:	4682      	mov	sl, r0
 8000780:	46ac      	mov	ip, r5
 8000782:	00ff      	lsls	r7, r7, #3
 8000784:	1a72      	subs	r2, r6, r1
 8000786:	4284      	cmp	r4, r0
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x40>
 800078a:	e098      	b.n	80008be <__aeabi_dadd+0x172>
 800078c:	2a00      	cmp	r2, #0
 800078e:	dc00      	bgt.n	8000792 <__aeabi_dadd+0x46>
 8000790:	e081      	b.n	8000896 <__aeabi_dadd+0x14a>
 8000792:	2900      	cmp	r1, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x4c>
 8000796:	e0b6      	b.n	8000906 <__aeabi_dadd+0x1ba>
 8000798:	49c9      	ldr	r1, [pc, #804]	; (8000ac0 <__aeabi_dadd+0x374>)
 800079a:	428e      	cmp	r6, r1
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x54>
 800079e:	e172      	b.n	8000a86 <__aeabi_dadd+0x33a>
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0028      	movs	r0, r5
 80007a4:	0409      	lsls	r1, r1, #16
 80007a6:	4308      	orrs	r0, r1
 80007a8:	4684      	mov	ip, r0
 80007aa:	2a38      	cmp	r2, #56	; 0x38
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_dadd+0x64>
 80007ae:	e15e      	b.n	8000a6e <__aeabi_dadd+0x322>
 80007b0:	2a1f      	cmp	r2, #31
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0x6a>
 80007b4:	e1ee      	b.n	8000b94 <__aeabi_dadd+0x448>
 80007b6:	2020      	movs	r0, #32
 80007b8:	0039      	movs	r1, r7
 80007ba:	4665      	mov	r5, ip
 80007bc:	1a80      	subs	r0, r0, r2
 80007be:	4087      	lsls	r7, r0
 80007c0:	40d1      	lsrs	r1, r2
 80007c2:	4085      	lsls	r5, r0
 80007c4:	430d      	orrs	r5, r1
 80007c6:	0039      	movs	r1, r7
 80007c8:	1e4f      	subs	r7, r1, #1
 80007ca:	41b9      	sbcs	r1, r7
 80007cc:	4667      	mov	r7, ip
 80007ce:	40d7      	lsrs	r7, r2
 80007d0:	4329      	orrs	r1, r5
 80007d2:	1bdb      	subs	r3, r3, r7
 80007d4:	464a      	mov	r2, r9
 80007d6:	1a55      	subs	r5, r2, r1
 80007d8:	45a9      	cmp	r9, r5
 80007da:	4189      	sbcs	r1, r1
 80007dc:	4249      	negs	r1, r1
 80007de:	1a5b      	subs	r3, r3, r1
 80007e0:	4698      	mov	r8, r3
 80007e2:	4643      	mov	r3, r8
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	d400      	bmi.n	80007ea <__aeabi_dadd+0x9e>
 80007e8:	e0cc      	b.n	8000984 <__aeabi_dadd+0x238>
 80007ea:	4643      	mov	r3, r8
 80007ec:	025b      	lsls	r3, r3, #9
 80007ee:	0a5b      	lsrs	r3, r3, #9
 80007f0:	4698      	mov	r8, r3
 80007f2:	4643      	mov	r3, r8
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0xae>
 80007f8:	e12c      	b.n	8000a54 <__aeabi_dadd+0x308>
 80007fa:	4640      	mov	r0, r8
 80007fc:	f001 fe06 	bl	800240c <__clzsi2>
 8000800:	0001      	movs	r1, r0
 8000802:	3908      	subs	r1, #8
 8000804:	2220      	movs	r2, #32
 8000806:	0028      	movs	r0, r5
 8000808:	4643      	mov	r3, r8
 800080a:	1a52      	subs	r2, r2, r1
 800080c:	408b      	lsls	r3, r1
 800080e:	40d0      	lsrs	r0, r2
 8000810:	408d      	lsls	r5, r1
 8000812:	4303      	orrs	r3, r0
 8000814:	428e      	cmp	r6, r1
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0xce>
 8000818:	e117      	b.n	8000a4a <__aeabi_dadd+0x2fe>
 800081a:	1b8e      	subs	r6, r1, r6
 800081c:	1c72      	adds	r2, r6, #1
 800081e:	2a1f      	cmp	r2, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0xd8>
 8000822:	e1a7      	b.n	8000b74 <__aeabi_dadd+0x428>
 8000824:	2120      	movs	r1, #32
 8000826:	0018      	movs	r0, r3
 8000828:	002e      	movs	r6, r5
 800082a:	1a89      	subs	r1, r1, r2
 800082c:	408d      	lsls	r5, r1
 800082e:	4088      	lsls	r0, r1
 8000830:	40d6      	lsrs	r6, r2
 8000832:	40d3      	lsrs	r3, r2
 8000834:	1e69      	subs	r1, r5, #1
 8000836:	418d      	sbcs	r5, r1
 8000838:	4330      	orrs	r0, r6
 800083a:	4698      	mov	r8, r3
 800083c:	2600      	movs	r6, #0
 800083e:	4305      	orrs	r5, r0
 8000840:	076b      	lsls	r3, r5, #29
 8000842:	d009      	beq.n	8000858 <__aeabi_dadd+0x10c>
 8000844:	230f      	movs	r3, #15
 8000846:	402b      	ands	r3, r5
 8000848:	2b04      	cmp	r3, #4
 800084a:	d005      	beq.n	8000858 <__aeabi_dadd+0x10c>
 800084c:	1d2b      	adds	r3, r5, #4
 800084e:	42ab      	cmp	r3, r5
 8000850:	41ad      	sbcs	r5, r5
 8000852:	426d      	negs	r5, r5
 8000854:	44a8      	add	r8, r5
 8000856:	001d      	movs	r5, r3
 8000858:	4643      	mov	r3, r8
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	d400      	bmi.n	8000860 <__aeabi_dadd+0x114>
 800085e:	e094      	b.n	800098a <__aeabi_dadd+0x23e>
 8000860:	4b97      	ldr	r3, [pc, #604]	; (8000ac0 <__aeabi_dadd+0x374>)
 8000862:	1c72      	adds	r2, r6, #1
 8000864:	429a      	cmp	r2, r3
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x11e>
 8000868:	e09d      	b.n	80009a6 <__aeabi_dadd+0x25a>
 800086a:	4641      	mov	r1, r8
 800086c:	4b95      	ldr	r3, [pc, #596]	; (8000ac4 <__aeabi_dadd+0x378>)
 800086e:	08ed      	lsrs	r5, r5, #3
 8000870:	4019      	ands	r1, r3
 8000872:	000b      	movs	r3, r1
 8000874:	0552      	lsls	r2, r2, #21
 8000876:	0749      	lsls	r1, r1, #29
 8000878:	025b      	lsls	r3, r3, #9
 800087a:	4329      	orrs	r1, r5
 800087c:	0b1b      	lsrs	r3, r3, #12
 800087e:	0d52      	lsrs	r2, r2, #21
 8000880:	0512      	lsls	r2, r2, #20
 8000882:	4313      	orrs	r3, r2
 8000884:	07e4      	lsls	r4, r4, #31
 8000886:	4323      	orrs	r3, r4
 8000888:	0008      	movs	r0, r1
 800088a:	0019      	movs	r1, r3
 800088c:	bce0      	pop	{r5, r6, r7}
 800088e:	46ba      	mov	sl, r7
 8000890:	46b1      	mov	r9, r6
 8000892:	46a8      	mov	r8, r5
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000896:	2a00      	cmp	r2, #0
 8000898:	d043      	beq.n	8000922 <__aeabi_dadd+0x1d6>
 800089a:	1b8a      	subs	r2, r1, r6
 800089c:	2e00      	cmp	r6, #0
 800089e:	d000      	beq.n	80008a2 <__aeabi_dadd+0x156>
 80008a0:	e12a      	b.n	8000af8 <__aeabi_dadd+0x3ac>
 80008a2:	464c      	mov	r4, r9
 80008a4:	431c      	orrs	r4, r3
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0x15e>
 80008a8:	e1d1      	b.n	8000c4e <__aeabi_dadd+0x502>
 80008aa:	1e54      	subs	r4, r2, #1
 80008ac:	2a01      	cmp	r2, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x166>
 80008b0:	e21f      	b.n	8000cf2 <__aeabi_dadd+0x5a6>
 80008b2:	4d83      	ldr	r5, [pc, #524]	; (8000ac0 <__aeabi_dadd+0x374>)
 80008b4:	42aa      	cmp	r2, r5
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x16e>
 80008b8:	e272      	b.n	8000da0 <__aeabi_dadd+0x654>
 80008ba:	0022      	movs	r2, r4
 80008bc:	e123      	b.n	8000b06 <__aeabi_dadd+0x3ba>
 80008be:	2a00      	cmp	r2, #0
 80008c0:	dc00      	bgt.n	80008c4 <__aeabi_dadd+0x178>
 80008c2:	e098      	b.n	80009f6 <__aeabi_dadd+0x2aa>
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d042      	beq.n	800094e <__aeabi_dadd+0x202>
 80008c8:	497d      	ldr	r1, [pc, #500]	; (8000ac0 <__aeabi_dadd+0x374>)
 80008ca:	428e      	cmp	r6, r1
 80008cc:	d100      	bne.n	80008d0 <__aeabi_dadd+0x184>
 80008ce:	e0da      	b.n	8000a86 <__aeabi_dadd+0x33a>
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0028      	movs	r0, r5
 80008d4:	0409      	lsls	r1, r1, #16
 80008d6:	4308      	orrs	r0, r1
 80008d8:	4684      	mov	ip, r0
 80008da:	2a38      	cmp	r2, #56	; 0x38
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_dadd+0x194>
 80008de:	e129      	b.n	8000b34 <__aeabi_dadd+0x3e8>
 80008e0:	2a1f      	cmp	r2, #31
 80008e2:	dc00      	bgt.n	80008e6 <__aeabi_dadd+0x19a>
 80008e4:	e187      	b.n	8000bf6 <__aeabi_dadd+0x4aa>
 80008e6:	0011      	movs	r1, r2
 80008e8:	4665      	mov	r5, ip
 80008ea:	3920      	subs	r1, #32
 80008ec:	40cd      	lsrs	r5, r1
 80008ee:	2a20      	cmp	r2, #32
 80008f0:	d004      	beq.n	80008fc <__aeabi_dadd+0x1b0>
 80008f2:	2040      	movs	r0, #64	; 0x40
 80008f4:	4661      	mov	r1, ip
 80008f6:	1a82      	subs	r2, r0, r2
 80008f8:	4091      	lsls	r1, r2
 80008fa:	430f      	orrs	r7, r1
 80008fc:	0039      	movs	r1, r7
 80008fe:	1e4f      	subs	r7, r1, #1
 8000900:	41b9      	sbcs	r1, r7
 8000902:	430d      	orrs	r5, r1
 8000904:	e11b      	b.n	8000b3e <__aeabi_dadd+0x3f2>
 8000906:	0029      	movs	r1, r5
 8000908:	4339      	orrs	r1, r7
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x1c2>
 800090c:	e0b5      	b.n	8000a7a <__aeabi_dadd+0x32e>
 800090e:	1e51      	subs	r1, r2, #1
 8000910:	2a01      	cmp	r2, #1
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x1ca>
 8000914:	e1ab      	b.n	8000c6e <__aeabi_dadd+0x522>
 8000916:	486a      	ldr	r0, [pc, #424]	; (8000ac0 <__aeabi_dadd+0x374>)
 8000918:	4282      	cmp	r2, r0
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x1d2>
 800091c:	e1b2      	b.n	8000c84 <__aeabi_dadd+0x538>
 800091e:	000a      	movs	r2, r1
 8000920:	e743      	b.n	80007aa <__aeabi_dadd+0x5e>
 8000922:	4969      	ldr	r1, [pc, #420]	; (8000ac8 <__aeabi_dadd+0x37c>)
 8000924:	1c75      	adds	r5, r6, #1
 8000926:	420d      	tst	r5, r1
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x1e0>
 800092a:	e0cf      	b.n	8000acc <__aeabi_dadd+0x380>
 800092c:	2e00      	cmp	r6, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x1e6>
 8000930:	e193      	b.n	8000c5a <__aeabi_dadd+0x50e>
 8000932:	4649      	mov	r1, r9
 8000934:	4319      	orrs	r1, r3
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x1ee>
 8000938:	e1d1      	b.n	8000cde <__aeabi_dadd+0x592>
 800093a:	4661      	mov	r1, ip
 800093c:	4339      	orrs	r1, r7
 800093e:	d000      	beq.n	8000942 <__aeabi_dadd+0x1f6>
 8000940:	e1e3      	b.n	8000d0a <__aeabi_dadd+0x5be>
 8000942:	4649      	mov	r1, r9
 8000944:	0758      	lsls	r0, r3, #29
 8000946:	08c9      	lsrs	r1, r1, #3
 8000948:	4301      	orrs	r1, r0
 800094a:	08db      	lsrs	r3, r3, #3
 800094c:	e026      	b.n	800099c <__aeabi_dadd+0x250>
 800094e:	0029      	movs	r1, r5
 8000950:	4339      	orrs	r1, r7
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x20a>
 8000954:	e091      	b.n	8000a7a <__aeabi_dadd+0x32e>
 8000956:	1e51      	subs	r1, r2, #1
 8000958:	2a01      	cmp	r2, #1
 800095a:	d005      	beq.n	8000968 <__aeabi_dadd+0x21c>
 800095c:	4858      	ldr	r0, [pc, #352]	; (8000ac0 <__aeabi_dadd+0x374>)
 800095e:	4282      	cmp	r2, r0
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x218>
 8000962:	e18f      	b.n	8000c84 <__aeabi_dadd+0x538>
 8000964:	000a      	movs	r2, r1
 8000966:	e7b8      	b.n	80008da <__aeabi_dadd+0x18e>
 8000968:	003d      	movs	r5, r7
 800096a:	444d      	add	r5, r9
 800096c:	454d      	cmp	r5, r9
 800096e:	4189      	sbcs	r1, r1
 8000970:	4463      	add	r3, ip
 8000972:	4698      	mov	r8, r3
 8000974:	4249      	negs	r1, r1
 8000976:	4488      	add	r8, r1
 8000978:	4643      	mov	r3, r8
 800097a:	2602      	movs	r6, #2
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	d500      	bpl.n	8000982 <__aeabi_dadd+0x236>
 8000980:	e0eb      	b.n	8000b5a <__aeabi_dadd+0x40e>
 8000982:	3e01      	subs	r6, #1
 8000984:	076b      	lsls	r3, r5, #29
 8000986:	d000      	beq.n	800098a <__aeabi_dadd+0x23e>
 8000988:	e75c      	b.n	8000844 <__aeabi_dadd+0xf8>
 800098a:	4643      	mov	r3, r8
 800098c:	08e9      	lsrs	r1, r5, #3
 800098e:	075a      	lsls	r2, r3, #29
 8000990:	4311      	orrs	r1, r2
 8000992:	0032      	movs	r2, r6
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	484a      	ldr	r0, [pc, #296]	; (8000ac0 <__aeabi_dadd+0x374>)
 8000998:	4282      	cmp	r2, r0
 800099a:	d021      	beq.n	80009e0 <__aeabi_dadd+0x294>
 800099c:	031b      	lsls	r3, r3, #12
 800099e:	0552      	lsls	r2, r2, #21
 80009a0:	0b1b      	lsrs	r3, r3, #12
 80009a2:	0d52      	lsrs	r2, r2, #21
 80009a4:	e76c      	b.n	8000880 <__aeabi_dadd+0x134>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	e769      	b.n	8000880 <__aeabi_dadd+0x134>
 80009ac:	002a      	movs	r2, r5
 80009ae:	433a      	orrs	r2, r7
 80009b0:	d069      	beq.n	8000a86 <__aeabi_dadd+0x33a>
 80009b2:	464a      	mov	r2, r9
 80009b4:	0758      	lsls	r0, r3, #29
 80009b6:	08d1      	lsrs	r1, r2, #3
 80009b8:	08da      	lsrs	r2, r3, #3
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	031b      	lsls	r3, r3, #12
 80009be:	4308      	orrs	r0, r1
 80009c0:	421a      	tst	r2, r3
 80009c2:	d007      	beq.n	80009d4 <__aeabi_dadd+0x288>
 80009c4:	0029      	movs	r1, r5
 80009c6:	08ed      	lsrs	r5, r5, #3
 80009c8:	421d      	tst	r5, r3
 80009ca:	d103      	bne.n	80009d4 <__aeabi_dadd+0x288>
 80009cc:	002a      	movs	r2, r5
 80009ce:	08ff      	lsrs	r7, r7, #3
 80009d0:	0748      	lsls	r0, r1, #29
 80009d2:	4338      	orrs	r0, r7
 80009d4:	0f43      	lsrs	r3, r0, #29
 80009d6:	00c1      	lsls	r1, r0, #3
 80009d8:	075b      	lsls	r3, r3, #29
 80009da:	08c9      	lsrs	r1, r1, #3
 80009dc:	4319      	orrs	r1, r3
 80009de:	0013      	movs	r3, r2
 80009e0:	000a      	movs	r2, r1
 80009e2:	431a      	orrs	r2, r3
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x29c>
 80009e6:	e213      	b.n	8000e10 <__aeabi_dadd+0x6c4>
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	0312      	lsls	r2, r2, #12
 80009ec:	4313      	orrs	r3, r2
 80009ee:	031b      	lsls	r3, r3, #12
 80009f0:	4a33      	ldr	r2, [pc, #204]	; (8000ac0 <__aeabi_dadd+0x374>)
 80009f2:	0b1b      	lsrs	r3, r3, #12
 80009f4:	e744      	b.n	8000880 <__aeabi_dadd+0x134>
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d04b      	beq.n	8000a92 <__aeabi_dadd+0x346>
 80009fa:	1b8a      	subs	r2, r1, r6
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x2b6>
 8000a00:	e0e7      	b.n	8000bd2 <__aeabi_dadd+0x486>
 8000a02:	482f      	ldr	r0, [pc, #188]	; (8000ac0 <__aeabi_dadd+0x374>)
 8000a04:	4281      	cmp	r1, r0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dadd+0x2be>
 8000a08:	e195      	b.n	8000d36 <__aeabi_dadd+0x5ea>
 8000a0a:	2080      	movs	r0, #128	; 0x80
 8000a0c:	0400      	lsls	r0, r0, #16
 8000a0e:	4303      	orrs	r3, r0
 8000a10:	2a38      	cmp	r2, #56	; 0x38
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dadd+0x2ca>
 8000a14:	e143      	b.n	8000c9e <__aeabi_dadd+0x552>
 8000a16:	2a1f      	cmp	r2, #31
 8000a18:	dd00      	ble.n	8000a1c <__aeabi_dadd+0x2d0>
 8000a1a:	e1db      	b.n	8000dd4 <__aeabi_dadd+0x688>
 8000a1c:	2020      	movs	r0, #32
 8000a1e:	001d      	movs	r5, r3
 8000a20:	464e      	mov	r6, r9
 8000a22:	1a80      	subs	r0, r0, r2
 8000a24:	4085      	lsls	r5, r0
 8000a26:	40d6      	lsrs	r6, r2
 8000a28:	4335      	orrs	r5, r6
 8000a2a:	464e      	mov	r6, r9
 8000a2c:	4086      	lsls	r6, r0
 8000a2e:	0030      	movs	r0, r6
 8000a30:	40d3      	lsrs	r3, r2
 8000a32:	1e46      	subs	r6, r0, #1
 8000a34:	41b0      	sbcs	r0, r6
 8000a36:	449c      	add	ip, r3
 8000a38:	4305      	orrs	r5, r0
 8000a3a:	19ed      	adds	r5, r5, r7
 8000a3c:	42bd      	cmp	r5, r7
 8000a3e:	419b      	sbcs	r3, r3
 8000a40:	425b      	negs	r3, r3
 8000a42:	4463      	add	r3, ip
 8000a44:	4698      	mov	r8, r3
 8000a46:	000e      	movs	r6, r1
 8000a48:	e07f      	b.n	8000b4a <__aeabi_dadd+0x3fe>
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <__aeabi_dadd+0x378>)
 8000a4c:	1a76      	subs	r6, r6, r1
 8000a4e:	4013      	ands	r3, r2
 8000a50:	4698      	mov	r8, r3
 8000a52:	e6f5      	b.n	8000840 <__aeabi_dadd+0xf4>
 8000a54:	0028      	movs	r0, r5
 8000a56:	f001 fcd9 	bl	800240c <__clzsi2>
 8000a5a:	0001      	movs	r1, r0
 8000a5c:	3118      	adds	r1, #24
 8000a5e:	291f      	cmp	r1, #31
 8000a60:	dc00      	bgt.n	8000a64 <__aeabi_dadd+0x318>
 8000a62:	e6cf      	b.n	8000804 <__aeabi_dadd+0xb8>
 8000a64:	002b      	movs	r3, r5
 8000a66:	3808      	subs	r0, #8
 8000a68:	4083      	lsls	r3, r0
 8000a6a:	2500      	movs	r5, #0
 8000a6c:	e6d2      	b.n	8000814 <__aeabi_dadd+0xc8>
 8000a6e:	4662      	mov	r2, ip
 8000a70:	433a      	orrs	r2, r7
 8000a72:	0011      	movs	r1, r2
 8000a74:	1e4f      	subs	r7, r1, #1
 8000a76:	41b9      	sbcs	r1, r7
 8000a78:	e6ac      	b.n	80007d4 <__aeabi_dadd+0x88>
 8000a7a:	4649      	mov	r1, r9
 8000a7c:	0758      	lsls	r0, r3, #29
 8000a7e:	08c9      	lsrs	r1, r1, #3
 8000a80:	4301      	orrs	r1, r0
 8000a82:	08db      	lsrs	r3, r3, #3
 8000a84:	e787      	b.n	8000996 <__aeabi_dadd+0x24a>
 8000a86:	4649      	mov	r1, r9
 8000a88:	075a      	lsls	r2, r3, #29
 8000a8a:	08c9      	lsrs	r1, r1, #3
 8000a8c:	4311      	orrs	r1, r2
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	e7a6      	b.n	80009e0 <__aeabi_dadd+0x294>
 8000a92:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <__aeabi_dadd+0x37c>)
 8000a94:	1c70      	adds	r0, r6, #1
 8000a96:	4208      	tst	r0, r1
 8000a98:	d000      	beq.n	8000a9c <__aeabi_dadd+0x350>
 8000a9a:	e0bb      	b.n	8000c14 <__aeabi_dadd+0x4c8>
 8000a9c:	2e00      	cmp	r6, #0
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_dadd+0x356>
 8000aa0:	e114      	b.n	8000ccc <__aeabi_dadd+0x580>
 8000aa2:	4649      	mov	r1, r9
 8000aa4:	4319      	orrs	r1, r3
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x35e>
 8000aa8:	e175      	b.n	8000d96 <__aeabi_dadd+0x64a>
 8000aaa:	0029      	movs	r1, r5
 8000aac:	4339      	orrs	r1, r7
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_dadd+0x366>
 8000ab0:	e17e      	b.n	8000db0 <__aeabi_dadd+0x664>
 8000ab2:	4649      	mov	r1, r9
 8000ab4:	0758      	lsls	r0, r3, #29
 8000ab6:	08c9      	lsrs	r1, r1, #3
 8000ab8:	4301      	orrs	r1, r0
 8000aba:	08db      	lsrs	r3, r3, #3
 8000abc:	e76e      	b.n	800099c <__aeabi_dadd+0x250>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	000007ff 	.word	0x000007ff
 8000ac4:	ff7fffff 	.word	0xff7fffff
 8000ac8:	000007fe 	.word	0x000007fe
 8000acc:	4649      	mov	r1, r9
 8000ace:	1bcd      	subs	r5, r1, r7
 8000ad0:	4661      	mov	r1, ip
 8000ad2:	1a58      	subs	r0, r3, r1
 8000ad4:	45a9      	cmp	r9, r5
 8000ad6:	4189      	sbcs	r1, r1
 8000ad8:	4249      	negs	r1, r1
 8000ada:	4688      	mov	r8, r1
 8000adc:	0001      	movs	r1, r0
 8000ade:	4640      	mov	r0, r8
 8000ae0:	1a09      	subs	r1, r1, r0
 8000ae2:	4688      	mov	r8, r1
 8000ae4:	0209      	lsls	r1, r1, #8
 8000ae6:	d500      	bpl.n	8000aea <__aeabi_dadd+0x39e>
 8000ae8:	e0a6      	b.n	8000c38 <__aeabi_dadd+0x4ec>
 8000aea:	4641      	mov	r1, r8
 8000aec:	4329      	orrs	r1, r5
 8000aee:	d000      	beq.n	8000af2 <__aeabi_dadd+0x3a6>
 8000af0:	e67f      	b.n	80007f2 <__aeabi_dadd+0xa6>
 8000af2:	2300      	movs	r3, #0
 8000af4:	2400      	movs	r4, #0
 8000af6:	e751      	b.n	800099c <__aeabi_dadd+0x250>
 8000af8:	4cc7      	ldr	r4, [pc, #796]	; (8000e18 <__aeabi_dadd+0x6cc>)
 8000afa:	42a1      	cmp	r1, r4
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dadd+0x3b4>
 8000afe:	e0c7      	b.n	8000c90 <__aeabi_dadd+0x544>
 8000b00:	2480      	movs	r4, #128	; 0x80
 8000b02:	0424      	lsls	r4, r4, #16
 8000b04:	4323      	orrs	r3, r4
 8000b06:	2a38      	cmp	r2, #56	; 0x38
 8000b08:	dc54      	bgt.n	8000bb4 <__aeabi_dadd+0x468>
 8000b0a:	2a1f      	cmp	r2, #31
 8000b0c:	dd00      	ble.n	8000b10 <__aeabi_dadd+0x3c4>
 8000b0e:	e0cc      	b.n	8000caa <__aeabi_dadd+0x55e>
 8000b10:	2420      	movs	r4, #32
 8000b12:	4648      	mov	r0, r9
 8000b14:	1aa4      	subs	r4, r4, r2
 8000b16:	001d      	movs	r5, r3
 8000b18:	464e      	mov	r6, r9
 8000b1a:	40a0      	lsls	r0, r4
 8000b1c:	40d6      	lsrs	r6, r2
 8000b1e:	40a5      	lsls	r5, r4
 8000b20:	0004      	movs	r4, r0
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	4662      	mov	r2, ip
 8000b26:	4335      	orrs	r5, r6
 8000b28:	1e66      	subs	r6, r4, #1
 8000b2a:	41b4      	sbcs	r4, r6
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	469c      	mov	ip, r3
 8000b30:	4325      	orrs	r5, r4
 8000b32:	e044      	b.n	8000bbe <__aeabi_dadd+0x472>
 8000b34:	4662      	mov	r2, ip
 8000b36:	433a      	orrs	r2, r7
 8000b38:	0015      	movs	r5, r2
 8000b3a:	1e6f      	subs	r7, r5, #1
 8000b3c:	41bd      	sbcs	r5, r7
 8000b3e:	444d      	add	r5, r9
 8000b40:	454d      	cmp	r5, r9
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	4249      	negs	r1, r1
 8000b46:	4688      	mov	r8, r1
 8000b48:	4498      	add	r8, r3
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	d400      	bmi.n	8000b52 <__aeabi_dadd+0x406>
 8000b50:	e718      	b.n	8000984 <__aeabi_dadd+0x238>
 8000b52:	4bb1      	ldr	r3, [pc, #708]	; (8000e18 <__aeabi_dadd+0x6cc>)
 8000b54:	3601      	adds	r6, #1
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d049      	beq.n	8000bee <__aeabi_dadd+0x4a2>
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	4baf      	ldr	r3, [pc, #700]	; (8000e1c <__aeabi_dadd+0x6d0>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	401a      	ands	r2, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	086a      	lsrs	r2, r5, #1
 8000b66:	400d      	ands	r5, r1
 8000b68:	4315      	orrs	r5, r2
 8000b6a:	07d9      	lsls	r1, r3, #31
 8000b6c:	085b      	lsrs	r3, r3, #1
 8000b6e:	4698      	mov	r8, r3
 8000b70:	430d      	orrs	r5, r1
 8000b72:	e665      	b.n	8000840 <__aeabi_dadd+0xf4>
 8000b74:	0018      	movs	r0, r3
 8000b76:	3e1f      	subs	r6, #31
 8000b78:	40f0      	lsrs	r0, r6
 8000b7a:	2a20      	cmp	r2, #32
 8000b7c:	d003      	beq.n	8000b86 <__aeabi_dadd+0x43a>
 8000b7e:	2140      	movs	r1, #64	; 0x40
 8000b80:	1a8a      	subs	r2, r1, r2
 8000b82:	4093      	lsls	r3, r2
 8000b84:	431d      	orrs	r5, r3
 8000b86:	1e69      	subs	r1, r5, #1
 8000b88:	418d      	sbcs	r5, r1
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	4698      	mov	r8, r3
 8000b90:	4305      	orrs	r5, r0
 8000b92:	e6f7      	b.n	8000984 <__aeabi_dadd+0x238>
 8000b94:	0011      	movs	r1, r2
 8000b96:	4665      	mov	r5, ip
 8000b98:	3920      	subs	r1, #32
 8000b9a:	40cd      	lsrs	r5, r1
 8000b9c:	2a20      	cmp	r2, #32
 8000b9e:	d004      	beq.n	8000baa <__aeabi_dadd+0x45e>
 8000ba0:	2040      	movs	r0, #64	; 0x40
 8000ba2:	4661      	mov	r1, ip
 8000ba4:	1a82      	subs	r2, r0, r2
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	430f      	orrs	r7, r1
 8000baa:	0039      	movs	r1, r7
 8000bac:	1e4f      	subs	r7, r1, #1
 8000bae:	41b9      	sbcs	r1, r7
 8000bb0:	4329      	orrs	r1, r5
 8000bb2:	e60f      	b.n	80007d4 <__aeabi_dadd+0x88>
 8000bb4:	464a      	mov	r2, r9
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	001d      	movs	r5, r3
 8000bba:	1e6b      	subs	r3, r5, #1
 8000bbc:	419d      	sbcs	r5, r3
 8000bbe:	1b7d      	subs	r5, r7, r5
 8000bc0:	42af      	cmp	r7, r5
 8000bc2:	419b      	sbcs	r3, r3
 8000bc4:	4662      	mov	r2, ip
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	4698      	mov	r8, r3
 8000bcc:	4654      	mov	r4, sl
 8000bce:	000e      	movs	r6, r1
 8000bd0:	e607      	b.n	80007e2 <__aeabi_dadd+0x96>
 8000bd2:	4648      	mov	r0, r9
 8000bd4:	4318      	orrs	r0, r3
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dadd+0x48e>
 8000bd8:	e0b3      	b.n	8000d42 <__aeabi_dadd+0x5f6>
 8000bda:	1e50      	subs	r0, r2, #1
 8000bdc:	2a01      	cmp	r2, #1
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dadd+0x496>
 8000be0:	e10d      	b.n	8000dfe <__aeabi_dadd+0x6b2>
 8000be2:	4d8d      	ldr	r5, [pc, #564]	; (8000e18 <__aeabi_dadd+0x6cc>)
 8000be4:	42aa      	cmp	r2, r5
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x49e>
 8000be8:	e0a5      	b.n	8000d36 <__aeabi_dadd+0x5ea>
 8000bea:	0002      	movs	r2, r0
 8000bec:	e710      	b.n	8000a10 <__aeabi_dadd+0x2c4>
 8000bee:	0032      	movs	r2, r6
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	e644      	b.n	8000880 <__aeabi_dadd+0x134>
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	1a89      	subs	r1, r1, r2
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	408f      	lsls	r7, r1
 8000c00:	408d      	lsls	r5, r1
 8000c02:	40d0      	lsrs	r0, r2
 8000c04:	1e79      	subs	r1, r7, #1
 8000c06:	418f      	sbcs	r7, r1
 8000c08:	4305      	orrs	r5, r0
 8000c0a:	433d      	orrs	r5, r7
 8000c0c:	4667      	mov	r7, ip
 8000c0e:	40d7      	lsrs	r7, r2
 8000c10:	19db      	adds	r3, r3, r7
 8000c12:	e794      	b.n	8000b3e <__aeabi_dadd+0x3f2>
 8000c14:	4a80      	ldr	r2, [pc, #512]	; (8000e18 <__aeabi_dadd+0x6cc>)
 8000c16:	4290      	cmp	r0, r2
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dadd+0x4d0>
 8000c1a:	e0ec      	b.n	8000df6 <__aeabi_dadd+0x6aa>
 8000c1c:	0039      	movs	r1, r7
 8000c1e:	4449      	add	r1, r9
 8000c20:	4549      	cmp	r1, r9
 8000c22:	4192      	sbcs	r2, r2
 8000c24:	4463      	add	r3, ip
 8000c26:	4252      	negs	r2, r2
 8000c28:	189b      	adds	r3, r3, r2
 8000c2a:	07dd      	lsls	r5, r3, #31
 8000c2c:	0849      	lsrs	r1, r1, #1
 8000c2e:	085b      	lsrs	r3, r3, #1
 8000c30:	4698      	mov	r8, r3
 8000c32:	0006      	movs	r6, r0
 8000c34:	430d      	orrs	r5, r1
 8000c36:	e6a5      	b.n	8000984 <__aeabi_dadd+0x238>
 8000c38:	464a      	mov	r2, r9
 8000c3a:	1abd      	subs	r5, r7, r2
 8000c3c:	42af      	cmp	r7, r5
 8000c3e:	4189      	sbcs	r1, r1
 8000c40:	4662      	mov	r2, ip
 8000c42:	4249      	negs	r1, r1
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	1a5b      	subs	r3, r3, r1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	4654      	mov	r4, sl
 8000c4c:	e5d1      	b.n	80007f2 <__aeabi_dadd+0xa6>
 8000c4e:	076c      	lsls	r4, r5, #29
 8000c50:	08f9      	lsrs	r1, r7, #3
 8000c52:	4321      	orrs	r1, r4
 8000c54:	08eb      	lsrs	r3, r5, #3
 8000c56:	0004      	movs	r4, r0
 8000c58:	e69d      	b.n	8000996 <__aeabi_dadd+0x24a>
 8000c5a:	464a      	mov	r2, r9
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	d175      	bne.n	8000d4c <__aeabi_dadd+0x600>
 8000c60:	4661      	mov	r1, ip
 8000c62:	4339      	orrs	r1, r7
 8000c64:	d114      	bne.n	8000c90 <__aeabi_dadd+0x544>
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	2400      	movs	r4, #0
 8000c6a:	031b      	lsls	r3, r3, #12
 8000c6c:	e6bc      	b.n	80009e8 <__aeabi_dadd+0x29c>
 8000c6e:	464a      	mov	r2, r9
 8000c70:	1bd5      	subs	r5, r2, r7
 8000c72:	45a9      	cmp	r9, r5
 8000c74:	4189      	sbcs	r1, r1
 8000c76:	4662      	mov	r2, ip
 8000c78:	4249      	negs	r1, r1
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	4698      	mov	r8, r3
 8000c80:	2601      	movs	r6, #1
 8000c82:	e5ae      	b.n	80007e2 <__aeabi_dadd+0x96>
 8000c84:	464a      	mov	r2, r9
 8000c86:	08d1      	lsrs	r1, r2, #3
 8000c88:	075a      	lsls	r2, r3, #29
 8000c8a:	4311      	orrs	r1, r2
 8000c8c:	08db      	lsrs	r3, r3, #3
 8000c8e:	e6a7      	b.n	80009e0 <__aeabi_dadd+0x294>
 8000c90:	4663      	mov	r3, ip
 8000c92:	08f9      	lsrs	r1, r7, #3
 8000c94:	075a      	lsls	r2, r3, #29
 8000c96:	4654      	mov	r4, sl
 8000c98:	4311      	orrs	r1, r2
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	e6a0      	b.n	80009e0 <__aeabi_dadd+0x294>
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	001d      	movs	r5, r3
 8000ca4:	1e6b      	subs	r3, r5, #1
 8000ca6:	419d      	sbcs	r5, r3
 8000ca8:	e6c7      	b.n	8000a3a <__aeabi_dadd+0x2ee>
 8000caa:	0014      	movs	r4, r2
 8000cac:	001e      	movs	r6, r3
 8000cae:	3c20      	subs	r4, #32
 8000cb0:	40e6      	lsrs	r6, r4
 8000cb2:	2a20      	cmp	r2, #32
 8000cb4:	d005      	beq.n	8000cc2 <__aeabi_dadd+0x576>
 8000cb6:	2440      	movs	r4, #64	; 0x40
 8000cb8:	1aa2      	subs	r2, r4, r2
 8000cba:	4093      	lsls	r3, r2
 8000cbc:	464a      	mov	r2, r9
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	4691      	mov	r9, r2
 8000cc2:	464d      	mov	r5, r9
 8000cc4:	1e6b      	subs	r3, r5, #1
 8000cc6:	419d      	sbcs	r5, r3
 8000cc8:	4335      	orrs	r5, r6
 8000cca:	e778      	b.n	8000bbe <__aeabi_dadd+0x472>
 8000ccc:	464a      	mov	r2, r9
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	d000      	beq.n	8000cd4 <__aeabi_dadd+0x588>
 8000cd2:	e66b      	b.n	80009ac <__aeabi_dadd+0x260>
 8000cd4:	076b      	lsls	r3, r5, #29
 8000cd6:	08f9      	lsrs	r1, r7, #3
 8000cd8:	4319      	orrs	r1, r3
 8000cda:	08eb      	lsrs	r3, r5, #3
 8000cdc:	e680      	b.n	80009e0 <__aeabi_dadd+0x294>
 8000cde:	4661      	mov	r1, ip
 8000ce0:	4339      	orrs	r1, r7
 8000ce2:	d054      	beq.n	8000d8e <__aeabi_dadd+0x642>
 8000ce4:	4663      	mov	r3, ip
 8000ce6:	08f9      	lsrs	r1, r7, #3
 8000ce8:	075c      	lsls	r4, r3, #29
 8000cea:	4321      	orrs	r1, r4
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	0004      	movs	r4, r0
 8000cf0:	e654      	b.n	800099c <__aeabi_dadd+0x250>
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	1abd      	subs	r5, r7, r2
 8000cf6:	42af      	cmp	r7, r5
 8000cf8:	4189      	sbcs	r1, r1
 8000cfa:	4662      	mov	r2, ip
 8000cfc:	4249      	negs	r1, r1
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	4698      	mov	r8, r3
 8000d04:	0004      	movs	r4, r0
 8000d06:	2601      	movs	r6, #1
 8000d08:	e56b      	b.n	80007e2 <__aeabi_dadd+0x96>
 8000d0a:	464a      	mov	r2, r9
 8000d0c:	1bd5      	subs	r5, r2, r7
 8000d0e:	45a9      	cmp	r9, r5
 8000d10:	4189      	sbcs	r1, r1
 8000d12:	4662      	mov	r2, ip
 8000d14:	4249      	negs	r1, r1
 8000d16:	1a9a      	subs	r2, r3, r2
 8000d18:	1a52      	subs	r2, r2, r1
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	0212      	lsls	r2, r2, #8
 8000d1e:	d532      	bpl.n	8000d86 <__aeabi_dadd+0x63a>
 8000d20:	464a      	mov	r2, r9
 8000d22:	1abd      	subs	r5, r7, r2
 8000d24:	42af      	cmp	r7, r5
 8000d26:	4189      	sbcs	r1, r1
 8000d28:	4662      	mov	r2, ip
 8000d2a:	4249      	negs	r1, r1
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	1a5b      	subs	r3, r3, r1
 8000d30:	4698      	mov	r8, r3
 8000d32:	0004      	movs	r4, r0
 8000d34:	e584      	b.n	8000840 <__aeabi_dadd+0xf4>
 8000d36:	4663      	mov	r3, ip
 8000d38:	08f9      	lsrs	r1, r7, #3
 8000d3a:	075a      	lsls	r2, r3, #29
 8000d3c:	4311      	orrs	r1, r2
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	e64e      	b.n	80009e0 <__aeabi_dadd+0x294>
 8000d42:	08f9      	lsrs	r1, r7, #3
 8000d44:	0768      	lsls	r0, r5, #29
 8000d46:	4301      	orrs	r1, r0
 8000d48:	08eb      	lsrs	r3, r5, #3
 8000d4a:	e624      	b.n	8000996 <__aeabi_dadd+0x24a>
 8000d4c:	4662      	mov	r2, ip
 8000d4e:	433a      	orrs	r2, r7
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x608>
 8000d52:	e698      	b.n	8000a86 <__aeabi_dadd+0x33a>
 8000d54:	464a      	mov	r2, r9
 8000d56:	08d1      	lsrs	r1, r2, #3
 8000d58:	075a      	lsls	r2, r3, #29
 8000d5a:	4311      	orrs	r1, r2
 8000d5c:	08da      	lsrs	r2, r3, #3
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	031b      	lsls	r3, r3, #12
 8000d62:	421a      	tst	r2, r3
 8000d64:	d008      	beq.n	8000d78 <__aeabi_dadd+0x62c>
 8000d66:	4660      	mov	r0, ip
 8000d68:	08c5      	lsrs	r5, r0, #3
 8000d6a:	421d      	tst	r5, r3
 8000d6c:	d104      	bne.n	8000d78 <__aeabi_dadd+0x62c>
 8000d6e:	4654      	mov	r4, sl
 8000d70:	002a      	movs	r2, r5
 8000d72:	08f9      	lsrs	r1, r7, #3
 8000d74:	0743      	lsls	r3, r0, #29
 8000d76:	4319      	orrs	r1, r3
 8000d78:	0f4b      	lsrs	r3, r1, #29
 8000d7a:	00c9      	lsls	r1, r1, #3
 8000d7c:	075b      	lsls	r3, r3, #29
 8000d7e:	08c9      	lsrs	r1, r1, #3
 8000d80:	4319      	orrs	r1, r3
 8000d82:	0013      	movs	r3, r2
 8000d84:	e62c      	b.n	80009e0 <__aeabi_dadd+0x294>
 8000d86:	4641      	mov	r1, r8
 8000d88:	4329      	orrs	r1, r5
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dadd+0x642>
 8000d8c:	e5fa      	b.n	8000984 <__aeabi_dadd+0x238>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	000a      	movs	r2, r1
 8000d92:	2400      	movs	r4, #0
 8000d94:	e602      	b.n	800099c <__aeabi_dadd+0x250>
 8000d96:	076b      	lsls	r3, r5, #29
 8000d98:	08f9      	lsrs	r1, r7, #3
 8000d9a:	4319      	orrs	r1, r3
 8000d9c:	08eb      	lsrs	r3, r5, #3
 8000d9e:	e5fd      	b.n	800099c <__aeabi_dadd+0x250>
 8000da0:	4663      	mov	r3, ip
 8000da2:	08f9      	lsrs	r1, r7, #3
 8000da4:	075b      	lsls	r3, r3, #29
 8000da6:	4319      	orrs	r1, r3
 8000da8:	4663      	mov	r3, ip
 8000daa:	0004      	movs	r4, r0
 8000dac:	08db      	lsrs	r3, r3, #3
 8000dae:	e617      	b.n	80009e0 <__aeabi_dadd+0x294>
 8000db0:	003d      	movs	r5, r7
 8000db2:	444d      	add	r5, r9
 8000db4:	4463      	add	r3, ip
 8000db6:	454d      	cmp	r5, r9
 8000db8:	4189      	sbcs	r1, r1
 8000dba:	4698      	mov	r8, r3
 8000dbc:	4249      	negs	r1, r1
 8000dbe:	4488      	add	r8, r1
 8000dc0:	4643      	mov	r3, r8
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	d400      	bmi.n	8000dc8 <__aeabi_dadd+0x67c>
 8000dc6:	e5dd      	b.n	8000984 <__aeabi_dadd+0x238>
 8000dc8:	4642      	mov	r2, r8
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <__aeabi_dadd+0x6d0>)
 8000dcc:	2601      	movs	r6, #1
 8000dce:	401a      	ands	r2, r3
 8000dd0:	4690      	mov	r8, r2
 8000dd2:	e5d7      	b.n	8000984 <__aeabi_dadd+0x238>
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	001e      	movs	r6, r3
 8000dd8:	3820      	subs	r0, #32
 8000dda:	40c6      	lsrs	r6, r0
 8000ddc:	2a20      	cmp	r2, #32
 8000dde:	d005      	beq.n	8000dec <__aeabi_dadd+0x6a0>
 8000de0:	2040      	movs	r0, #64	; 0x40
 8000de2:	1a82      	subs	r2, r0, r2
 8000de4:	4093      	lsls	r3, r2
 8000de6:	464a      	mov	r2, r9
 8000de8:	431a      	orrs	r2, r3
 8000dea:	4691      	mov	r9, r2
 8000dec:	464d      	mov	r5, r9
 8000dee:	1e6b      	subs	r3, r5, #1
 8000df0:	419d      	sbcs	r5, r3
 8000df2:	4335      	orrs	r5, r6
 8000df4:	e621      	b.n	8000a3a <__aeabi_dadd+0x2ee>
 8000df6:	0002      	movs	r2, r0
 8000df8:	2300      	movs	r3, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	e540      	b.n	8000880 <__aeabi_dadd+0x134>
 8000dfe:	464a      	mov	r2, r9
 8000e00:	19d5      	adds	r5, r2, r7
 8000e02:	42bd      	cmp	r5, r7
 8000e04:	4189      	sbcs	r1, r1
 8000e06:	4463      	add	r3, ip
 8000e08:	4698      	mov	r8, r3
 8000e0a:	4249      	negs	r1, r1
 8000e0c:	4488      	add	r8, r1
 8000e0e:	e5b3      	b.n	8000978 <__aeabi_dadd+0x22c>
 8000e10:	2100      	movs	r1, #0
 8000e12:	4a01      	ldr	r2, [pc, #4]	; (8000e18 <__aeabi_dadd+0x6cc>)
 8000e14:	000b      	movs	r3, r1
 8000e16:	e533      	b.n	8000880 <__aeabi_dadd+0x134>
 8000e18:	000007ff 	.word	0x000007ff
 8000e1c:	ff7fffff 	.word	0xff7fffff

08000e20 <__aeabi_ddiv>:
 8000e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e22:	4657      	mov	r7, sl
 8000e24:	464e      	mov	r6, r9
 8000e26:	4645      	mov	r5, r8
 8000e28:	46de      	mov	lr, fp
 8000e2a:	b5e0      	push	{r5, r6, r7, lr}
 8000e2c:	4681      	mov	r9, r0
 8000e2e:	0005      	movs	r5, r0
 8000e30:	030c      	lsls	r4, r1, #12
 8000e32:	0048      	lsls	r0, r1, #1
 8000e34:	4692      	mov	sl, r2
 8000e36:	001f      	movs	r7, r3
 8000e38:	b085      	sub	sp, #20
 8000e3a:	0b24      	lsrs	r4, r4, #12
 8000e3c:	0d40      	lsrs	r0, r0, #21
 8000e3e:	0fce      	lsrs	r6, r1, #31
 8000e40:	2800      	cmp	r0, #0
 8000e42:	d059      	beq.n	8000ef8 <__aeabi_ddiv+0xd8>
 8000e44:	4b87      	ldr	r3, [pc, #540]	; (8001064 <__aeabi_ddiv+0x244>)
 8000e46:	4298      	cmp	r0, r3
 8000e48:	d100      	bne.n	8000e4c <__aeabi_ddiv+0x2c>
 8000e4a:	e098      	b.n	8000f7e <__aeabi_ddiv+0x15e>
 8000e4c:	0f6b      	lsrs	r3, r5, #29
 8000e4e:	00e4      	lsls	r4, r4, #3
 8000e50:	431c      	orrs	r4, r3
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	4323      	orrs	r3, r4
 8000e58:	4698      	mov	r8, r3
 8000e5a:	4b83      	ldr	r3, [pc, #524]	; (8001068 <__aeabi_ddiv+0x248>)
 8000e5c:	00ed      	lsls	r5, r5, #3
 8000e5e:	469b      	mov	fp, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	4699      	mov	r9, r3
 8000e64:	4483      	add	fp, r0
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	033c      	lsls	r4, r7, #12
 8000e6a:	007b      	lsls	r3, r7, #1
 8000e6c:	4650      	mov	r0, sl
 8000e6e:	0b24      	lsrs	r4, r4, #12
 8000e70:	0d5b      	lsrs	r3, r3, #21
 8000e72:	0fff      	lsrs	r7, r7, #31
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d067      	beq.n	8000f48 <__aeabi_ddiv+0x128>
 8000e78:	4a7a      	ldr	r2, [pc, #488]	; (8001064 <__aeabi_ddiv+0x244>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d018      	beq.n	8000eb0 <__aeabi_ddiv+0x90>
 8000e7e:	497a      	ldr	r1, [pc, #488]	; (8001068 <__aeabi_ddiv+0x248>)
 8000e80:	0f42      	lsrs	r2, r0, #29
 8000e82:	468c      	mov	ip, r1
 8000e84:	00e4      	lsls	r4, r4, #3
 8000e86:	4659      	mov	r1, fp
 8000e88:	4314      	orrs	r4, r2
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	4463      	add	r3, ip
 8000e8e:	0412      	lsls	r2, r2, #16
 8000e90:	1acb      	subs	r3, r1, r3
 8000e92:	4314      	orrs	r4, r2
 8000e94:	469b      	mov	fp, r3
 8000e96:	00c2      	lsls	r2, r0, #3
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0033      	movs	r3, r6
 8000e9c:	407b      	eors	r3, r7
 8000e9e:	469a      	mov	sl, r3
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	d900      	bls.n	8000ea8 <__aeabi_ddiv+0x88>
 8000ea6:	e0ef      	b.n	8001088 <__aeabi_ddiv+0x268>
 8000ea8:	4970      	ldr	r1, [pc, #448]	; (800106c <__aeabi_ddiv+0x24c>)
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	58cb      	ldr	r3, [r1, r3]
 8000eae:	469f      	mov	pc, r3
 8000eb0:	4b6f      	ldr	r3, [pc, #444]	; (8001070 <__aeabi_ddiv+0x250>)
 8000eb2:	4652      	mov	r2, sl
 8000eb4:	469c      	mov	ip, r3
 8000eb6:	4322      	orrs	r2, r4
 8000eb8:	44e3      	add	fp, ip
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	d000      	beq.n	8000ec0 <__aeabi_ddiv+0xa0>
 8000ebe:	e095      	b.n	8000fec <__aeabi_ddiv+0x1cc>
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	4319      	orrs	r1, r3
 8000ec6:	4689      	mov	r9, r1
 8000ec8:	2400      	movs	r4, #0
 8000eca:	2002      	movs	r0, #2
 8000ecc:	e7e5      	b.n	8000e9a <__aeabi_ddiv+0x7a>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	2500      	movs	r5, #0
 8000ed4:	4652      	mov	r2, sl
 8000ed6:	051b      	lsls	r3, r3, #20
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	07d2      	lsls	r2, r2, #31
 8000edc:	4313      	orrs	r3, r2
 8000ede:	0028      	movs	r0, r5
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	b005      	add	sp, #20
 8000ee4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ee6:	46bb      	mov	fp, r7
 8000ee8:	46b2      	mov	sl, r6
 8000eea:	46a9      	mov	r9, r5
 8000eec:	46a0      	mov	r8, r4
 8000eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	2500      	movs	r5, #0
 8000ef4:	4b5b      	ldr	r3, [pc, #364]	; (8001064 <__aeabi_ddiv+0x244>)
 8000ef6:	e7ed      	b.n	8000ed4 <__aeabi_ddiv+0xb4>
 8000ef8:	464b      	mov	r3, r9
 8000efa:	4323      	orrs	r3, r4
 8000efc:	4698      	mov	r8, r3
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0xe2>
 8000f00:	e089      	b.n	8001016 <__aeabi_ddiv+0x1f6>
 8000f02:	2c00      	cmp	r4, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_ddiv+0xe8>
 8000f06:	e1e0      	b.n	80012ca <__aeabi_ddiv+0x4aa>
 8000f08:	0020      	movs	r0, r4
 8000f0a:	f001 fa7f 	bl	800240c <__clzsi2>
 8000f0e:	0001      	movs	r1, r0
 8000f10:	0002      	movs	r2, r0
 8000f12:	390b      	subs	r1, #11
 8000f14:	231d      	movs	r3, #29
 8000f16:	1a5b      	subs	r3, r3, r1
 8000f18:	4649      	mov	r1, r9
 8000f1a:	0010      	movs	r0, r2
 8000f1c:	40d9      	lsrs	r1, r3
 8000f1e:	3808      	subs	r0, #8
 8000f20:	4084      	lsls	r4, r0
 8000f22:	000b      	movs	r3, r1
 8000f24:	464d      	mov	r5, r9
 8000f26:	4323      	orrs	r3, r4
 8000f28:	4698      	mov	r8, r3
 8000f2a:	4085      	lsls	r5, r0
 8000f2c:	4851      	ldr	r0, [pc, #324]	; (8001074 <__aeabi_ddiv+0x254>)
 8000f2e:	033c      	lsls	r4, r7, #12
 8000f30:	1a83      	subs	r3, r0, r2
 8000f32:	469b      	mov	fp, r3
 8000f34:	2300      	movs	r3, #0
 8000f36:	4699      	mov	r9, r3
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	007b      	lsls	r3, r7, #1
 8000f3c:	4650      	mov	r0, sl
 8000f3e:	0b24      	lsrs	r4, r4, #12
 8000f40:	0d5b      	lsrs	r3, r3, #21
 8000f42:	0fff      	lsrs	r7, r7, #31
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d197      	bne.n	8000e78 <__aeabi_ddiv+0x58>
 8000f48:	4652      	mov	r2, sl
 8000f4a:	4322      	orrs	r2, r4
 8000f4c:	d055      	beq.n	8000ffa <__aeabi_ddiv+0x1da>
 8000f4e:	2c00      	cmp	r4, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_ddiv+0x134>
 8000f52:	e1ca      	b.n	80012ea <__aeabi_ddiv+0x4ca>
 8000f54:	0020      	movs	r0, r4
 8000f56:	f001 fa59 	bl	800240c <__clzsi2>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	3a0b      	subs	r2, #11
 8000f5e:	231d      	movs	r3, #29
 8000f60:	0001      	movs	r1, r0
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	4652      	mov	r2, sl
 8000f66:	3908      	subs	r1, #8
 8000f68:	40da      	lsrs	r2, r3
 8000f6a:	408c      	lsls	r4, r1
 8000f6c:	4314      	orrs	r4, r2
 8000f6e:	4652      	mov	r2, sl
 8000f70:	408a      	lsls	r2, r1
 8000f72:	4b41      	ldr	r3, [pc, #260]	; (8001078 <__aeabi_ddiv+0x258>)
 8000f74:	4458      	add	r0, fp
 8000f76:	469b      	mov	fp, r3
 8000f78:	4483      	add	fp, r0
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	e78d      	b.n	8000e9a <__aeabi_ddiv+0x7a>
 8000f7e:	464b      	mov	r3, r9
 8000f80:	4323      	orrs	r3, r4
 8000f82:	4698      	mov	r8, r3
 8000f84:	d140      	bne.n	8001008 <__aeabi_ddiv+0x1e8>
 8000f86:	2308      	movs	r3, #8
 8000f88:	4699      	mov	r9, r3
 8000f8a:	3b06      	subs	r3, #6
 8000f8c:	2500      	movs	r5, #0
 8000f8e:	4683      	mov	fp, r0
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	e769      	b.n	8000e68 <__aeabi_ddiv+0x48>
 8000f94:	46b2      	mov	sl, r6
 8000f96:	9b00      	ldr	r3, [sp, #0]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d0a9      	beq.n	8000ef0 <__aeabi_ddiv+0xd0>
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_ddiv+0x182>
 8000fa0:	e211      	b.n	80013c6 <__aeabi_ddiv+0x5a6>
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d093      	beq.n	8000ece <__aeabi_ddiv+0xae>
 8000fa6:	4a35      	ldr	r2, [pc, #212]	; (800107c <__aeabi_ddiv+0x25c>)
 8000fa8:	445a      	add	r2, fp
 8000faa:	2a00      	cmp	r2, #0
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_ddiv+0x190>
 8000fae:	e13c      	b.n	800122a <__aeabi_ddiv+0x40a>
 8000fb0:	076b      	lsls	r3, r5, #29
 8000fb2:	d000      	beq.n	8000fb6 <__aeabi_ddiv+0x196>
 8000fb4:	e1a7      	b.n	8001306 <__aeabi_ddiv+0x4e6>
 8000fb6:	08ed      	lsrs	r5, r5, #3
 8000fb8:	4643      	mov	r3, r8
 8000fba:	01db      	lsls	r3, r3, #7
 8000fbc:	d506      	bpl.n	8000fcc <__aeabi_ddiv+0x1ac>
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <__aeabi_ddiv+0x260>)
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	4690      	mov	r8, r2
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	445a      	add	r2, fp
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <__aeabi_ddiv+0x264>)
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dc8e      	bgt.n	8000ef0 <__aeabi_ddiv+0xd0>
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	0552      	lsls	r2, r2, #21
 8000fd6:	0758      	lsls	r0, r3, #29
 8000fd8:	025c      	lsls	r4, r3, #9
 8000fda:	4305      	orrs	r5, r0
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	0d53      	lsrs	r3, r2, #21
 8000fe0:	e778      	b.n	8000ed4 <__aeabi_ddiv+0xb4>
 8000fe2:	46ba      	mov	sl, r7
 8000fe4:	46a0      	mov	r8, r4
 8000fe6:	0015      	movs	r5, r2
 8000fe8:	9000      	str	r0, [sp, #0]
 8000fea:	e7d4      	b.n	8000f96 <__aeabi_ddiv+0x176>
 8000fec:	464a      	mov	r2, r9
 8000fee:	2303      	movs	r3, #3
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	4691      	mov	r9, r2
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	4652      	mov	r2, sl
 8000ff8:	e74f      	b.n	8000e9a <__aeabi_ddiv+0x7a>
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	4319      	orrs	r1, r3
 8001000:	4689      	mov	r9, r1
 8001002:	2400      	movs	r4, #0
 8001004:	2001      	movs	r0, #1
 8001006:	e748      	b.n	8000e9a <__aeabi_ddiv+0x7a>
 8001008:	230c      	movs	r3, #12
 800100a:	4699      	mov	r9, r3
 800100c:	3b09      	subs	r3, #9
 800100e:	46a0      	mov	r8, r4
 8001010:	4683      	mov	fp, r0
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	e728      	b.n	8000e68 <__aeabi_ddiv+0x48>
 8001016:	2304      	movs	r3, #4
 8001018:	4699      	mov	r9, r3
 800101a:	2300      	movs	r3, #0
 800101c:	469b      	mov	fp, r3
 800101e:	3301      	adds	r3, #1
 8001020:	2500      	movs	r5, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	e720      	b.n	8000e68 <__aeabi_ddiv+0x48>
 8001026:	2300      	movs	r3, #0
 8001028:	2480      	movs	r4, #128	; 0x80
 800102a:	469a      	mov	sl, r3
 800102c:	2500      	movs	r5, #0
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <__aeabi_ddiv+0x244>)
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	e74f      	b.n	8000ed4 <__aeabi_ddiv+0xb4>
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	4641      	mov	r1, r8
 8001038:	031b      	lsls	r3, r3, #12
 800103a:	4219      	tst	r1, r3
 800103c:	d008      	beq.n	8001050 <__aeabi_ddiv+0x230>
 800103e:	421c      	tst	r4, r3
 8001040:	d106      	bne.n	8001050 <__aeabi_ddiv+0x230>
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46ba      	mov	sl, r7
 8001048:	0015      	movs	r5, r2
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <__aeabi_ddiv+0x244>)
 800104c:	0b24      	lsrs	r4, r4, #12
 800104e:	e741      	b.n	8000ed4 <__aeabi_ddiv+0xb4>
 8001050:	2480      	movs	r4, #128	; 0x80
 8001052:	4643      	mov	r3, r8
 8001054:	0324      	lsls	r4, r4, #12
 8001056:	431c      	orrs	r4, r3
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	46b2      	mov	sl, r6
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <__aeabi_ddiv+0x244>)
 800105e:	0b24      	lsrs	r4, r4, #12
 8001060:	e738      	b.n	8000ed4 <__aeabi_ddiv+0xb4>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	000007ff 	.word	0x000007ff
 8001068:	fffffc01 	.word	0xfffffc01
 800106c:	08008370 	.word	0x08008370
 8001070:	fffff801 	.word	0xfffff801
 8001074:	fffffc0d 	.word	0xfffffc0d
 8001078:	000003f3 	.word	0x000003f3
 800107c:	000003ff 	.word	0x000003ff
 8001080:	feffffff 	.word	0xfeffffff
 8001084:	000007fe 	.word	0x000007fe
 8001088:	4544      	cmp	r4, r8
 800108a:	d200      	bcs.n	800108e <__aeabi_ddiv+0x26e>
 800108c:	e116      	b.n	80012bc <__aeabi_ddiv+0x49c>
 800108e:	d100      	bne.n	8001092 <__aeabi_ddiv+0x272>
 8001090:	e111      	b.n	80012b6 <__aeabi_ddiv+0x496>
 8001092:	2301      	movs	r3, #1
 8001094:	425b      	negs	r3, r3
 8001096:	469c      	mov	ip, r3
 8001098:	002e      	movs	r6, r5
 800109a:	4640      	mov	r0, r8
 800109c:	2500      	movs	r5, #0
 800109e:	44e3      	add	fp, ip
 80010a0:	0223      	lsls	r3, r4, #8
 80010a2:	0e14      	lsrs	r4, r2, #24
 80010a4:	431c      	orrs	r4, r3
 80010a6:	0c1b      	lsrs	r3, r3, #16
 80010a8:	4699      	mov	r9, r3
 80010aa:	0423      	lsls	r3, r4, #16
 80010ac:	0c1f      	lsrs	r7, r3, #16
 80010ae:	0212      	lsls	r2, r2, #8
 80010b0:	4649      	mov	r1, r9
 80010b2:	9200      	str	r2, [sp, #0]
 80010b4:	9701      	str	r7, [sp, #4]
 80010b6:	f7ff f8c9 	bl	800024c <__aeabi_uidivmod>
 80010ba:	0002      	movs	r2, r0
 80010bc:	437a      	muls	r2, r7
 80010be:	040b      	lsls	r3, r1, #16
 80010c0:	0c31      	lsrs	r1, r6, #16
 80010c2:	4680      	mov	r8, r0
 80010c4:	4319      	orrs	r1, r3
 80010c6:	428a      	cmp	r2, r1
 80010c8:	d90b      	bls.n	80010e2 <__aeabi_ddiv+0x2c2>
 80010ca:	2301      	movs	r3, #1
 80010cc:	425b      	negs	r3, r3
 80010ce:	469c      	mov	ip, r3
 80010d0:	1909      	adds	r1, r1, r4
 80010d2:	44e0      	add	r8, ip
 80010d4:	428c      	cmp	r4, r1
 80010d6:	d804      	bhi.n	80010e2 <__aeabi_ddiv+0x2c2>
 80010d8:	428a      	cmp	r2, r1
 80010da:	d902      	bls.n	80010e2 <__aeabi_ddiv+0x2c2>
 80010dc:	1e83      	subs	r3, r0, #2
 80010de:	4698      	mov	r8, r3
 80010e0:	1909      	adds	r1, r1, r4
 80010e2:	1a88      	subs	r0, r1, r2
 80010e4:	4649      	mov	r1, r9
 80010e6:	f7ff f8b1 	bl	800024c <__aeabi_uidivmod>
 80010ea:	0409      	lsls	r1, r1, #16
 80010ec:	468c      	mov	ip, r1
 80010ee:	0431      	lsls	r1, r6, #16
 80010f0:	4666      	mov	r6, ip
 80010f2:	9a01      	ldr	r2, [sp, #4]
 80010f4:	0c09      	lsrs	r1, r1, #16
 80010f6:	4342      	muls	r2, r0
 80010f8:	0003      	movs	r3, r0
 80010fa:	4331      	orrs	r1, r6
 80010fc:	428a      	cmp	r2, r1
 80010fe:	d904      	bls.n	800110a <__aeabi_ddiv+0x2ea>
 8001100:	1909      	adds	r1, r1, r4
 8001102:	3b01      	subs	r3, #1
 8001104:	428c      	cmp	r4, r1
 8001106:	d800      	bhi.n	800110a <__aeabi_ddiv+0x2ea>
 8001108:	e111      	b.n	800132e <__aeabi_ddiv+0x50e>
 800110a:	1a89      	subs	r1, r1, r2
 800110c:	4642      	mov	r2, r8
 800110e:	9e00      	ldr	r6, [sp, #0]
 8001110:	0412      	lsls	r2, r2, #16
 8001112:	431a      	orrs	r2, r3
 8001114:	0c33      	lsrs	r3, r6, #16
 8001116:	001f      	movs	r7, r3
 8001118:	0c10      	lsrs	r0, r2, #16
 800111a:	4690      	mov	r8, r2
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	0413      	lsls	r3, r2, #16
 8001120:	0432      	lsls	r2, r6, #16
 8001122:	0c16      	lsrs	r6, r2, #16
 8001124:	0032      	movs	r2, r6
 8001126:	0c1b      	lsrs	r3, r3, #16
 8001128:	435a      	muls	r2, r3
 800112a:	9603      	str	r6, [sp, #12]
 800112c:	437b      	muls	r3, r7
 800112e:	4346      	muls	r6, r0
 8001130:	4378      	muls	r0, r7
 8001132:	0c17      	lsrs	r7, r2, #16
 8001134:	46bc      	mov	ip, r7
 8001136:	199b      	adds	r3, r3, r6
 8001138:	4463      	add	r3, ip
 800113a:	429e      	cmp	r6, r3
 800113c:	d903      	bls.n	8001146 <__aeabi_ddiv+0x326>
 800113e:	2680      	movs	r6, #128	; 0x80
 8001140:	0276      	lsls	r6, r6, #9
 8001142:	46b4      	mov	ip, r6
 8001144:	4460      	add	r0, ip
 8001146:	0c1e      	lsrs	r6, r3, #16
 8001148:	1830      	adds	r0, r6, r0
 800114a:	0416      	lsls	r6, r2, #16
 800114c:	041b      	lsls	r3, r3, #16
 800114e:	0c36      	lsrs	r6, r6, #16
 8001150:	199e      	adds	r6, r3, r6
 8001152:	4281      	cmp	r1, r0
 8001154:	d200      	bcs.n	8001158 <__aeabi_ddiv+0x338>
 8001156:	e09c      	b.n	8001292 <__aeabi_ddiv+0x472>
 8001158:	d100      	bne.n	800115c <__aeabi_ddiv+0x33c>
 800115a:	e097      	b.n	800128c <__aeabi_ddiv+0x46c>
 800115c:	1bae      	subs	r6, r5, r6
 800115e:	1a09      	subs	r1, r1, r0
 8001160:	42b5      	cmp	r5, r6
 8001162:	4180      	sbcs	r0, r0
 8001164:	4240      	negs	r0, r0
 8001166:	1a08      	subs	r0, r1, r0
 8001168:	4284      	cmp	r4, r0
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x34e>
 800116c:	e111      	b.n	8001392 <__aeabi_ddiv+0x572>
 800116e:	4649      	mov	r1, r9
 8001170:	f7ff f86c 	bl	800024c <__aeabi_uidivmod>
 8001174:	9a01      	ldr	r2, [sp, #4]
 8001176:	040b      	lsls	r3, r1, #16
 8001178:	4342      	muls	r2, r0
 800117a:	0c31      	lsrs	r1, r6, #16
 800117c:	0005      	movs	r5, r0
 800117e:	4319      	orrs	r1, r3
 8001180:	428a      	cmp	r2, r1
 8001182:	d907      	bls.n	8001194 <__aeabi_ddiv+0x374>
 8001184:	1909      	adds	r1, r1, r4
 8001186:	3d01      	subs	r5, #1
 8001188:	428c      	cmp	r4, r1
 800118a:	d803      	bhi.n	8001194 <__aeabi_ddiv+0x374>
 800118c:	428a      	cmp	r2, r1
 800118e:	d901      	bls.n	8001194 <__aeabi_ddiv+0x374>
 8001190:	1e85      	subs	r5, r0, #2
 8001192:	1909      	adds	r1, r1, r4
 8001194:	1a88      	subs	r0, r1, r2
 8001196:	4649      	mov	r1, r9
 8001198:	f7ff f858 	bl	800024c <__aeabi_uidivmod>
 800119c:	0409      	lsls	r1, r1, #16
 800119e:	468c      	mov	ip, r1
 80011a0:	0431      	lsls	r1, r6, #16
 80011a2:	4666      	mov	r6, ip
 80011a4:	9a01      	ldr	r2, [sp, #4]
 80011a6:	0c09      	lsrs	r1, r1, #16
 80011a8:	4342      	muls	r2, r0
 80011aa:	0003      	movs	r3, r0
 80011ac:	4331      	orrs	r1, r6
 80011ae:	428a      	cmp	r2, r1
 80011b0:	d907      	bls.n	80011c2 <__aeabi_ddiv+0x3a2>
 80011b2:	1909      	adds	r1, r1, r4
 80011b4:	3b01      	subs	r3, #1
 80011b6:	428c      	cmp	r4, r1
 80011b8:	d803      	bhi.n	80011c2 <__aeabi_ddiv+0x3a2>
 80011ba:	428a      	cmp	r2, r1
 80011bc:	d901      	bls.n	80011c2 <__aeabi_ddiv+0x3a2>
 80011be:	1e83      	subs	r3, r0, #2
 80011c0:	1909      	adds	r1, r1, r4
 80011c2:	9e03      	ldr	r6, [sp, #12]
 80011c4:	1a89      	subs	r1, r1, r2
 80011c6:	0032      	movs	r2, r6
 80011c8:	042d      	lsls	r5, r5, #16
 80011ca:	431d      	orrs	r5, r3
 80011cc:	9f02      	ldr	r7, [sp, #8]
 80011ce:	042b      	lsls	r3, r5, #16
 80011d0:	0c1b      	lsrs	r3, r3, #16
 80011d2:	435a      	muls	r2, r3
 80011d4:	437b      	muls	r3, r7
 80011d6:	469c      	mov	ip, r3
 80011d8:	0c28      	lsrs	r0, r5, #16
 80011da:	4346      	muls	r6, r0
 80011dc:	0c13      	lsrs	r3, r2, #16
 80011de:	44b4      	add	ip, r6
 80011e0:	4463      	add	r3, ip
 80011e2:	4378      	muls	r0, r7
 80011e4:	429e      	cmp	r6, r3
 80011e6:	d903      	bls.n	80011f0 <__aeabi_ddiv+0x3d0>
 80011e8:	2680      	movs	r6, #128	; 0x80
 80011ea:	0276      	lsls	r6, r6, #9
 80011ec:	46b4      	mov	ip, r6
 80011ee:	4460      	add	r0, ip
 80011f0:	0c1e      	lsrs	r6, r3, #16
 80011f2:	0412      	lsls	r2, r2, #16
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	0c12      	lsrs	r2, r2, #16
 80011f8:	1830      	adds	r0, r6, r0
 80011fa:	189b      	adds	r3, r3, r2
 80011fc:	4281      	cmp	r1, r0
 80011fe:	d306      	bcc.n	800120e <__aeabi_ddiv+0x3ee>
 8001200:	d002      	beq.n	8001208 <__aeabi_ddiv+0x3e8>
 8001202:	2301      	movs	r3, #1
 8001204:	431d      	orrs	r5, r3
 8001206:	e6ce      	b.n	8000fa6 <__aeabi_ddiv+0x186>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0x3ee>
 800120c:	e6cb      	b.n	8000fa6 <__aeabi_ddiv+0x186>
 800120e:	1861      	adds	r1, r4, r1
 8001210:	1e6e      	subs	r6, r5, #1
 8001212:	42a1      	cmp	r1, r4
 8001214:	d200      	bcs.n	8001218 <__aeabi_ddiv+0x3f8>
 8001216:	e0a4      	b.n	8001362 <__aeabi_ddiv+0x542>
 8001218:	4281      	cmp	r1, r0
 800121a:	d200      	bcs.n	800121e <__aeabi_ddiv+0x3fe>
 800121c:	e0c9      	b.n	80013b2 <__aeabi_ddiv+0x592>
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0x402>
 8001220:	e0d9      	b.n	80013d6 <__aeabi_ddiv+0x5b6>
 8001222:	0035      	movs	r5, r6
 8001224:	e7ed      	b.n	8001202 <__aeabi_ddiv+0x3e2>
 8001226:	2501      	movs	r5, #1
 8001228:	426d      	negs	r5, r5
 800122a:	2101      	movs	r1, #1
 800122c:	1a89      	subs	r1, r1, r2
 800122e:	2938      	cmp	r1, #56	; 0x38
 8001230:	dd00      	ble.n	8001234 <__aeabi_ddiv+0x414>
 8001232:	e64c      	b.n	8000ece <__aeabi_ddiv+0xae>
 8001234:	291f      	cmp	r1, #31
 8001236:	dc00      	bgt.n	800123a <__aeabi_ddiv+0x41a>
 8001238:	e07f      	b.n	800133a <__aeabi_ddiv+0x51a>
 800123a:	231f      	movs	r3, #31
 800123c:	425b      	negs	r3, r3
 800123e:	1a9a      	subs	r2, r3, r2
 8001240:	4643      	mov	r3, r8
 8001242:	40d3      	lsrs	r3, r2
 8001244:	2920      	cmp	r1, #32
 8001246:	d004      	beq.n	8001252 <__aeabi_ddiv+0x432>
 8001248:	4644      	mov	r4, r8
 800124a:	4a65      	ldr	r2, [pc, #404]	; (80013e0 <__aeabi_ddiv+0x5c0>)
 800124c:	445a      	add	r2, fp
 800124e:	4094      	lsls	r4, r2
 8001250:	4325      	orrs	r5, r4
 8001252:	1e6a      	subs	r2, r5, #1
 8001254:	4195      	sbcs	r5, r2
 8001256:	2207      	movs	r2, #7
 8001258:	432b      	orrs	r3, r5
 800125a:	0015      	movs	r5, r2
 800125c:	2400      	movs	r4, #0
 800125e:	401d      	ands	r5, r3
 8001260:	421a      	tst	r2, r3
 8001262:	d100      	bne.n	8001266 <__aeabi_ddiv+0x446>
 8001264:	e0a1      	b.n	80013aa <__aeabi_ddiv+0x58a>
 8001266:	220f      	movs	r2, #15
 8001268:	2400      	movs	r4, #0
 800126a:	401a      	ands	r2, r3
 800126c:	2a04      	cmp	r2, #4
 800126e:	d100      	bne.n	8001272 <__aeabi_ddiv+0x452>
 8001270:	e098      	b.n	80013a4 <__aeabi_ddiv+0x584>
 8001272:	1d1a      	adds	r2, r3, #4
 8001274:	429a      	cmp	r2, r3
 8001276:	419b      	sbcs	r3, r3
 8001278:	425b      	negs	r3, r3
 800127a:	18e4      	adds	r4, r4, r3
 800127c:	0013      	movs	r3, r2
 800127e:	0222      	lsls	r2, r4, #8
 8001280:	d400      	bmi.n	8001284 <__aeabi_ddiv+0x464>
 8001282:	e08f      	b.n	80013a4 <__aeabi_ddiv+0x584>
 8001284:	2301      	movs	r3, #1
 8001286:	2400      	movs	r4, #0
 8001288:	2500      	movs	r5, #0
 800128a:	e623      	b.n	8000ed4 <__aeabi_ddiv+0xb4>
 800128c:	42b5      	cmp	r5, r6
 800128e:	d300      	bcc.n	8001292 <__aeabi_ddiv+0x472>
 8001290:	e764      	b.n	800115c <__aeabi_ddiv+0x33c>
 8001292:	4643      	mov	r3, r8
 8001294:	1e5a      	subs	r2, r3, #1
 8001296:	9b00      	ldr	r3, [sp, #0]
 8001298:	469c      	mov	ip, r3
 800129a:	4465      	add	r5, ip
 800129c:	001f      	movs	r7, r3
 800129e:	429d      	cmp	r5, r3
 80012a0:	419b      	sbcs	r3, r3
 80012a2:	425b      	negs	r3, r3
 80012a4:	191b      	adds	r3, r3, r4
 80012a6:	18c9      	adds	r1, r1, r3
 80012a8:	428c      	cmp	r4, r1
 80012aa:	d23a      	bcs.n	8001322 <__aeabi_ddiv+0x502>
 80012ac:	4288      	cmp	r0, r1
 80012ae:	d863      	bhi.n	8001378 <__aeabi_ddiv+0x558>
 80012b0:	d060      	beq.n	8001374 <__aeabi_ddiv+0x554>
 80012b2:	4690      	mov	r8, r2
 80012b4:	e752      	b.n	800115c <__aeabi_ddiv+0x33c>
 80012b6:	42aa      	cmp	r2, r5
 80012b8:	d900      	bls.n	80012bc <__aeabi_ddiv+0x49c>
 80012ba:	e6ea      	b.n	8001092 <__aeabi_ddiv+0x272>
 80012bc:	4643      	mov	r3, r8
 80012be:	07de      	lsls	r6, r3, #31
 80012c0:	0858      	lsrs	r0, r3, #1
 80012c2:	086b      	lsrs	r3, r5, #1
 80012c4:	431e      	orrs	r6, r3
 80012c6:	07ed      	lsls	r5, r5, #31
 80012c8:	e6ea      	b.n	80010a0 <__aeabi_ddiv+0x280>
 80012ca:	4648      	mov	r0, r9
 80012cc:	f001 f89e 	bl	800240c <__clzsi2>
 80012d0:	0001      	movs	r1, r0
 80012d2:	0002      	movs	r2, r0
 80012d4:	3115      	adds	r1, #21
 80012d6:	3220      	adds	r2, #32
 80012d8:	291c      	cmp	r1, #28
 80012da:	dc00      	bgt.n	80012de <__aeabi_ddiv+0x4be>
 80012dc:	e61a      	b.n	8000f14 <__aeabi_ddiv+0xf4>
 80012de:	464b      	mov	r3, r9
 80012e0:	3808      	subs	r0, #8
 80012e2:	4083      	lsls	r3, r0
 80012e4:	2500      	movs	r5, #0
 80012e6:	4698      	mov	r8, r3
 80012e8:	e620      	b.n	8000f2c <__aeabi_ddiv+0x10c>
 80012ea:	f001 f88f 	bl	800240c <__clzsi2>
 80012ee:	0003      	movs	r3, r0
 80012f0:	001a      	movs	r2, r3
 80012f2:	3215      	adds	r2, #21
 80012f4:	3020      	adds	r0, #32
 80012f6:	2a1c      	cmp	r2, #28
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_ddiv+0x4dc>
 80012fa:	e630      	b.n	8000f5e <__aeabi_ddiv+0x13e>
 80012fc:	4654      	mov	r4, sl
 80012fe:	3b08      	subs	r3, #8
 8001300:	2200      	movs	r2, #0
 8001302:	409c      	lsls	r4, r3
 8001304:	e635      	b.n	8000f72 <__aeabi_ddiv+0x152>
 8001306:	230f      	movs	r3, #15
 8001308:	402b      	ands	r3, r5
 800130a:	2b04      	cmp	r3, #4
 800130c:	d100      	bne.n	8001310 <__aeabi_ddiv+0x4f0>
 800130e:	e652      	b.n	8000fb6 <__aeabi_ddiv+0x196>
 8001310:	2305      	movs	r3, #5
 8001312:	425b      	negs	r3, r3
 8001314:	42ab      	cmp	r3, r5
 8001316:	419b      	sbcs	r3, r3
 8001318:	3504      	adds	r5, #4
 800131a:	425b      	negs	r3, r3
 800131c:	08ed      	lsrs	r5, r5, #3
 800131e:	4498      	add	r8, r3
 8001320:	e64a      	b.n	8000fb8 <__aeabi_ddiv+0x198>
 8001322:	428c      	cmp	r4, r1
 8001324:	d1c5      	bne.n	80012b2 <__aeabi_ddiv+0x492>
 8001326:	42af      	cmp	r7, r5
 8001328:	d9c0      	bls.n	80012ac <__aeabi_ddiv+0x48c>
 800132a:	4690      	mov	r8, r2
 800132c:	e716      	b.n	800115c <__aeabi_ddiv+0x33c>
 800132e:	428a      	cmp	r2, r1
 8001330:	d800      	bhi.n	8001334 <__aeabi_ddiv+0x514>
 8001332:	e6ea      	b.n	800110a <__aeabi_ddiv+0x2ea>
 8001334:	1e83      	subs	r3, r0, #2
 8001336:	1909      	adds	r1, r1, r4
 8001338:	e6e7      	b.n	800110a <__aeabi_ddiv+0x2ea>
 800133a:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <__aeabi_ddiv+0x5c4>)
 800133c:	0028      	movs	r0, r5
 800133e:	445a      	add	r2, fp
 8001340:	4643      	mov	r3, r8
 8001342:	4095      	lsls	r5, r2
 8001344:	4093      	lsls	r3, r2
 8001346:	40c8      	lsrs	r0, r1
 8001348:	1e6a      	subs	r2, r5, #1
 800134a:	4195      	sbcs	r5, r2
 800134c:	4644      	mov	r4, r8
 800134e:	4303      	orrs	r3, r0
 8001350:	432b      	orrs	r3, r5
 8001352:	40cc      	lsrs	r4, r1
 8001354:	075a      	lsls	r2, r3, #29
 8001356:	d092      	beq.n	800127e <__aeabi_ddiv+0x45e>
 8001358:	220f      	movs	r2, #15
 800135a:	401a      	ands	r2, r3
 800135c:	2a04      	cmp	r2, #4
 800135e:	d188      	bne.n	8001272 <__aeabi_ddiv+0x452>
 8001360:	e78d      	b.n	800127e <__aeabi_ddiv+0x45e>
 8001362:	0035      	movs	r5, r6
 8001364:	4281      	cmp	r1, r0
 8001366:	d000      	beq.n	800136a <__aeabi_ddiv+0x54a>
 8001368:	e74b      	b.n	8001202 <__aeabi_ddiv+0x3e2>
 800136a:	9a00      	ldr	r2, [sp, #0]
 800136c:	4293      	cmp	r3, r2
 800136e:	d000      	beq.n	8001372 <__aeabi_ddiv+0x552>
 8001370:	e747      	b.n	8001202 <__aeabi_ddiv+0x3e2>
 8001372:	e618      	b.n	8000fa6 <__aeabi_ddiv+0x186>
 8001374:	42ae      	cmp	r6, r5
 8001376:	d99c      	bls.n	80012b2 <__aeabi_ddiv+0x492>
 8001378:	2302      	movs	r3, #2
 800137a:	425b      	negs	r3, r3
 800137c:	469c      	mov	ip, r3
 800137e:	9b00      	ldr	r3, [sp, #0]
 8001380:	44e0      	add	r8, ip
 8001382:	469c      	mov	ip, r3
 8001384:	4465      	add	r5, ip
 8001386:	429d      	cmp	r5, r3
 8001388:	419b      	sbcs	r3, r3
 800138a:	425b      	negs	r3, r3
 800138c:	191b      	adds	r3, r3, r4
 800138e:	18c9      	adds	r1, r1, r3
 8001390:	e6e4      	b.n	800115c <__aeabi_ddiv+0x33c>
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <__aeabi_ddiv+0x5c8>)
 8001394:	445a      	add	r2, fp
 8001396:	2a00      	cmp	r2, #0
 8001398:	dc00      	bgt.n	800139c <__aeabi_ddiv+0x57c>
 800139a:	e744      	b.n	8001226 <__aeabi_ddiv+0x406>
 800139c:	2301      	movs	r3, #1
 800139e:	2500      	movs	r5, #0
 80013a0:	4498      	add	r8, r3
 80013a2:	e609      	b.n	8000fb8 <__aeabi_ddiv+0x198>
 80013a4:	0765      	lsls	r5, r4, #29
 80013a6:	0264      	lsls	r4, r4, #9
 80013a8:	0b24      	lsrs	r4, r4, #12
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	431d      	orrs	r5, r3
 80013ae:	2300      	movs	r3, #0
 80013b0:	e590      	b.n	8000ed4 <__aeabi_ddiv+0xb4>
 80013b2:	9e00      	ldr	r6, [sp, #0]
 80013b4:	3d02      	subs	r5, #2
 80013b6:	0072      	lsls	r2, r6, #1
 80013b8:	42b2      	cmp	r2, r6
 80013ba:	41bf      	sbcs	r7, r7
 80013bc:	427f      	negs	r7, r7
 80013be:	193c      	adds	r4, r7, r4
 80013c0:	1909      	adds	r1, r1, r4
 80013c2:	9200      	str	r2, [sp, #0]
 80013c4:	e7ce      	b.n	8001364 <__aeabi_ddiv+0x544>
 80013c6:	2480      	movs	r4, #128	; 0x80
 80013c8:	4643      	mov	r3, r8
 80013ca:	0324      	lsls	r4, r4, #12
 80013cc:	431c      	orrs	r4, r3
 80013ce:	0324      	lsls	r4, r4, #12
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <__aeabi_ddiv+0x5cc>)
 80013d2:	0b24      	lsrs	r4, r4, #12
 80013d4:	e57e      	b.n	8000ed4 <__aeabi_ddiv+0xb4>
 80013d6:	9a00      	ldr	r2, [sp, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d3ea      	bcc.n	80013b2 <__aeabi_ddiv+0x592>
 80013dc:	0035      	movs	r5, r6
 80013de:	e7c4      	b.n	800136a <__aeabi_ddiv+0x54a>
 80013e0:	0000043e 	.word	0x0000043e
 80013e4:	0000041e 	.word	0x0000041e
 80013e8:	000003ff 	.word	0x000003ff
 80013ec:	000007ff 	.word	0x000007ff

080013f0 <__eqdf2>:
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	464f      	mov	r7, r9
 80013f4:	4646      	mov	r6, r8
 80013f6:	46d6      	mov	lr, sl
 80013f8:	4694      	mov	ip, r2
 80013fa:	4691      	mov	r9, r2
 80013fc:	031a      	lsls	r2, r3, #12
 80013fe:	0b12      	lsrs	r2, r2, #12
 8001400:	4d18      	ldr	r5, [pc, #96]	; (8001464 <__eqdf2+0x74>)
 8001402:	b5c0      	push	{r6, r7, lr}
 8001404:	004c      	lsls	r4, r1, #1
 8001406:	030f      	lsls	r7, r1, #12
 8001408:	4692      	mov	sl, r2
 800140a:	005a      	lsls	r2, r3, #1
 800140c:	0006      	movs	r6, r0
 800140e:	4680      	mov	r8, r0
 8001410:	0b3f      	lsrs	r7, r7, #12
 8001412:	2001      	movs	r0, #1
 8001414:	0d64      	lsrs	r4, r4, #21
 8001416:	0fc9      	lsrs	r1, r1, #31
 8001418:	0d52      	lsrs	r2, r2, #21
 800141a:	0fdb      	lsrs	r3, r3, #31
 800141c:	42ac      	cmp	r4, r5
 800141e:	d00a      	beq.n	8001436 <__eqdf2+0x46>
 8001420:	42aa      	cmp	r2, r5
 8001422:	d003      	beq.n	800142c <__eqdf2+0x3c>
 8001424:	4294      	cmp	r4, r2
 8001426:	d101      	bne.n	800142c <__eqdf2+0x3c>
 8001428:	4557      	cmp	r7, sl
 800142a:	d00d      	beq.n	8001448 <__eqdf2+0x58>
 800142c:	bce0      	pop	{r5, r6, r7}
 800142e:	46ba      	mov	sl, r7
 8001430:	46b1      	mov	r9, r6
 8001432:	46a8      	mov	r8, r5
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001436:	003d      	movs	r5, r7
 8001438:	4335      	orrs	r5, r6
 800143a:	d1f7      	bne.n	800142c <__eqdf2+0x3c>
 800143c:	42a2      	cmp	r2, r4
 800143e:	d1f5      	bne.n	800142c <__eqdf2+0x3c>
 8001440:	4652      	mov	r2, sl
 8001442:	4665      	mov	r5, ip
 8001444:	432a      	orrs	r2, r5
 8001446:	d1f1      	bne.n	800142c <__eqdf2+0x3c>
 8001448:	2001      	movs	r0, #1
 800144a:	45c8      	cmp	r8, r9
 800144c:	d1ee      	bne.n	800142c <__eqdf2+0x3c>
 800144e:	4299      	cmp	r1, r3
 8001450:	d006      	beq.n	8001460 <__eqdf2+0x70>
 8001452:	2c00      	cmp	r4, #0
 8001454:	d1ea      	bne.n	800142c <__eqdf2+0x3c>
 8001456:	433e      	orrs	r6, r7
 8001458:	0030      	movs	r0, r6
 800145a:	1e46      	subs	r6, r0, #1
 800145c:	41b0      	sbcs	r0, r6
 800145e:	e7e5      	b.n	800142c <__eqdf2+0x3c>
 8001460:	2000      	movs	r0, #0
 8001462:	e7e3      	b.n	800142c <__eqdf2+0x3c>
 8001464:	000007ff 	.word	0x000007ff

08001468 <__gedf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	464e      	mov	r6, r9
 800146c:	4645      	mov	r5, r8
 800146e:	4657      	mov	r7, sl
 8001470:	46de      	mov	lr, fp
 8001472:	0004      	movs	r4, r0
 8001474:	0018      	movs	r0, r3
 8001476:	b5e0      	push	{r5, r6, r7, lr}
 8001478:	0016      	movs	r6, r2
 800147a:	031b      	lsls	r3, r3, #12
 800147c:	0b1b      	lsrs	r3, r3, #12
 800147e:	4d32      	ldr	r5, [pc, #200]	; (8001548 <__gedf2+0xe0>)
 8001480:	030f      	lsls	r7, r1, #12
 8001482:	004a      	lsls	r2, r1, #1
 8001484:	4699      	mov	r9, r3
 8001486:	0043      	lsls	r3, r0, #1
 8001488:	46a4      	mov	ip, r4
 800148a:	46b0      	mov	r8, r6
 800148c:	0b3f      	lsrs	r7, r7, #12
 800148e:	0d52      	lsrs	r2, r2, #21
 8001490:	0fc9      	lsrs	r1, r1, #31
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fc0      	lsrs	r0, r0, #31
 8001496:	42aa      	cmp	r2, r5
 8001498:	d029      	beq.n	80014ee <__gedf2+0x86>
 800149a:	42ab      	cmp	r3, r5
 800149c:	d018      	beq.n	80014d0 <__gedf2+0x68>
 800149e:	2a00      	cmp	r2, #0
 80014a0:	d12a      	bne.n	80014f8 <__gedf2+0x90>
 80014a2:	433c      	orrs	r4, r7
 80014a4:	46a3      	mov	fp, r4
 80014a6:	4265      	negs	r5, r4
 80014a8:	4165      	adcs	r5, r4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <__gedf2+0x4c>
 80014ae:	464c      	mov	r4, r9
 80014b0:	4326      	orrs	r6, r4
 80014b2:	d027      	beq.n	8001504 <__gedf2+0x9c>
 80014b4:	2d00      	cmp	r5, #0
 80014b6:	d115      	bne.n	80014e4 <__gedf2+0x7c>
 80014b8:	4281      	cmp	r1, r0
 80014ba:	d028      	beq.n	800150e <__gedf2+0xa6>
 80014bc:	2002      	movs	r0, #2
 80014be:	3901      	subs	r1, #1
 80014c0:	4008      	ands	r0, r1
 80014c2:	3801      	subs	r0, #1
 80014c4:	bcf0      	pop	{r4, r5, r6, r7}
 80014c6:	46bb      	mov	fp, r7
 80014c8:	46b2      	mov	sl, r6
 80014ca:	46a9      	mov	r9, r5
 80014cc:	46a0      	mov	r8, r4
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d0:	464d      	mov	r5, r9
 80014d2:	432e      	orrs	r6, r5
 80014d4:	d12f      	bne.n	8001536 <__gedf2+0xce>
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	d1ee      	bne.n	80014b8 <__gedf2+0x50>
 80014da:	433c      	orrs	r4, r7
 80014dc:	4265      	negs	r5, r4
 80014de:	4165      	adcs	r5, r4
 80014e0:	2d00      	cmp	r5, #0
 80014e2:	d0e9      	beq.n	80014b8 <__gedf2+0x50>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1ed      	bne.n	80014c4 <__gedf2+0x5c>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7ea      	b.n	80014c4 <__gedf2+0x5c>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d120      	bne.n	8001536 <__gedf2+0xce>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d0eb      	beq.n	80014d0 <__gedf2+0x68>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1dd      	bne.n	80014b8 <__gedf2+0x50>
 80014fc:	464c      	mov	r4, r9
 80014fe:	4326      	orrs	r6, r4
 8001500:	d1da      	bne.n	80014b8 <__gedf2+0x50>
 8001502:	e7db      	b.n	80014bc <__gedf2+0x54>
 8001504:	465b      	mov	r3, fp
 8001506:	2000      	movs	r0, #0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0db      	beq.n	80014c4 <__gedf2+0x5c>
 800150c:	e7d6      	b.n	80014bc <__gedf2+0x54>
 800150e:	429a      	cmp	r2, r3
 8001510:	dc0a      	bgt.n	8001528 <__gedf2+0xc0>
 8001512:	dbe7      	blt.n	80014e4 <__gedf2+0x7c>
 8001514:	454f      	cmp	r7, r9
 8001516:	d8d1      	bhi.n	80014bc <__gedf2+0x54>
 8001518:	d010      	beq.n	800153c <__gedf2+0xd4>
 800151a:	2000      	movs	r0, #0
 800151c:	454f      	cmp	r7, r9
 800151e:	d2d1      	bcs.n	80014c4 <__gedf2+0x5c>
 8001520:	2900      	cmp	r1, #0
 8001522:	d0e1      	beq.n	80014e8 <__gedf2+0x80>
 8001524:	0008      	movs	r0, r1
 8001526:	e7cd      	b.n	80014c4 <__gedf2+0x5c>
 8001528:	4243      	negs	r3, r0
 800152a:	4158      	adcs	r0, r3
 800152c:	2302      	movs	r3, #2
 800152e:	4240      	negs	r0, r0
 8001530:	4018      	ands	r0, r3
 8001532:	3801      	subs	r0, #1
 8001534:	e7c6      	b.n	80014c4 <__gedf2+0x5c>
 8001536:	2002      	movs	r0, #2
 8001538:	4240      	negs	r0, r0
 800153a:	e7c3      	b.n	80014c4 <__gedf2+0x5c>
 800153c:	45c4      	cmp	ip, r8
 800153e:	d8bd      	bhi.n	80014bc <__gedf2+0x54>
 8001540:	2000      	movs	r0, #0
 8001542:	45c4      	cmp	ip, r8
 8001544:	d2be      	bcs.n	80014c4 <__gedf2+0x5c>
 8001546:	e7eb      	b.n	8001520 <__gedf2+0xb8>
 8001548:	000007ff 	.word	0x000007ff

0800154c <__ledf2>:
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	464e      	mov	r6, r9
 8001550:	4645      	mov	r5, r8
 8001552:	4657      	mov	r7, sl
 8001554:	46de      	mov	lr, fp
 8001556:	0004      	movs	r4, r0
 8001558:	0018      	movs	r0, r3
 800155a:	b5e0      	push	{r5, r6, r7, lr}
 800155c:	0016      	movs	r6, r2
 800155e:	031b      	lsls	r3, r3, #12
 8001560:	0b1b      	lsrs	r3, r3, #12
 8001562:	4d31      	ldr	r5, [pc, #196]	; (8001628 <__ledf2+0xdc>)
 8001564:	030f      	lsls	r7, r1, #12
 8001566:	004a      	lsls	r2, r1, #1
 8001568:	4699      	mov	r9, r3
 800156a:	0043      	lsls	r3, r0, #1
 800156c:	46a4      	mov	ip, r4
 800156e:	46b0      	mov	r8, r6
 8001570:	0b3f      	lsrs	r7, r7, #12
 8001572:	0d52      	lsrs	r2, r2, #21
 8001574:	0fc9      	lsrs	r1, r1, #31
 8001576:	0d5b      	lsrs	r3, r3, #21
 8001578:	0fc0      	lsrs	r0, r0, #31
 800157a:	42aa      	cmp	r2, r5
 800157c:	d011      	beq.n	80015a2 <__ledf2+0x56>
 800157e:	42ab      	cmp	r3, r5
 8001580:	d014      	beq.n	80015ac <__ledf2+0x60>
 8001582:	2a00      	cmp	r2, #0
 8001584:	d12f      	bne.n	80015e6 <__ledf2+0x9a>
 8001586:	433c      	orrs	r4, r7
 8001588:	46a3      	mov	fp, r4
 800158a:	4265      	negs	r5, r4
 800158c:	4165      	adcs	r5, r4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d114      	bne.n	80015bc <__ledf2+0x70>
 8001592:	464c      	mov	r4, r9
 8001594:	4326      	orrs	r6, r4
 8001596:	d111      	bne.n	80015bc <__ledf2+0x70>
 8001598:	465b      	mov	r3, fp
 800159a:	2000      	movs	r0, #0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d017      	beq.n	80015d0 <__ledf2+0x84>
 80015a0:	e010      	b.n	80015c4 <__ledf2+0x78>
 80015a2:	003d      	movs	r5, r7
 80015a4:	4325      	orrs	r5, r4
 80015a6:	d112      	bne.n	80015ce <__ledf2+0x82>
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d11c      	bne.n	80015e6 <__ledf2+0x9a>
 80015ac:	464d      	mov	r5, r9
 80015ae:	432e      	orrs	r6, r5
 80015b0:	d10d      	bne.n	80015ce <__ledf2+0x82>
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	d104      	bne.n	80015c0 <__ledf2+0x74>
 80015b6:	433c      	orrs	r4, r7
 80015b8:	4265      	negs	r5, r4
 80015ba:	4165      	adcs	r5, r4
 80015bc:	2d00      	cmp	r5, #0
 80015be:	d10d      	bne.n	80015dc <__ledf2+0x90>
 80015c0:	4281      	cmp	r1, r0
 80015c2:	d016      	beq.n	80015f2 <__ledf2+0xa6>
 80015c4:	2002      	movs	r0, #2
 80015c6:	3901      	subs	r1, #1
 80015c8:	4008      	ands	r0, r1
 80015ca:	3801      	subs	r0, #1
 80015cc:	e000      	b.n	80015d0 <__ledf2+0x84>
 80015ce:	2002      	movs	r0, #2
 80015d0:	bcf0      	pop	{r4, r5, r6, r7}
 80015d2:	46bb      	mov	fp, r7
 80015d4:	46b2      	mov	sl, r6
 80015d6:	46a9      	mov	r9, r5
 80015d8:	46a0      	mov	r8, r4
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2800      	cmp	r0, #0
 80015de:	d1f7      	bne.n	80015d0 <__ledf2+0x84>
 80015e0:	2001      	movs	r0, #1
 80015e2:	4240      	negs	r0, r0
 80015e4:	e7f4      	b.n	80015d0 <__ledf2+0x84>
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ea      	bne.n	80015c0 <__ledf2+0x74>
 80015ea:	464c      	mov	r4, r9
 80015ec:	4326      	orrs	r6, r4
 80015ee:	d1e7      	bne.n	80015c0 <__ledf2+0x74>
 80015f0:	e7e8      	b.n	80015c4 <__ledf2+0x78>
 80015f2:	429a      	cmp	r2, r3
 80015f4:	dd06      	ble.n	8001604 <__ledf2+0xb8>
 80015f6:	4243      	negs	r3, r0
 80015f8:	4158      	adcs	r0, r3
 80015fa:	2302      	movs	r3, #2
 80015fc:	4240      	negs	r0, r0
 80015fe:	4018      	ands	r0, r3
 8001600:	3801      	subs	r0, #1
 8001602:	e7e5      	b.n	80015d0 <__ledf2+0x84>
 8001604:	429a      	cmp	r2, r3
 8001606:	dbe9      	blt.n	80015dc <__ledf2+0x90>
 8001608:	454f      	cmp	r7, r9
 800160a:	d8db      	bhi.n	80015c4 <__ledf2+0x78>
 800160c:	d006      	beq.n	800161c <__ledf2+0xd0>
 800160e:	2000      	movs	r0, #0
 8001610:	454f      	cmp	r7, r9
 8001612:	d2dd      	bcs.n	80015d0 <__ledf2+0x84>
 8001614:	2900      	cmp	r1, #0
 8001616:	d0e3      	beq.n	80015e0 <__ledf2+0x94>
 8001618:	0008      	movs	r0, r1
 800161a:	e7d9      	b.n	80015d0 <__ledf2+0x84>
 800161c:	45c4      	cmp	ip, r8
 800161e:	d8d1      	bhi.n	80015c4 <__ledf2+0x78>
 8001620:	2000      	movs	r0, #0
 8001622:	45c4      	cmp	ip, r8
 8001624:	d2d4      	bcs.n	80015d0 <__ledf2+0x84>
 8001626:	e7f5      	b.n	8001614 <__ledf2+0xc8>
 8001628:	000007ff 	.word	0x000007ff

0800162c <__aeabi_dmul>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	4657      	mov	r7, sl
 8001630:	464e      	mov	r6, r9
 8001632:	4645      	mov	r5, r8
 8001634:	46de      	mov	lr, fp
 8001636:	b5e0      	push	{r5, r6, r7, lr}
 8001638:	4698      	mov	r8, r3
 800163a:	030c      	lsls	r4, r1, #12
 800163c:	004b      	lsls	r3, r1, #1
 800163e:	0006      	movs	r6, r0
 8001640:	4692      	mov	sl, r2
 8001642:	b087      	sub	sp, #28
 8001644:	0b24      	lsrs	r4, r4, #12
 8001646:	0d5b      	lsrs	r3, r3, #21
 8001648:	0fcf      	lsrs	r7, r1, #31
 800164a:	2b00      	cmp	r3, #0
 800164c:	d06c      	beq.n	8001728 <__aeabi_dmul+0xfc>
 800164e:	4add      	ldr	r2, [pc, #884]	; (80019c4 <__aeabi_dmul+0x398>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d100      	bne.n	8001656 <__aeabi_dmul+0x2a>
 8001654:	e086      	b.n	8001764 <__aeabi_dmul+0x138>
 8001656:	0f42      	lsrs	r2, r0, #29
 8001658:	00e4      	lsls	r4, r4, #3
 800165a:	4314      	orrs	r4, r2
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	0412      	lsls	r2, r2, #16
 8001660:	4314      	orrs	r4, r2
 8001662:	4ad9      	ldr	r2, [pc, #868]	; (80019c8 <__aeabi_dmul+0x39c>)
 8001664:	00c5      	lsls	r5, r0, #3
 8001666:	4694      	mov	ip, r2
 8001668:	4463      	add	r3, ip
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	4699      	mov	r9, r3
 8001670:	469b      	mov	fp, r3
 8001672:	4643      	mov	r3, r8
 8001674:	4642      	mov	r2, r8
 8001676:	031e      	lsls	r6, r3, #12
 8001678:	0fd2      	lsrs	r2, r2, #31
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4650      	mov	r0, sl
 800167e:	4690      	mov	r8, r2
 8001680:	0b36      	lsrs	r6, r6, #12
 8001682:	0d5b      	lsrs	r3, r3, #21
 8001684:	d100      	bne.n	8001688 <__aeabi_dmul+0x5c>
 8001686:	e078      	b.n	800177a <__aeabi_dmul+0x14e>
 8001688:	4ace      	ldr	r2, [pc, #824]	; (80019c4 <__aeabi_dmul+0x398>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01d      	beq.n	80016ca <__aeabi_dmul+0x9e>
 800168e:	49ce      	ldr	r1, [pc, #824]	; (80019c8 <__aeabi_dmul+0x39c>)
 8001690:	0f42      	lsrs	r2, r0, #29
 8001692:	468c      	mov	ip, r1
 8001694:	9900      	ldr	r1, [sp, #0]
 8001696:	4463      	add	r3, ip
 8001698:	00f6      	lsls	r6, r6, #3
 800169a:	468c      	mov	ip, r1
 800169c:	4316      	orrs	r6, r2
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	449c      	add	ip, r3
 80016a2:	0412      	lsls	r2, r2, #16
 80016a4:	4663      	mov	r3, ip
 80016a6:	4316      	orrs	r6, r2
 80016a8:	00c2      	lsls	r2, r0, #3
 80016aa:	2000      	movs	r0, #0
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	9900      	ldr	r1, [sp, #0]
 80016b0:	4643      	mov	r3, r8
 80016b2:	3101      	adds	r1, #1
 80016b4:	468c      	mov	ip, r1
 80016b6:	4649      	mov	r1, r9
 80016b8:	407b      	eors	r3, r7
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	290f      	cmp	r1, #15
 80016be:	d900      	bls.n	80016c2 <__aeabi_dmul+0x96>
 80016c0:	e07e      	b.n	80017c0 <__aeabi_dmul+0x194>
 80016c2:	4bc2      	ldr	r3, [pc, #776]	; (80019cc <__aeabi_dmul+0x3a0>)
 80016c4:	0089      	lsls	r1, r1, #2
 80016c6:	5859      	ldr	r1, [r3, r1]
 80016c8:	468f      	mov	pc, r1
 80016ca:	4652      	mov	r2, sl
 80016cc:	9b00      	ldr	r3, [sp, #0]
 80016ce:	4332      	orrs	r2, r6
 80016d0:	d000      	beq.n	80016d4 <__aeabi_dmul+0xa8>
 80016d2:	e156      	b.n	8001982 <__aeabi_dmul+0x356>
 80016d4:	49bb      	ldr	r1, [pc, #748]	; (80019c4 <__aeabi_dmul+0x398>)
 80016d6:	2600      	movs	r6, #0
 80016d8:	468c      	mov	ip, r1
 80016da:	4463      	add	r3, ip
 80016dc:	4649      	mov	r1, r9
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2302      	movs	r3, #2
 80016e2:	4319      	orrs	r1, r3
 80016e4:	4689      	mov	r9, r1
 80016e6:	2002      	movs	r0, #2
 80016e8:	e7e1      	b.n	80016ae <__aeabi_dmul+0x82>
 80016ea:	4643      	mov	r3, r8
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	0034      	movs	r4, r6
 80016f0:	0015      	movs	r5, r2
 80016f2:	4683      	mov	fp, r0
 80016f4:	465b      	mov	r3, fp
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d05e      	beq.n	80017b8 <__aeabi_dmul+0x18c>
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d100      	bne.n	8001700 <__aeabi_dmul+0xd4>
 80016fe:	e1f3      	b.n	8001ae8 <__aeabi_dmul+0x4bc>
 8001700:	2b01      	cmp	r3, #1
 8001702:	d000      	beq.n	8001706 <__aeabi_dmul+0xda>
 8001704:	e118      	b.n	8001938 <__aeabi_dmul+0x30c>
 8001706:	2200      	movs	r2, #0
 8001708:	2400      	movs	r4, #0
 800170a:	2500      	movs	r5, #0
 800170c:	9b01      	ldr	r3, [sp, #4]
 800170e:	0512      	lsls	r2, r2, #20
 8001710:	4322      	orrs	r2, r4
 8001712:	07db      	lsls	r3, r3, #31
 8001714:	431a      	orrs	r2, r3
 8001716:	0028      	movs	r0, r5
 8001718:	0011      	movs	r1, r2
 800171a:	b007      	add	sp, #28
 800171c:	bcf0      	pop	{r4, r5, r6, r7}
 800171e:	46bb      	mov	fp, r7
 8001720:	46b2      	mov	sl, r6
 8001722:	46a9      	mov	r9, r5
 8001724:	46a0      	mov	r8, r4
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001728:	0025      	movs	r5, r4
 800172a:	4305      	orrs	r5, r0
 800172c:	d100      	bne.n	8001730 <__aeabi_dmul+0x104>
 800172e:	e141      	b.n	80019b4 <__aeabi_dmul+0x388>
 8001730:	2c00      	cmp	r4, #0
 8001732:	d100      	bne.n	8001736 <__aeabi_dmul+0x10a>
 8001734:	e1ad      	b.n	8001a92 <__aeabi_dmul+0x466>
 8001736:	0020      	movs	r0, r4
 8001738:	f000 fe68 	bl	800240c <__clzsi2>
 800173c:	0001      	movs	r1, r0
 800173e:	0002      	movs	r2, r0
 8001740:	390b      	subs	r1, #11
 8001742:	231d      	movs	r3, #29
 8001744:	0010      	movs	r0, r2
 8001746:	1a5b      	subs	r3, r3, r1
 8001748:	0031      	movs	r1, r6
 800174a:	0035      	movs	r5, r6
 800174c:	3808      	subs	r0, #8
 800174e:	4084      	lsls	r4, r0
 8001750:	40d9      	lsrs	r1, r3
 8001752:	4085      	lsls	r5, r0
 8001754:	430c      	orrs	r4, r1
 8001756:	489e      	ldr	r0, [pc, #632]	; (80019d0 <__aeabi_dmul+0x3a4>)
 8001758:	1a83      	subs	r3, r0, r2
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	4699      	mov	r9, r3
 8001760:	469b      	mov	fp, r3
 8001762:	e786      	b.n	8001672 <__aeabi_dmul+0x46>
 8001764:	0005      	movs	r5, r0
 8001766:	4325      	orrs	r5, r4
 8001768:	d000      	beq.n	800176c <__aeabi_dmul+0x140>
 800176a:	e11c      	b.n	80019a6 <__aeabi_dmul+0x37a>
 800176c:	2208      	movs	r2, #8
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2302      	movs	r3, #2
 8001772:	2400      	movs	r4, #0
 8001774:	4691      	mov	r9, r2
 8001776:	469b      	mov	fp, r3
 8001778:	e77b      	b.n	8001672 <__aeabi_dmul+0x46>
 800177a:	4652      	mov	r2, sl
 800177c:	4332      	orrs	r2, r6
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0x156>
 8001780:	e10a      	b.n	8001998 <__aeabi_dmul+0x36c>
 8001782:	2e00      	cmp	r6, #0
 8001784:	d100      	bne.n	8001788 <__aeabi_dmul+0x15c>
 8001786:	e176      	b.n	8001a76 <__aeabi_dmul+0x44a>
 8001788:	0030      	movs	r0, r6
 800178a:	f000 fe3f 	bl	800240c <__clzsi2>
 800178e:	0002      	movs	r2, r0
 8001790:	3a0b      	subs	r2, #11
 8001792:	231d      	movs	r3, #29
 8001794:	0001      	movs	r1, r0
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	4652      	mov	r2, sl
 800179a:	3908      	subs	r1, #8
 800179c:	40da      	lsrs	r2, r3
 800179e:	408e      	lsls	r6, r1
 80017a0:	4316      	orrs	r6, r2
 80017a2:	4652      	mov	r2, sl
 80017a4:	408a      	lsls	r2, r1
 80017a6:	9b00      	ldr	r3, [sp, #0]
 80017a8:	4989      	ldr	r1, [pc, #548]	; (80019d0 <__aeabi_dmul+0x3a4>)
 80017aa:	1a18      	subs	r0, r3, r0
 80017ac:	0003      	movs	r3, r0
 80017ae:	468c      	mov	ip, r1
 80017b0:	4463      	add	r3, ip
 80017b2:	2000      	movs	r0, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	e77a      	b.n	80016ae <__aeabi_dmul+0x82>
 80017b8:	2400      	movs	r4, #0
 80017ba:	2500      	movs	r5, #0
 80017bc:	4a81      	ldr	r2, [pc, #516]	; (80019c4 <__aeabi_dmul+0x398>)
 80017be:	e7a5      	b.n	800170c <__aeabi_dmul+0xe0>
 80017c0:	0c2f      	lsrs	r7, r5, #16
 80017c2:	042d      	lsls	r5, r5, #16
 80017c4:	0c2d      	lsrs	r5, r5, #16
 80017c6:	002b      	movs	r3, r5
 80017c8:	0c11      	lsrs	r1, r2, #16
 80017ca:	0412      	lsls	r2, r2, #16
 80017cc:	0c12      	lsrs	r2, r2, #16
 80017ce:	4353      	muls	r3, r2
 80017d0:	4698      	mov	r8, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	0028      	movs	r0, r5
 80017d6:	437b      	muls	r3, r7
 80017d8:	4699      	mov	r9, r3
 80017da:	4348      	muls	r0, r1
 80017dc:	4448      	add	r0, r9
 80017de:	4683      	mov	fp, r0
 80017e0:	4640      	mov	r0, r8
 80017e2:	000b      	movs	r3, r1
 80017e4:	0c00      	lsrs	r0, r0, #16
 80017e6:	4682      	mov	sl, r0
 80017e8:	4658      	mov	r0, fp
 80017ea:	437b      	muls	r3, r7
 80017ec:	4450      	add	r0, sl
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	4581      	cmp	r9, r0
 80017f2:	d906      	bls.n	8001802 <__aeabi_dmul+0x1d6>
 80017f4:	469a      	mov	sl, r3
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	4699      	mov	r9, r3
 80017fc:	44ca      	add	sl, r9
 80017fe:	4653      	mov	r3, sl
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	0c03      	lsrs	r3, r0, #16
 8001804:	469b      	mov	fp, r3
 8001806:	4643      	mov	r3, r8
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	0400      	lsls	r0, r0, #16
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	4698      	mov	r8, r3
 8001810:	0003      	movs	r3, r0
 8001812:	4443      	add	r3, r8
 8001814:	9304      	str	r3, [sp, #16]
 8001816:	0c33      	lsrs	r3, r6, #16
 8001818:	4699      	mov	r9, r3
 800181a:	002b      	movs	r3, r5
 800181c:	0436      	lsls	r6, r6, #16
 800181e:	0c36      	lsrs	r6, r6, #16
 8001820:	4373      	muls	r3, r6
 8001822:	4698      	mov	r8, r3
 8001824:	0033      	movs	r3, r6
 8001826:	437b      	muls	r3, r7
 8001828:	469a      	mov	sl, r3
 800182a:	464b      	mov	r3, r9
 800182c:	435d      	muls	r5, r3
 800182e:	435f      	muls	r7, r3
 8001830:	4643      	mov	r3, r8
 8001832:	4455      	add	r5, sl
 8001834:	0c18      	lsrs	r0, r3, #16
 8001836:	1940      	adds	r0, r0, r5
 8001838:	4582      	cmp	sl, r0
 800183a:	d903      	bls.n	8001844 <__aeabi_dmul+0x218>
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	469a      	mov	sl, r3
 8001842:	4457      	add	r7, sl
 8001844:	0c05      	lsrs	r5, r0, #16
 8001846:	19eb      	adds	r3, r5, r7
 8001848:	9305      	str	r3, [sp, #20]
 800184a:	4643      	mov	r3, r8
 800184c:	041d      	lsls	r5, r3, #16
 800184e:	0c2d      	lsrs	r5, r5, #16
 8001850:	0400      	lsls	r0, r0, #16
 8001852:	1940      	adds	r0, r0, r5
 8001854:	0c25      	lsrs	r5, r4, #16
 8001856:	0424      	lsls	r4, r4, #16
 8001858:	0c24      	lsrs	r4, r4, #16
 800185a:	0027      	movs	r7, r4
 800185c:	4357      	muls	r7, r2
 800185e:	436a      	muls	r2, r5
 8001860:	4690      	mov	r8, r2
 8001862:	002a      	movs	r2, r5
 8001864:	0c3b      	lsrs	r3, r7, #16
 8001866:	469a      	mov	sl, r3
 8001868:	434a      	muls	r2, r1
 800186a:	4361      	muls	r1, r4
 800186c:	4441      	add	r1, r8
 800186e:	4451      	add	r1, sl
 8001870:	4483      	add	fp, r0
 8001872:	4588      	cmp	r8, r1
 8001874:	d903      	bls.n	800187e <__aeabi_dmul+0x252>
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	025b      	lsls	r3, r3, #9
 800187a:	4698      	mov	r8, r3
 800187c:	4442      	add	r2, r8
 800187e:	043f      	lsls	r7, r7, #16
 8001880:	0c0b      	lsrs	r3, r1, #16
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	0409      	lsls	r1, r1, #16
 8001886:	19c9      	adds	r1, r1, r7
 8001888:	0027      	movs	r7, r4
 800188a:	4698      	mov	r8, r3
 800188c:	464b      	mov	r3, r9
 800188e:	4377      	muls	r7, r6
 8001890:	435c      	muls	r4, r3
 8001892:	436e      	muls	r6, r5
 8001894:	435d      	muls	r5, r3
 8001896:	0c3b      	lsrs	r3, r7, #16
 8001898:	4699      	mov	r9, r3
 800189a:	19a4      	adds	r4, r4, r6
 800189c:	444c      	add	r4, r9
 800189e:	4442      	add	r2, r8
 80018a0:	9503      	str	r5, [sp, #12]
 80018a2:	42a6      	cmp	r6, r4
 80018a4:	d904      	bls.n	80018b0 <__aeabi_dmul+0x284>
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	025b      	lsls	r3, r3, #9
 80018aa:	4698      	mov	r8, r3
 80018ac:	4445      	add	r5, r8
 80018ae:	9503      	str	r5, [sp, #12]
 80018b0:	9b02      	ldr	r3, [sp, #8]
 80018b2:	043f      	lsls	r7, r7, #16
 80018b4:	445b      	add	r3, fp
 80018b6:	001e      	movs	r6, r3
 80018b8:	4283      	cmp	r3, r0
 80018ba:	4180      	sbcs	r0, r0
 80018bc:	0423      	lsls	r3, r4, #16
 80018be:	4698      	mov	r8, r3
 80018c0:	9b05      	ldr	r3, [sp, #20]
 80018c2:	0c3f      	lsrs	r7, r7, #16
 80018c4:	4447      	add	r7, r8
 80018c6:	4698      	mov	r8, r3
 80018c8:	1876      	adds	r6, r6, r1
 80018ca:	428e      	cmp	r6, r1
 80018cc:	4189      	sbcs	r1, r1
 80018ce:	4447      	add	r7, r8
 80018d0:	4240      	negs	r0, r0
 80018d2:	183d      	adds	r5, r7, r0
 80018d4:	46a8      	mov	r8, r5
 80018d6:	4693      	mov	fp, r2
 80018d8:	4249      	negs	r1, r1
 80018da:	468a      	mov	sl, r1
 80018dc:	44c3      	add	fp, r8
 80018de:	429f      	cmp	r7, r3
 80018e0:	41bf      	sbcs	r7, r7
 80018e2:	4580      	cmp	r8, r0
 80018e4:	4180      	sbcs	r0, r0
 80018e6:	9b03      	ldr	r3, [sp, #12]
 80018e8:	44da      	add	sl, fp
 80018ea:	4698      	mov	r8, r3
 80018ec:	4653      	mov	r3, sl
 80018ee:	4240      	negs	r0, r0
 80018f0:	427f      	negs	r7, r7
 80018f2:	4307      	orrs	r7, r0
 80018f4:	0c24      	lsrs	r4, r4, #16
 80018f6:	4593      	cmp	fp, r2
 80018f8:	4192      	sbcs	r2, r2
 80018fa:	458a      	cmp	sl, r1
 80018fc:	4189      	sbcs	r1, r1
 80018fe:	193f      	adds	r7, r7, r4
 8001900:	0ddc      	lsrs	r4, r3, #23
 8001902:	9b04      	ldr	r3, [sp, #16]
 8001904:	0275      	lsls	r5, r6, #9
 8001906:	431d      	orrs	r5, r3
 8001908:	1e68      	subs	r0, r5, #1
 800190a:	4185      	sbcs	r5, r0
 800190c:	4653      	mov	r3, sl
 800190e:	4252      	negs	r2, r2
 8001910:	4249      	negs	r1, r1
 8001912:	430a      	orrs	r2, r1
 8001914:	18bf      	adds	r7, r7, r2
 8001916:	4447      	add	r7, r8
 8001918:	0df6      	lsrs	r6, r6, #23
 800191a:	027f      	lsls	r7, r7, #9
 800191c:	4335      	orrs	r5, r6
 800191e:	025a      	lsls	r2, r3, #9
 8001920:	433c      	orrs	r4, r7
 8001922:	4315      	orrs	r5, r2
 8001924:	01fb      	lsls	r3, r7, #7
 8001926:	d400      	bmi.n	800192a <__aeabi_dmul+0x2fe>
 8001928:	e0c1      	b.n	8001aae <__aeabi_dmul+0x482>
 800192a:	2101      	movs	r1, #1
 800192c:	086a      	lsrs	r2, r5, #1
 800192e:	400d      	ands	r5, r1
 8001930:	4315      	orrs	r5, r2
 8001932:	07e2      	lsls	r2, r4, #31
 8001934:	4315      	orrs	r5, r2
 8001936:	0864      	lsrs	r4, r4, #1
 8001938:	4926      	ldr	r1, [pc, #152]	; (80019d4 <__aeabi_dmul+0x3a8>)
 800193a:	4461      	add	r1, ip
 800193c:	2900      	cmp	r1, #0
 800193e:	dd56      	ble.n	80019ee <__aeabi_dmul+0x3c2>
 8001940:	076b      	lsls	r3, r5, #29
 8001942:	d009      	beq.n	8001958 <__aeabi_dmul+0x32c>
 8001944:	220f      	movs	r2, #15
 8001946:	402a      	ands	r2, r5
 8001948:	2a04      	cmp	r2, #4
 800194a:	d005      	beq.n	8001958 <__aeabi_dmul+0x32c>
 800194c:	1d2a      	adds	r2, r5, #4
 800194e:	42aa      	cmp	r2, r5
 8001950:	41ad      	sbcs	r5, r5
 8001952:	426d      	negs	r5, r5
 8001954:	1964      	adds	r4, r4, r5
 8001956:	0015      	movs	r5, r2
 8001958:	01e3      	lsls	r3, r4, #7
 800195a:	d504      	bpl.n	8001966 <__aeabi_dmul+0x33a>
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <__aeabi_dmul+0x3ac>)
 8001960:	00c9      	lsls	r1, r1, #3
 8001962:	4014      	ands	r4, r2
 8001964:	4461      	add	r1, ip
 8001966:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <__aeabi_dmul+0x3b0>)
 8001968:	4291      	cmp	r1, r2
 800196a:	dd00      	ble.n	800196e <__aeabi_dmul+0x342>
 800196c:	e724      	b.n	80017b8 <__aeabi_dmul+0x18c>
 800196e:	0762      	lsls	r2, r4, #29
 8001970:	08ed      	lsrs	r5, r5, #3
 8001972:	0264      	lsls	r4, r4, #9
 8001974:	0549      	lsls	r1, r1, #21
 8001976:	4315      	orrs	r5, r2
 8001978:	0b24      	lsrs	r4, r4, #12
 800197a:	0d4a      	lsrs	r2, r1, #21
 800197c:	e6c6      	b.n	800170c <__aeabi_dmul+0xe0>
 800197e:	9701      	str	r7, [sp, #4]
 8001980:	e6b8      	b.n	80016f4 <__aeabi_dmul+0xc8>
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <__aeabi_dmul+0x398>)
 8001984:	2003      	movs	r0, #3
 8001986:	4694      	mov	ip, r2
 8001988:	4463      	add	r3, ip
 800198a:	464a      	mov	r2, r9
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2303      	movs	r3, #3
 8001990:	431a      	orrs	r2, r3
 8001992:	4691      	mov	r9, r2
 8001994:	4652      	mov	r2, sl
 8001996:	e68a      	b.n	80016ae <__aeabi_dmul+0x82>
 8001998:	4649      	mov	r1, r9
 800199a:	2301      	movs	r3, #1
 800199c:	4319      	orrs	r1, r3
 800199e:	4689      	mov	r9, r1
 80019a0:	2600      	movs	r6, #0
 80019a2:	2001      	movs	r0, #1
 80019a4:	e683      	b.n	80016ae <__aeabi_dmul+0x82>
 80019a6:	220c      	movs	r2, #12
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2303      	movs	r3, #3
 80019ac:	0005      	movs	r5, r0
 80019ae:	4691      	mov	r9, r2
 80019b0:	469b      	mov	fp, r3
 80019b2:	e65e      	b.n	8001672 <__aeabi_dmul+0x46>
 80019b4:	2304      	movs	r3, #4
 80019b6:	4699      	mov	r9, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	2400      	movs	r4, #0
 80019c0:	469b      	mov	fp, r3
 80019c2:	e656      	b.n	8001672 <__aeabi_dmul+0x46>
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	fffffc01 	.word	0xfffffc01
 80019cc:	080083b0 	.word	0x080083b0
 80019d0:	fffffc0d 	.word	0xfffffc0d
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	2300      	movs	r3, #0
 80019e2:	2480      	movs	r4, #128	; 0x80
 80019e4:	2500      	movs	r5, #0
 80019e6:	4a44      	ldr	r2, [pc, #272]	; (8001af8 <__aeabi_dmul+0x4cc>)
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	0324      	lsls	r4, r4, #12
 80019ec:	e68e      	b.n	800170c <__aeabi_dmul+0xe0>
 80019ee:	2001      	movs	r0, #1
 80019f0:	1a40      	subs	r0, r0, r1
 80019f2:	2838      	cmp	r0, #56	; 0x38
 80019f4:	dd00      	ble.n	80019f8 <__aeabi_dmul+0x3cc>
 80019f6:	e686      	b.n	8001706 <__aeabi_dmul+0xda>
 80019f8:	281f      	cmp	r0, #31
 80019fa:	dd5b      	ble.n	8001ab4 <__aeabi_dmul+0x488>
 80019fc:	221f      	movs	r2, #31
 80019fe:	0023      	movs	r3, r4
 8001a00:	4252      	negs	r2, r2
 8001a02:	1a51      	subs	r1, r2, r1
 8001a04:	40cb      	lsrs	r3, r1
 8001a06:	0019      	movs	r1, r3
 8001a08:	2820      	cmp	r0, #32
 8001a0a:	d003      	beq.n	8001a14 <__aeabi_dmul+0x3e8>
 8001a0c:	4a3b      	ldr	r2, [pc, #236]	; (8001afc <__aeabi_dmul+0x4d0>)
 8001a0e:	4462      	add	r2, ip
 8001a10:	4094      	lsls	r4, r2
 8001a12:	4325      	orrs	r5, r4
 8001a14:	1e6a      	subs	r2, r5, #1
 8001a16:	4195      	sbcs	r5, r2
 8001a18:	002a      	movs	r2, r5
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	2107      	movs	r1, #7
 8001a1e:	000d      	movs	r5, r1
 8001a20:	2400      	movs	r4, #0
 8001a22:	4015      	ands	r5, r2
 8001a24:	4211      	tst	r1, r2
 8001a26:	d05b      	beq.n	8001ae0 <__aeabi_dmul+0x4b4>
 8001a28:	210f      	movs	r1, #15
 8001a2a:	2400      	movs	r4, #0
 8001a2c:	4011      	ands	r1, r2
 8001a2e:	2904      	cmp	r1, #4
 8001a30:	d053      	beq.n	8001ada <__aeabi_dmul+0x4ae>
 8001a32:	1d11      	adds	r1, r2, #4
 8001a34:	4291      	cmp	r1, r2
 8001a36:	4192      	sbcs	r2, r2
 8001a38:	4252      	negs	r2, r2
 8001a3a:	18a4      	adds	r4, r4, r2
 8001a3c:	000a      	movs	r2, r1
 8001a3e:	0223      	lsls	r3, r4, #8
 8001a40:	d54b      	bpl.n	8001ada <__aeabi_dmul+0x4ae>
 8001a42:	2201      	movs	r2, #1
 8001a44:	2400      	movs	r4, #0
 8001a46:	2500      	movs	r5, #0
 8001a48:	e660      	b.n	800170c <__aeabi_dmul+0xe0>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	031b      	lsls	r3, r3, #12
 8001a4e:	421c      	tst	r4, r3
 8001a50:	d009      	beq.n	8001a66 <__aeabi_dmul+0x43a>
 8001a52:	421e      	tst	r6, r3
 8001a54:	d107      	bne.n	8001a66 <__aeabi_dmul+0x43a>
 8001a56:	4333      	orrs	r3, r6
 8001a58:	031c      	lsls	r4, r3, #12
 8001a5a:	4643      	mov	r3, r8
 8001a5c:	0015      	movs	r5, r2
 8001a5e:	0b24      	lsrs	r4, r4, #12
 8001a60:	4a25      	ldr	r2, [pc, #148]	; (8001af8 <__aeabi_dmul+0x4cc>)
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	e652      	b.n	800170c <__aeabi_dmul+0xe0>
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	0312      	lsls	r2, r2, #12
 8001a6a:	4314      	orrs	r4, r2
 8001a6c:	0324      	lsls	r4, r4, #12
 8001a6e:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <__aeabi_dmul+0x4cc>)
 8001a70:	0b24      	lsrs	r4, r4, #12
 8001a72:	9701      	str	r7, [sp, #4]
 8001a74:	e64a      	b.n	800170c <__aeabi_dmul+0xe0>
 8001a76:	f000 fcc9 	bl	800240c <__clzsi2>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	3215      	adds	r2, #21
 8001a80:	3020      	adds	r0, #32
 8001a82:	2a1c      	cmp	r2, #28
 8001a84:	dc00      	bgt.n	8001a88 <__aeabi_dmul+0x45c>
 8001a86:	e684      	b.n	8001792 <__aeabi_dmul+0x166>
 8001a88:	4656      	mov	r6, sl
 8001a8a:	3b08      	subs	r3, #8
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	409e      	lsls	r6, r3
 8001a90:	e689      	b.n	80017a6 <__aeabi_dmul+0x17a>
 8001a92:	f000 fcbb 	bl	800240c <__clzsi2>
 8001a96:	0001      	movs	r1, r0
 8001a98:	0002      	movs	r2, r0
 8001a9a:	3115      	adds	r1, #21
 8001a9c:	3220      	adds	r2, #32
 8001a9e:	291c      	cmp	r1, #28
 8001aa0:	dc00      	bgt.n	8001aa4 <__aeabi_dmul+0x478>
 8001aa2:	e64e      	b.n	8001742 <__aeabi_dmul+0x116>
 8001aa4:	0034      	movs	r4, r6
 8001aa6:	3808      	subs	r0, #8
 8001aa8:	2500      	movs	r5, #0
 8001aaa:	4084      	lsls	r4, r0
 8001aac:	e653      	b.n	8001756 <__aeabi_dmul+0x12a>
 8001aae:	9b00      	ldr	r3, [sp, #0]
 8001ab0:	469c      	mov	ip, r3
 8001ab2:	e741      	b.n	8001938 <__aeabi_dmul+0x30c>
 8001ab4:	4912      	ldr	r1, [pc, #72]	; (8001b00 <__aeabi_dmul+0x4d4>)
 8001ab6:	0022      	movs	r2, r4
 8001ab8:	4461      	add	r1, ip
 8001aba:	002e      	movs	r6, r5
 8001abc:	408d      	lsls	r5, r1
 8001abe:	408a      	lsls	r2, r1
 8001ac0:	40c6      	lsrs	r6, r0
 8001ac2:	1e69      	subs	r1, r5, #1
 8001ac4:	418d      	sbcs	r5, r1
 8001ac6:	4332      	orrs	r2, r6
 8001ac8:	432a      	orrs	r2, r5
 8001aca:	40c4      	lsrs	r4, r0
 8001acc:	0753      	lsls	r3, r2, #29
 8001ace:	d0b6      	beq.n	8001a3e <__aeabi_dmul+0x412>
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	4011      	ands	r1, r2
 8001ad4:	2904      	cmp	r1, #4
 8001ad6:	d1ac      	bne.n	8001a32 <__aeabi_dmul+0x406>
 8001ad8:	e7b1      	b.n	8001a3e <__aeabi_dmul+0x412>
 8001ada:	0765      	lsls	r5, r4, #29
 8001adc:	0264      	lsls	r4, r4, #9
 8001ade:	0b24      	lsrs	r4, r4, #12
 8001ae0:	08d2      	lsrs	r2, r2, #3
 8001ae2:	4315      	orrs	r5, r2
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	e611      	b.n	800170c <__aeabi_dmul+0xe0>
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	0312      	lsls	r2, r2, #12
 8001aec:	4314      	orrs	r4, r2
 8001aee:	0324      	lsls	r4, r4, #12
 8001af0:	4a01      	ldr	r2, [pc, #4]	; (8001af8 <__aeabi_dmul+0x4cc>)
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	e60a      	b.n	800170c <__aeabi_dmul+0xe0>
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	000007ff 	.word	0x000007ff
 8001afc:	0000043e 	.word	0x0000043e
 8001b00:	0000041e 	.word	0x0000041e

08001b04 <__aeabi_dsub>:
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	4657      	mov	r7, sl
 8001b08:	464e      	mov	r6, r9
 8001b0a:	4645      	mov	r5, r8
 8001b0c:	46de      	mov	lr, fp
 8001b0e:	0004      	movs	r4, r0
 8001b10:	b5e0      	push	{r5, r6, r7, lr}
 8001b12:	001f      	movs	r7, r3
 8001b14:	0010      	movs	r0, r2
 8001b16:	030b      	lsls	r3, r1, #12
 8001b18:	0f62      	lsrs	r2, r4, #29
 8001b1a:	004e      	lsls	r6, r1, #1
 8001b1c:	0fcd      	lsrs	r5, r1, #31
 8001b1e:	0a5b      	lsrs	r3, r3, #9
 8001b20:	0339      	lsls	r1, r7, #12
 8001b22:	4313      	orrs	r3, r2
 8001b24:	0a49      	lsrs	r1, r1, #9
 8001b26:	00e2      	lsls	r2, r4, #3
 8001b28:	0f44      	lsrs	r4, r0, #29
 8001b2a:	4321      	orrs	r1, r4
 8001b2c:	4cc2      	ldr	r4, [pc, #776]	; (8001e38 <__aeabi_dsub+0x334>)
 8001b2e:	4691      	mov	r9, r2
 8001b30:	4692      	mov	sl, r2
 8001b32:	00c0      	lsls	r0, r0, #3
 8001b34:	007a      	lsls	r2, r7, #1
 8001b36:	4680      	mov	r8, r0
 8001b38:	0d76      	lsrs	r6, r6, #21
 8001b3a:	0d52      	lsrs	r2, r2, #21
 8001b3c:	0fff      	lsrs	r7, r7, #31
 8001b3e:	42a2      	cmp	r2, r4
 8001b40:	d100      	bne.n	8001b44 <__aeabi_dsub+0x40>
 8001b42:	e0b4      	b.n	8001cae <__aeabi_dsub+0x1aa>
 8001b44:	2401      	movs	r4, #1
 8001b46:	4067      	eors	r7, r4
 8001b48:	46bb      	mov	fp, r7
 8001b4a:	42bd      	cmp	r5, r7
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dsub+0x4c>
 8001b4e:	e088      	b.n	8001c62 <__aeabi_dsub+0x15e>
 8001b50:	1ab4      	subs	r4, r6, r2
 8001b52:	46a4      	mov	ip, r4
 8001b54:	2c00      	cmp	r4, #0
 8001b56:	dc00      	bgt.n	8001b5a <__aeabi_dsub+0x56>
 8001b58:	e0b2      	b.n	8001cc0 <__aeabi_dsub+0x1bc>
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x5c>
 8001b5e:	e0c5      	b.n	8001cec <__aeabi_dsub+0x1e8>
 8001b60:	4ab5      	ldr	r2, [pc, #724]	; (8001e38 <__aeabi_dsub+0x334>)
 8001b62:	4296      	cmp	r6, r2
 8001b64:	d100      	bne.n	8001b68 <__aeabi_dsub+0x64>
 8001b66:	e28b      	b.n	8002080 <__aeabi_dsub+0x57c>
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	0412      	lsls	r2, r2, #16
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	4662      	mov	r2, ip
 8001b70:	2a38      	cmp	r2, #56	; 0x38
 8001b72:	dd00      	ble.n	8001b76 <__aeabi_dsub+0x72>
 8001b74:	e1a1      	b.n	8001eba <__aeabi_dsub+0x3b6>
 8001b76:	2a1f      	cmp	r2, #31
 8001b78:	dd00      	ble.n	8001b7c <__aeabi_dsub+0x78>
 8001b7a:	e216      	b.n	8001faa <__aeabi_dsub+0x4a6>
 8001b7c:	2720      	movs	r7, #32
 8001b7e:	000c      	movs	r4, r1
 8001b80:	1abf      	subs	r7, r7, r2
 8001b82:	40bc      	lsls	r4, r7
 8001b84:	0002      	movs	r2, r0
 8001b86:	46a0      	mov	r8, r4
 8001b88:	4664      	mov	r4, ip
 8001b8a:	40b8      	lsls	r0, r7
 8001b8c:	40e2      	lsrs	r2, r4
 8001b8e:	4644      	mov	r4, r8
 8001b90:	4314      	orrs	r4, r2
 8001b92:	0002      	movs	r2, r0
 8001b94:	1e50      	subs	r0, r2, #1
 8001b96:	4182      	sbcs	r2, r0
 8001b98:	4660      	mov	r0, ip
 8001b9a:	40c1      	lsrs	r1, r0
 8001b9c:	4322      	orrs	r2, r4
 8001b9e:	1a5b      	subs	r3, r3, r1
 8001ba0:	4649      	mov	r1, r9
 8001ba2:	1a8c      	subs	r4, r1, r2
 8001ba4:	45a1      	cmp	r9, r4
 8001ba6:	4192      	sbcs	r2, r2
 8001ba8:	4252      	negs	r2, r2
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	4698      	mov	r8, r3
 8001bae:	4643      	mov	r3, r8
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	d400      	bmi.n	8001bb6 <__aeabi_dsub+0xb2>
 8001bb4:	e117      	b.n	8001de6 <__aeabi_dsub+0x2e2>
 8001bb6:	4643      	mov	r3, r8
 8001bb8:	025b      	lsls	r3, r3, #9
 8001bba:	0a5b      	lsrs	r3, r3, #9
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	4643      	mov	r3, r8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0xc2>
 8001bc4:	e16c      	b.n	8001ea0 <__aeabi_dsub+0x39c>
 8001bc6:	4640      	mov	r0, r8
 8001bc8:	f000 fc20 	bl	800240c <__clzsi2>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	3a08      	subs	r2, #8
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	4643      	mov	r3, r8
 8001bd6:	1a89      	subs	r1, r1, r2
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	40c8      	lsrs	r0, r1
 8001bdc:	4094      	lsls	r4, r2
 8001bde:	4303      	orrs	r3, r0
 8001be0:	4296      	cmp	r6, r2
 8001be2:	dd00      	ble.n	8001be6 <__aeabi_dsub+0xe2>
 8001be4:	e157      	b.n	8001e96 <__aeabi_dsub+0x392>
 8001be6:	1b96      	subs	r6, r2, r6
 8001be8:	1c71      	adds	r1, r6, #1
 8001bea:	291f      	cmp	r1, #31
 8001bec:	dd00      	ble.n	8001bf0 <__aeabi_dsub+0xec>
 8001bee:	e1cb      	b.n	8001f88 <__aeabi_dsub+0x484>
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	0026      	movs	r6, r4
 8001bf6:	1a52      	subs	r2, r2, r1
 8001bf8:	4094      	lsls	r4, r2
 8001bfa:	4090      	lsls	r0, r2
 8001bfc:	40ce      	lsrs	r6, r1
 8001bfe:	40cb      	lsrs	r3, r1
 8001c00:	1e62      	subs	r2, r4, #1
 8001c02:	4194      	sbcs	r4, r2
 8001c04:	4330      	orrs	r0, r6
 8001c06:	4698      	mov	r8, r3
 8001c08:	2600      	movs	r6, #0
 8001c0a:	4304      	orrs	r4, r0
 8001c0c:	0763      	lsls	r3, r4, #29
 8001c0e:	d009      	beq.n	8001c24 <__aeabi_dsub+0x120>
 8001c10:	230f      	movs	r3, #15
 8001c12:	4023      	ands	r3, r4
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d005      	beq.n	8001c24 <__aeabi_dsub+0x120>
 8001c18:	1d23      	adds	r3, r4, #4
 8001c1a:	42a3      	cmp	r3, r4
 8001c1c:	41a4      	sbcs	r4, r4
 8001c1e:	4264      	negs	r4, r4
 8001c20:	44a0      	add	r8, r4
 8001c22:	001c      	movs	r4, r3
 8001c24:	4643      	mov	r3, r8
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	d400      	bmi.n	8001c2c <__aeabi_dsub+0x128>
 8001c2a:	e0df      	b.n	8001dec <__aeabi_dsub+0x2e8>
 8001c2c:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <__aeabi_dsub+0x334>)
 8001c2e:	3601      	adds	r6, #1
 8001c30:	429e      	cmp	r6, r3
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x132>
 8001c34:	e0fb      	b.n	8001e2e <__aeabi_dsub+0x32a>
 8001c36:	4642      	mov	r2, r8
 8001c38:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <__aeabi_dsub+0x338>)
 8001c3a:	08e4      	lsrs	r4, r4, #3
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	0013      	movs	r3, r2
 8001c40:	0571      	lsls	r1, r6, #21
 8001c42:	0752      	lsls	r2, r2, #29
 8001c44:	025b      	lsls	r3, r3, #9
 8001c46:	4322      	orrs	r2, r4
 8001c48:	0b1b      	lsrs	r3, r3, #12
 8001c4a:	0d49      	lsrs	r1, r1, #21
 8001c4c:	0509      	lsls	r1, r1, #20
 8001c4e:	07ed      	lsls	r5, r5, #31
 8001c50:	4319      	orrs	r1, r3
 8001c52:	4329      	orrs	r1, r5
 8001c54:	0010      	movs	r0, r2
 8001c56:	bcf0      	pop	{r4, r5, r6, r7}
 8001c58:	46bb      	mov	fp, r7
 8001c5a:	46b2      	mov	sl, r6
 8001c5c:	46a9      	mov	r9, r5
 8001c5e:	46a0      	mov	r8, r4
 8001c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c62:	1ab4      	subs	r4, r6, r2
 8001c64:	46a4      	mov	ip, r4
 8001c66:	2c00      	cmp	r4, #0
 8001c68:	dd58      	ble.n	8001d1c <__aeabi_dsub+0x218>
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x16c>
 8001c6e:	e09e      	b.n	8001dae <__aeabi_dsub+0x2aa>
 8001c70:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <__aeabi_dsub+0x334>)
 8001c72:	4296      	cmp	r6, r2
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x174>
 8001c76:	e13b      	b.n	8001ef0 <__aeabi_dsub+0x3ec>
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	0412      	lsls	r2, r2, #16
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	4662      	mov	r2, ip
 8001c80:	2a38      	cmp	r2, #56	; 0x38
 8001c82:	dd00      	ble.n	8001c86 <__aeabi_dsub+0x182>
 8001c84:	e0c1      	b.n	8001e0a <__aeabi_dsub+0x306>
 8001c86:	2a1f      	cmp	r2, #31
 8001c88:	dc00      	bgt.n	8001c8c <__aeabi_dsub+0x188>
 8001c8a:	e1bb      	b.n	8002004 <__aeabi_dsub+0x500>
 8001c8c:	000c      	movs	r4, r1
 8001c8e:	3a20      	subs	r2, #32
 8001c90:	40d4      	lsrs	r4, r2
 8001c92:	0022      	movs	r2, r4
 8001c94:	4664      	mov	r4, ip
 8001c96:	2c20      	cmp	r4, #32
 8001c98:	d004      	beq.n	8001ca4 <__aeabi_dsub+0x1a0>
 8001c9a:	2740      	movs	r7, #64	; 0x40
 8001c9c:	1b3f      	subs	r7, r7, r4
 8001c9e:	40b9      	lsls	r1, r7
 8001ca0:	4308      	orrs	r0, r1
 8001ca2:	4680      	mov	r8, r0
 8001ca4:	4644      	mov	r4, r8
 8001ca6:	1e61      	subs	r1, r4, #1
 8001ca8:	418c      	sbcs	r4, r1
 8001caa:	4314      	orrs	r4, r2
 8001cac:	e0b1      	b.n	8001e12 <__aeabi_dsub+0x30e>
 8001cae:	000c      	movs	r4, r1
 8001cb0:	4304      	orrs	r4, r0
 8001cb2:	d02a      	beq.n	8001d0a <__aeabi_dsub+0x206>
 8001cb4:	46bb      	mov	fp, r7
 8001cb6:	42bd      	cmp	r5, r7
 8001cb8:	d02d      	beq.n	8001d16 <__aeabi_dsub+0x212>
 8001cba:	4c61      	ldr	r4, [pc, #388]	; (8001e40 <__aeabi_dsub+0x33c>)
 8001cbc:	46a4      	mov	ip, r4
 8001cbe:	44b4      	add	ip, r6
 8001cc0:	4664      	mov	r4, ip
 8001cc2:	2c00      	cmp	r4, #0
 8001cc4:	d05c      	beq.n	8001d80 <__aeabi_dsub+0x27c>
 8001cc6:	1b94      	subs	r4, r2, r6
 8001cc8:	46a4      	mov	ip, r4
 8001cca:	2e00      	cmp	r6, #0
 8001ccc:	d000      	beq.n	8001cd0 <__aeabi_dsub+0x1cc>
 8001cce:	e115      	b.n	8001efc <__aeabi_dsub+0x3f8>
 8001cd0:	464d      	mov	r5, r9
 8001cd2:	431d      	orrs	r5, r3
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x1d4>
 8001cd6:	e1c3      	b.n	8002060 <__aeabi_dsub+0x55c>
 8001cd8:	1e65      	subs	r5, r4, #1
 8001cda:	2c01      	cmp	r4, #1
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dsub+0x1dc>
 8001cde:	e20c      	b.n	80020fa <__aeabi_dsub+0x5f6>
 8001ce0:	4e55      	ldr	r6, [pc, #340]	; (8001e38 <__aeabi_dsub+0x334>)
 8001ce2:	42b4      	cmp	r4, r6
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x1e4>
 8001ce6:	e1f8      	b.n	80020da <__aeabi_dsub+0x5d6>
 8001ce8:	46ac      	mov	ip, r5
 8001cea:	e10e      	b.n	8001f0a <__aeabi_dsub+0x406>
 8001cec:	000a      	movs	r2, r1
 8001cee:	4302      	orrs	r2, r0
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dsub+0x1f0>
 8001cf2:	e136      	b.n	8001f62 <__aeabi_dsub+0x45e>
 8001cf4:	0022      	movs	r2, r4
 8001cf6:	3a01      	subs	r2, #1
 8001cf8:	2c01      	cmp	r4, #1
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x1fa>
 8001cfc:	e1c6      	b.n	800208c <__aeabi_dsub+0x588>
 8001cfe:	4c4e      	ldr	r4, [pc, #312]	; (8001e38 <__aeabi_dsub+0x334>)
 8001d00:	45a4      	cmp	ip, r4
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x202>
 8001d04:	e0f4      	b.n	8001ef0 <__aeabi_dsub+0x3ec>
 8001d06:	4694      	mov	ip, r2
 8001d08:	e731      	b.n	8001b6e <__aeabi_dsub+0x6a>
 8001d0a:	2401      	movs	r4, #1
 8001d0c:	4067      	eors	r7, r4
 8001d0e:	46bb      	mov	fp, r7
 8001d10:	42bd      	cmp	r5, r7
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x212>
 8001d14:	e71c      	b.n	8001b50 <__aeabi_dsub+0x4c>
 8001d16:	4c4a      	ldr	r4, [pc, #296]	; (8001e40 <__aeabi_dsub+0x33c>)
 8001d18:	46a4      	mov	ip, r4
 8001d1a:	44b4      	add	ip, r6
 8001d1c:	4664      	mov	r4, ip
 8001d1e:	2c00      	cmp	r4, #0
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x220>
 8001d22:	e0cf      	b.n	8001ec4 <__aeabi_dsub+0x3c0>
 8001d24:	1b94      	subs	r4, r2, r6
 8001d26:	46a4      	mov	ip, r4
 8001d28:	2e00      	cmp	r6, #0
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x22a>
 8001d2c:	e15c      	b.n	8001fe8 <__aeabi_dsub+0x4e4>
 8001d2e:	4e42      	ldr	r6, [pc, #264]	; (8001e38 <__aeabi_dsub+0x334>)
 8001d30:	42b2      	cmp	r2, r6
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dsub+0x232>
 8001d34:	e1ec      	b.n	8002110 <__aeabi_dsub+0x60c>
 8001d36:	2680      	movs	r6, #128	; 0x80
 8001d38:	0436      	lsls	r6, r6, #16
 8001d3a:	4333      	orrs	r3, r6
 8001d3c:	4664      	mov	r4, ip
 8001d3e:	2c38      	cmp	r4, #56	; 0x38
 8001d40:	dd00      	ble.n	8001d44 <__aeabi_dsub+0x240>
 8001d42:	e1b3      	b.n	80020ac <__aeabi_dsub+0x5a8>
 8001d44:	2c1f      	cmp	r4, #31
 8001d46:	dd00      	ble.n	8001d4a <__aeabi_dsub+0x246>
 8001d48:	e238      	b.n	80021bc <__aeabi_dsub+0x6b8>
 8001d4a:	2620      	movs	r6, #32
 8001d4c:	1b36      	subs	r6, r6, r4
 8001d4e:	001c      	movs	r4, r3
 8001d50:	40b4      	lsls	r4, r6
 8001d52:	464f      	mov	r7, r9
 8001d54:	46a0      	mov	r8, r4
 8001d56:	4664      	mov	r4, ip
 8001d58:	40e7      	lsrs	r7, r4
 8001d5a:	4644      	mov	r4, r8
 8001d5c:	433c      	orrs	r4, r7
 8001d5e:	464f      	mov	r7, r9
 8001d60:	40b7      	lsls	r7, r6
 8001d62:	003e      	movs	r6, r7
 8001d64:	1e77      	subs	r7, r6, #1
 8001d66:	41be      	sbcs	r6, r7
 8001d68:	4334      	orrs	r4, r6
 8001d6a:	4666      	mov	r6, ip
 8001d6c:	40f3      	lsrs	r3, r6
 8001d6e:	18c9      	adds	r1, r1, r3
 8001d70:	1824      	adds	r4, r4, r0
 8001d72:	4284      	cmp	r4, r0
 8001d74:	419b      	sbcs	r3, r3
 8001d76:	425b      	negs	r3, r3
 8001d78:	4698      	mov	r8, r3
 8001d7a:	0016      	movs	r6, r2
 8001d7c:	4488      	add	r8, r1
 8001d7e:	e04e      	b.n	8001e1e <__aeabi_dsub+0x31a>
 8001d80:	4a30      	ldr	r2, [pc, #192]	; (8001e44 <__aeabi_dsub+0x340>)
 8001d82:	1c74      	adds	r4, r6, #1
 8001d84:	4214      	tst	r4, r2
 8001d86:	d000      	beq.n	8001d8a <__aeabi_dsub+0x286>
 8001d88:	e0d6      	b.n	8001f38 <__aeabi_dsub+0x434>
 8001d8a:	464a      	mov	r2, r9
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	2e00      	cmp	r6, #0
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x290>
 8001d92:	e15b      	b.n	800204c <__aeabi_dsub+0x548>
 8001d94:	2a00      	cmp	r2, #0
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x296>
 8001d98:	e1a5      	b.n	80020e6 <__aeabi_dsub+0x5e2>
 8001d9a:	000a      	movs	r2, r1
 8001d9c:	4302      	orrs	r2, r0
 8001d9e:	d000      	beq.n	8001da2 <__aeabi_dsub+0x29e>
 8001da0:	e1bb      	b.n	800211a <__aeabi_dsub+0x616>
 8001da2:	464a      	mov	r2, r9
 8001da4:	0759      	lsls	r1, r3, #29
 8001da6:	08d2      	lsrs	r2, r2, #3
 8001da8:	430a      	orrs	r2, r1
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	e027      	b.n	8001dfe <__aeabi_dsub+0x2fa>
 8001dae:	000a      	movs	r2, r1
 8001db0:	4302      	orrs	r2, r0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x2b2>
 8001db4:	e174      	b.n	80020a0 <__aeabi_dsub+0x59c>
 8001db6:	0022      	movs	r2, r4
 8001db8:	3a01      	subs	r2, #1
 8001dba:	2c01      	cmp	r4, #1
 8001dbc:	d005      	beq.n	8001dca <__aeabi_dsub+0x2c6>
 8001dbe:	4c1e      	ldr	r4, [pc, #120]	; (8001e38 <__aeabi_dsub+0x334>)
 8001dc0:	45a4      	cmp	ip, r4
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x2c2>
 8001dc4:	e094      	b.n	8001ef0 <__aeabi_dsub+0x3ec>
 8001dc6:	4694      	mov	ip, r2
 8001dc8:	e759      	b.n	8001c7e <__aeabi_dsub+0x17a>
 8001dca:	4448      	add	r0, r9
 8001dcc:	4548      	cmp	r0, r9
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	185b      	adds	r3, r3, r1
 8001dd2:	4698      	mov	r8, r3
 8001dd4:	0004      	movs	r4, r0
 8001dd6:	4252      	negs	r2, r2
 8001dd8:	4490      	add	r8, r2
 8001dda:	4643      	mov	r3, r8
 8001ddc:	2602      	movs	r6, #2
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	d500      	bpl.n	8001de4 <__aeabi_dsub+0x2e0>
 8001de2:	e0c4      	b.n	8001f6e <__aeabi_dsub+0x46a>
 8001de4:	3e01      	subs	r6, #1
 8001de6:	0763      	lsls	r3, r4, #29
 8001de8:	d000      	beq.n	8001dec <__aeabi_dsub+0x2e8>
 8001dea:	e711      	b.n	8001c10 <__aeabi_dsub+0x10c>
 8001dec:	4643      	mov	r3, r8
 8001dee:	46b4      	mov	ip, r6
 8001df0:	0759      	lsls	r1, r3, #29
 8001df2:	08e2      	lsrs	r2, r4, #3
 8001df4:	430a      	orrs	r2, r1
 8001df6:	08db      	lsrs	r3, r3, #3
 8001df8:	490f      	ldr	r1, [pc, #60]	; (8001e38 <__aeabi_dsub+0x334>)
 8001dfa:	458c      	cmp	ip, r1
 8001dfc:	d040      	beq.n	8001e80 <__aeabi_dsub+0x37c>
 8001dfe:	4661      	mov	r1, ip
 8001e00:	031b      	lsls	r3, r3, #12
 8001e02:	0549      	lsls	r1, r1, #21
 8001e04:	0b1b      	lsrs	r3, r3, #12
 8001e06:	0d49      	lsrs	r1, r1, #21
 8001e08:	e720      	b.n	8001c4c <__aeabi_dsub+0x148>
 8001e0a:	4301      	orrs	r1, r0
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	1e61      	subs	r1, r4, #1
 8001e10:	418c      	sbcs	r4, r1
 8001e12:	444c      	add	r4, r9
 8001e14:	454c      	cmp	r4, r9
 8001e16:	4192      	sbcs	r2, r2
 8001e18:	4252      	negs	r2, r2
 8001e1a:	4690      	mov	r8, r2
 8001e1c:	4498      	add	r8, r3
 8001e1e:	4643      	mov	r3, r8
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	d5e0      	bpl.n	8001de6 <__aeabi_dsub+0x2e2>
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__aeabi_dsub+0x334>)
 8001e26:	3601      	adds	r6, #1
 8001e28:	429e      	cmp	r6, r3
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x32a>
 8001e2c:	e09f      	b.n	8001f6e <__aeabi_dsub+0x46a>
 8001e2e:	0031      	movs	r1, r6
 8001e30:	2300      	movs	r3, #0
 8001e32:	2200      	movs	r2, #0
 8001e34:	e70a      	b.n	8001c4c <__aeabi_dsub+0x148>
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	000007ff 	.word	0x000007ff
 8001e3c:	ff7fffff 	.word	0xff7fffff
 8001e40:	fffff801 	.word	0xfffff801
 8001e44:	000007fe 	.word	0x000007fe
 8001e48:	2a00      	cmp	r2, #0
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_dsub+0x34a>
 8001e4c:	e160      	b.n	8002110 <__aeabi_dsub+0x60c>
 8001e4e:	000a      	movs	r2, r1
 8001e50:	4302      	orrs	r2, r0
 8001e52:	d04d      	beq.n	8001ef0 <__aeabi_dsub+0x3ec>
 8001e54:	464a      	mov	r2, r9
 8001e56:	075c      	lsls	r4, r3, #29
 8001e58:	08d2      	lsrs	r2, r2, #3
 8001e5a:	4322      	orrs	r2, r4
 8001e5c:	2480      	movs	r4, #128	; 0x80
 8001e5e:	08db      	lsrs	r3, r3, #3
 8001e60:	0324      	lsls	r4, r4, #12
 8001e62:	4223      	tst	r3, r4
 8001e64:	d007      	beq.n	8001e76 <__aeabi_dsub+0x372>
 8001e66:	08ce      	lsrs	r6, r1, #3
 8001e68:	4226      	tst	r6, r4
 8001e6a:	d104      	bne.n	8001e76 <__aeabi_dsub+0x372>
 8001e6c:	465d      	mov	r5, fp
 8001e6e:	0033      	movs	r3, r6
 8001e70:	08c2      	lsrs	r2, r0, #3
 8001e72:	0749      	lsls	r1, r1, #29
 8001e74:	430a      	orrs	r2, r1
 8001e76:	0f51      	lsrs	r1, r2, #29
 8001e78:	00d2      	lsls	r2, r2, #3
 8001e7a:	08d2      	lsrs	r2, r2, #3
 8001e7c:	0749      	lsls	r1, r1, #29
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	0011      	movs	r1, r2
 8001e82:	4319      	orrs	r1, r3
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x384>
 8001e86:	e1c8      	b.n	800221a <__aeabi_dsub+0x716>
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	0309      	lsls	r1, r1, #12
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	031b      	lsls	r3, r3, #12
 8001e90:	49d5      	ldr	r1, [pc, #852]	; (80021e8 <__aeabi_dsub+0x6e4>)
 8001e92:	0b1b      	lsrs	r3, r3, #12
 8001e94:	e6da      	b.n	8001c4c <__aeabi_dsub+0x148>
 8001e96:	49d5      	ldr	r1, [pc, #852]	; (80021ec <__aeabi_dsub+0x6e8>)
 8001e98:	1ab6      	subs	r6, r6, r2
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	e6b5      	b.n	8001c0c <__aeabi_dsub+0x108>
 8001ea0:	0020      	movs	r0, r4
 8001ea2:	f000 fab3 	bl	800240c <__clzsi2>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	3218      	adds	r2, #24
 8001eaa:	2a1f      	cmp	r2, #31
 8001eac:	dc00      	bgt.n	8001eb0 <__aeabi_dsub+0x3ac>
 8001eae:	e68f      	b.n	8001bd0 <__aeabi_dsub+0xcc>
 8001eb0:	0023      	movs	r3, r4
 8001eb2:	3808      	subs	r0, #8
 8001eb4:	4083      	lsls	r3, r0
 8001eb6:	2400      	movs	r4, #0
 8001eb8:	e692      	b.n	8001be0 <__aeabi_dsub+0xdc>
 8001eba:	4308      	orrs	r0, r1
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	1e50      	subs	r0, r2, #1
 8001ec0:	4182      	sbcs	r2, r0
 8001ec2:	e66d      	b.n	8001ba0 <__aeabi_dsub+0x9c>
 8001ec4:	4cca      	ldr	r4, [pc, #808]	; (80021f0 <__aeabi_dsub+0x6ec>)
 8001ec6:	1c72      	adds	r2, r6, #1
 8001ec8:	4222      	tst	r2, r4
 8001eca:	d000      	beq.n	8001ece <__aeabi_dsub+0x3ca>
 8001ecc:	e0ad      	b.n	800202a <__aeabi_dsub+0x526>
 8001ece:	464a      	mov	r2, r9
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	2e00      	cmp	r6, #0
 8001ed4:	d1b8      	bne.n	8001e48 <__aeabi_dsub+0x344>
 8001ed6:	2a00      	cmp	r2, #0
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x3d8>
 8001eda:	e158      	b.n	800218e <__aeabi_dsub+0x68a>
 8001edc:	000a      	movs	r2, r1
 8001ede:	4302      	orrs	r2, r0
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x3e0>
 8001ee2:	e159      	b.n	8002198 <__aeabi_dsub+0x694>
 8001ee4:	464a      	mov	r2, r9
 8001ee6:	0759      	lsls	r1, r3, #29
 8001ee8:	08d2      	lsrs	r2, r2, #3
 8001eea:	430a      	orrs	r2, r1
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	e786      	b.n	8001dfe <__aeabi_dsub+0x2fa>
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	0759      	lsls	r1, r3, #29
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	e7c1      	b.n	8001e80 <__aeabi_dsub+0x37c>
 8001efc:	4dba      	ldr	r5, [pc, #744]	; (80021e8 <__aeabi_dsub+0x6e4>)
 8001efe:	42aa      	cmp	r2, r5
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x400>
 8001f02:	e11e      	b.n	8002142 <__aeabi_dsub+0x63e>
 8001f04:	2580      	movs	r5, #128	; 0x80
 8001f06:	042d      	lsls	r5, r5, #16
 8001f08:	432b      	orrs	r3, r5
 8001f0a:	4664      	mov	r4, ip
 8001f0c:	2c38      	cmp	r4, #56	; 0x38
 8001f0e:	dc5d      	bgt.n	8001fcc <__aeabi_dsub+0x4c8>
 8001f10:	2c1f      	cmp	r4, #31
 8001f12:	dd00      	ble.n	8001f16 <__aeabi_dsub+0x412>
 8001f14:	e0d0      	b.n	80020b8 <__aeabi_dsub+0x5b4>
 8001f16:	2520      	movs	r5, #32
 8001f18:	4667      	mov	r7, ip
 8001f1a:	1b2d      	subs	r5, r5, r4
 8001f1c:	464e      	mov	r6, r9
 8001f1e:	001c      	movs	r4, r3
 8001f20:	40fe      	lsrs	r6, r7
 8001f22:	40ac      	lsls	r4, r5
 8001f24:	4334      	orrs	r4, r6
 8001f26:	464e      	mov	r6, r9
 8001f28:	40ae      	lsls	r6, r5
 8001f2a:	0035      	movs	r5, r6
 8001f2c:	40fb      	lsrs	r3, r7
 8001f2e:	1e6e      	subs	r6, r5, #1
 8001f30:	41b5      	sbcs	r5, r6
 8001f32:	1ac9      	subs	r1, r1, r3
 8001f34:	432c      	orrs	r4, r5
 8001f36:	e04e      	b.n	8001fd6 <__aeabi_dsub+0x4d2>
 8001f38:	464a      	mov	r2, r9
 8001f3a:	1a14      	subs	r4, r2, r0
 8001f3c:	45a1      	cmp	r9, r4
 8001f3e:	4192      	sbcs	r2, r2
 8001f40:	4252      	negs	r2, r2
 8001f42:	4690      	mov	r8, r2
 8001f44:	1a5f      	subs	r7, r3, r1
 8001f46:	003a      	movs	r2, r7
 8001f48:	4647      	mov	r7, r8
 8001f4a:	1bd2      	subs	r2, r2, r7
 8001f4c:	4690      	mov	r8, r2
 8001f4e:	0212      	lsls	r2, r2, #8
 8001f50:	d500      	bpl.n	8001f54 <__aeabi_dsub+0x450>
 8001f52:	e08b      	b.n	800206c <__aeabi_dsub+0x568>
 8001f54:	4642      	mov	r2, r8
 8001f56:	4322      	orrs	r2, r4
 8001f58:	d000      	beq.n	8001f5c <__aeabi_dsub+0x458>
 8001f5a:	e630      	b.n	8001bbe <__aeabi_dsub+0xba>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	e74d      	b.n	8001dfe <__aeabi_dsub+0x2fa>
 8001f62:	464a      	mov	r2, r9
 8001f64:	0759      	lsls	r1, r3, #29
 8001f66:	08d2      	lsrs	r2, r2, #3
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	e744      	b.n	8001df8 <__aeabi_dsub+0x2f4>
 8001f6e:	4642      	mov	r2, r8
 8001f70:	4b9e      	ldr	r3, [pc, #632]	; (80021ec <__aeabi_dsub+0x6e8>)
 8001f72:	0861      	lsrs	r1, r4, #1
 8001f74:	401a      	ands	r2, r3
 8001f76:	0013      	movs	r3, r2
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4014      	ands	r4, r2
 8001f7c:	430c      	orrs	r4, r1
 8001f7e:	07da      	lsls	r2, r3, #31
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	4698      	mov	r8, r3
 8001f84:	4314      	orrs	r4, r2
 8001f86:	e641      	b.n	8001c0c <__aeabi_dsub+0x108>
 8001f88:	001a      	movs	r2, r3
 8001f8a:	3e1f      	subs	r6, #31
 8001f8c:	40f2      	lsrs	r2, r6
 8001f8e:	0016      	movs	r6, r2
 8001f90:	2920      	cmp	r1, #32
 8001f92:	d003      	beq.n	8001f9c <__aeabi_dsub+0x498>
 8001f94:	2240      	movs	r2, #64	; 0x40
 8001f96:	1a51      	subs	r1, r2, r1
 8001f98:	408b      	lsls	r3, r1
 8001f9a:	431c      	orrs	r4, r3
 8001f9c:	1e62      	subs	r2, r4, #1
 8001f9e:	4194      	sbcs	r4, r2
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	4334      	orrs	r4, r6
 8001fa4:	4698      	mov	r8, r3
 8001fa6:	2600      	movs	r6, #0
 8001fa8:	e71d      	b.n	8001de6 <__aeabi_dsub+0x2e2>
 8001faa:	000c      	movs	r4, r1
 8001fac:	3a20      	subs	r2, #32
 8001fae:	40d4      	lsrs	r4, r2
 8001fb0:	0022      	movs	r2, r4
 8001fb2:	4664      	mov	r4, ip
 8001fb4:	2c20      	cmp	r4, #32
 8001fb6:	d004      	beq.n	8001fc2 <__aeabi_dsub+0x4be>
 8001fb8:	2740      	movs	r7, #64	; 0x40
 8001fba:	1b3f      	subs	r7, r7, r4
 8001fbc:	40b9      	lsls	r1, r7
 8001fbe:	4308      	orrs	r0, r1
 8001fc0:	4680      	mov	r8, r0
 8001fc2:	4644      	mov	r4, r8
 8001fc4:	1e61      	subs	r1, r4, #1
 8001fc6:	418c      	sbcs	r4, r1
 8001fc8:	4322      	orrs	r2, r4
 8001fca:	e5e9      	b.n	8001ba0 <__aeabi_dsub+0x9c>
 8001fcc:	464c      	mov	r4, r9
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	001c      	movs	r4, r3
 8001fd2:	1e63      	subs	r3, r4, #1
 8001fd4:	419c      	sbcs	r4, r3
 8001fd6:	1b04      	subs	r4, r0, r4
 8001fd8:	42a0      	cmp	r0, r4
 8001fda:	419b      	sbcs	r3, r3
 8001fdc:	425b      	negs	r3, r3
 8001fde:	1acb      	subs	r3, r1, r3
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	465d      	mov	r5, fp
 8001fe4:	0016      	movs	r6, r2
 8001fe6:	e5e2      	b.n	8001bae <__aeabi_dsub+0xaa>
 8001fe8:	464e      	mov	r6, r9
 8001fea:	431e      	orrs	r6, r3
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x4ec>
 8001fee:	e0ae      	b.n	800214e <__aeabi_dsub+0x64a>
 8001ff0:	1e66      	subs	r6, r4, #1
 8001ff2:	2c01      	cmp	r4, #1
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dsub+0x4f4>
 8001ff6:	e0fd      	b.n	80021f4 <__aeabi_dsub+0x6f0>
 8001ff8:	4f7b      	ldr	r7, [pc, #492]	; (80021e8 <__aeabi_dsub+0x6e4>)
 8001ffa:	42bc      	cmp	r4, r7
 8001ffc:	d100      	bne.n	8002000 <__aeabi_dsub+0x4fc>
 8001ffe:	e107      	b.n	8002210 <__aeabi_dsub+0x70c>
 8002000:	46b4      	mov	ip, r6
 8002002:	e69b      	b.n	8001d3c <__aeabi_dsub+0x238>
 8002004:	4664      	mov	r4, ip
 8002006:	2220      	movs	r2, #32
 8002008:	1b12      	subs	r2, r2, r4
 800200a:	000c      	movs	r4, r1
 800200c:	4094      	lsls	r4, r2
 800200e:	0007      	movs	r7, r0
 8002010:	4090      	lsls	r0, r2
 8002012:	46a0      	mov	r8, r4
 8002014:	4664      	mov	r4, ip
 8002016:	1e42      	subs	r2, r0, #1
 8002018:	4190      	sbcs	r0, r2
 800201a:	4662      	mov	r2, ip
 800201c:	40e7      	lsrs	r7, r4
 800201e:	4644      	mov	r4, r8
 8002020:	40d1      	lsrs	r1, r2
 8002022:	433c      	orrs	r4, r7
 8002024:	4304      	orrs	r4, r0
 8002026:	185b      	adds	r3, r3, r1
 8002028:	e6f3      	b.n	8001e12 <__aeabi_dsub+0x30e>
 800202a:	4c6f      	ldr	r4, [pc, #444]	; (80021e8 <__aeabi_dsub+0x6e4>)
 800202c:	42a2      	cmp	r2, r4
 800202e:	d100      	bne.n	8002032 <__aeabi_dsub+0x52e>
 8002030:	e0d5      	b.n	80021de <__aeabi_dsub+0x6da>
 8002032:	4448      	add	r0, r9
 8002034:	185b      	adds	r3, r3, r1
 8002036:	4548      	cmp	r0, r9
 8002038:	4189      	sbcs	r1, r1
 800203a:	4249      	negs	r1, r1
 800203c:	185b      	adds	r3, r3, r1
 800203e:	07dc      	lsls	r4, r3, #31
 8002040:	0840      	lsrs	r0, r0, #1
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	4698      	mov	r8, r3
 8002046:	0016      	movs	r6, r2
 8002048:	4304      	orrs	r4, r0
 800204a:	e6cc      	b.n	8001de6 <__aeabi_dsub+0x2e2>
 800204c:	2a00      	cmp	r2, #0
 800204e:	d000      	beq.n	8002052 <__aeabi_dsub+0x54e>
 8002050:	e082      	b.n	8002158 <__aeabi_dsub+0x654>
 8002052:	000a      	movs	r2, r1
 8002054:	4302      	orrs	r2, r0
 8002056:	d140      	bne.n	80020da <__aeabi_dsub+0x5d6>
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	2500      	movs	r5, #0
 800205c:	031b      	lsls	r3, r3, #12
 800205e:	e713      	b.n	8001e88 <__aeabi_dsub+0x384>
 8002060:	074b      	lsls	r3, r1, #29
 8002062:	08c2      	lsrs	r2, r0, #3
 8002064:	431a      	orrs	r2, r3
 8002066:	465d      	mov	r5, fp
 8002068:	08cb      	lsrs	r3, r1, #3
 800206a:	e6c5      	b.n	8001df8 <__aeabi_dsub+0x2f4>
 800206c:	464a      	mov	r2, r9
 800206e:	1a84      	subs	r4, r0, r2
 8002070:	42a0      	cmp	r0, r4
 8002072:	4192      	sbcs	r2, r2
 8002074:	1acb      	subs	r3, r1, r3
 8002076:	4252      	negs	r2, r2
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	4698      	mov	r8, r3
 800207c:	465d      	mov	r5, fp
 800207e:	e59e      	b.n	8001bbe <__aeabi_dsub+0xba>
 8002080:	464a      	mov	r2, r9
 8002082:	0759      	lsls	r1, r3, #29
 8002084:	08d2      	lsrs	r2, r2, #3
 8002086:	430a      	orrs	r2, r1
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	e6f9      	b.n	8001e80 <__aeabi_dsub+0x37c>
 800208c:	464a      	mov	r2, r9
 800208e:	1a14      	subs	r4, r2, r0
 8002090:	45a1      	cmp	r9, r4
 8002092:	4192      	sbcs	r2, r2
 8002094:	1a5b      	subs	r3, r3, r1
 8002096:	4252      	negs	r2, r2
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	4698      	mov	r8, r3
 800209c:	2601      	movs	r6, #1
 800209e:	e586      	b.n	8001bae <__aeabi_dsub+0xaa>
 80020a0:	464a      	mov	r2, r9
 80020a2:	0759      	lsls	r1, r3, #29
 80020a4:	08d2      	lsrs	r2, r2, #3
 80020a6:	430a      	orrs	r2, r1
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	e6a5      	b.n	8001df8 <__aeabi_dsub+0x2f4>
 80020ac:	464c      	mov	r4, r9
 80020ae:	4323      	orrs	r3, r4
 80020b0:	001c      	movs	r4, r3
 80020b2:	1e63      	subs	r3, r4, #1
 80020b4:	419c      	sbcs	r4, r3
 80020b6:	e65b      	b.n	8001d70 <__aeabi_dsub+0x26c>
 80020b8:	4665      	mov	r5, ip
 80020ba:	001e      	movs	r6, r3
 80020bc:	3d20      	subs	r5, #32
 80020be:	40ee      	lsrs	r6, r5
 80020c0:	2c20      	cmp	r4, #32
 80020c2:	d005      	beq.n	80020d0 <__aeabi_dsub+0x5cc>
 80020c4:	2540      	movs	r5, #64	; 0x40
 80020c6:	1b2d      	subs	r5, r5, r4
 80020c8:	40ab      	lsls	r3, r5
 80020ca:	464c      	mov	r4, r9
 80020cc:	431c      	orrs	r4, r3
 80020ce:	46a2      	mov	sl, r4
 80020d0:	4654      	mov	r4, sl
 80020d2:	1e63      	subs	r3, r4, #1
 80020d4:	419c      	sbcs	r4, r3
 80020d6:	4334      	orrs	r4, r6
 80020d8:	e77d      	b.n	8001fd6 <__aeabi_dsub+0x4d2>
 80020da:	074b      	lsls	r3, r1, #29
 80020dc:	08c2      	lsrs	r2, r0, #3
 80020de:	431a      	orrs	r2, r3
 80020e0:	465d      	mov	r5, fp
 80020e2:	08cb      	lsrs	r3, r1, #3
 80020e4:	e6cc      	b.n	8001e80 <__aeabi_dsub+0x37c>
 80020e6:	000a      	movs	r2, r1
 80020e8:	4302      	orrs	r2, r0
 80020ea:	d100      	bne.n	80020ee <__aeabi_dsub+0x5ea>
 80020ec:	e736      	b.n	8001f5c <__aeabi_dsub+0x458>
 80020ee:	074b      	lsls	r3, r1, #29
 80020f0:	08c2      	lsrs	r2, r0, #3
 80020f2:	431a      	orrs	r2, r3
 80020f4:	465d      	mov	r5, fp
 80020f6:	08cb      	lsrs	r3, r1, #3
 80020f8:	e681      	b.n	8001dfe <__aeabi_dsub+0x2fa>
 80020fa:	464a      	mov	r2, r9
 80020fc:	1a84      	subs	r4, r0, r2
 80020fe:	42a0      	cmp	r0, r4
 8002100:	4192      	sbcs	r2, r2
 8002102:	1acb      	subs	r3, r1, r3
 8002104:	4252      	negs	r2, r2
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	4698      	mov	r8, r3
 800210a:	465d      	mov	r5, fp
 800210c:	2601      	movs	r6, #1
 800210e:	e54e      	b.n	8001bae <__aeabi_dsub+0xaa>
 8002110:	074b      	lsls	r3, r1, #29
 8002112:	08c2      	lsrs	r2, r0, #3
 8002114:	431a      	orrs	r2, r3
 8002116:	08cb      	lsrs	r3, r1, #3
 8002118:	e6b2      	b.n	8001e80 <__aeabi_dsub+0x37c>
 800211a:	464a      	mov	r2, r9
 800211c:	1a14      	subs	r4, r2, r0
 800211e:	45a1      	cmp	r9, r4
 8002120:	4192      	sbcs	r2, r2
 8002122:	1a5f      	subs	r7, r3, r1
 8002124:	4252      	negs	r2, r2
 8002126:	1aba      	subs	r2, r7, r2
 8002128:	4690      	mov	r8, r2
 800212a:	0212      	lsls	r2, r2, #8
 800212c:	d56b      	bpl.n	8002206 <__aeabi_dsub+0x702>
 800212e:	464a      	mov	r2, r9
 8002130:	1a84      	subs	r4, r0, r2
 8002132:	42a0      	cmp	r0, r4
 8002134:	4192      	sbcs	r2, r2
 8002136:	1acb      	subs	r3, r1, r3
 8002138:	4252      	negs	r2, r2
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	4698      	mov	r8, r3
 800213e:	465d      	mov	r5, fp
 8002140:	e564      	b.n	8001c0c <__aeabi_dsub+0x108>
 8002142:	074b      	lsls	r3, r1, #29
 8002144:	08c2      	lsrs	r2, r0, #3
 8002146:	431a      	orrs	r2, r3
 8002148:	465d      	mov	r5, fp
 800214a:	08cb      	lsrs	r3, r1, #3
 800214c:	e698      	b.n	8001e80 <__aeabi_dsub+0x37c>
 800214e:	074b      	lsls	r3, r1, #29
 8002150:	08c2      	lsrs	r2, r0, #3
 8002152:	431a      	orrs	r2, r3
 8002154:	08cb      	lsrs	r3, r1, #3
 8002156:	e64f      	b.n	8001df8 <__aeabi_dsub+0x2f4>
 8002158:	000a      	movs	r2, r1
 800215a:	4302      	orrs	r2, r0
 800215c:	d090      	beq.n	8002080 <__aeabi_dsub+0x57c>
 800215e:	464a      	mov	r2, r9
 8002160:	075c      	lsls	r4, r3, #29
 8002162:	08d2      	lsrs	r2, r2, #3
 8002164:	4314      	orrs	r4, r2
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	0312      	lsls	r2, r2, #12
 800216c:	4213      	tst	r3, r2
 800216e:	d008      	beq.n	8002182 <__aeabi_dsub+0x67e>
 8002170:	08ce      	lsrs	r6, r1, #3
 8002172:	4216      	tst	r6, r2
 8002174:	d105      	bne.n	8002182 <__aeabi_dsub+0x67e>
 8002176:	08c0      	lsrs	r0, r0, #3
 8002178:	0749      	lsls	r1, r1, #29
 800217a:	4308      	orrs	r0, r1
 800217c:	0004      	movs	r4, r0
 800217e:	465d      	mov	r5, fp
 8002180:	0033      	movs	r3, r6
 8002182:	0f61      	lsrs	r1, r4, #29
 8002184:	00e2      	lsls	r2, r4, #3
 8002186:	0749      	lsls	r1, r1, #29
 8002188:	08d2      	lsrs	r2, r2, #3
 800218a:	430a      	orrs	r2, r1
 800218c:	e678      	b.n	8001e80 <__aeabi_dsub+0x37c>
 800218e:	074b      	lsls	r3, r1, #29
 8002190:	08c2      	lsrs	r2, r0, #3
 8002192:	431a      	orrs	r2, r3
 8002194:	08cb      	lsrs	r3, r1, #3
 8002196:	e632      	b.n	8001dfe <__aeabi_dsub+0x2fa>
 8002198:	4448      	add	r0, r9
 800219a:	185b      	adds	r3, r3, r1
 800219c:	4548      	cmp	r0, r9
 800219e:	4192      	sbcs	r2, r2
 80021a0:	4698      	mov	r8, r3
 80021a2:	4252      	negs	r2, r2
 80021a4:	4490      	add	r8, r2
 80021a6:	4643      	mov	r3, r8
 80021a8:	0004      	movs	r4, r0
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	d400      	bmi.n	80021b0 <__aeabi_dsub+0x6ac>
 80021ae:	e61a      	b.n	8001de6 <__aeabi_dsub+0x2e2>
 80021b0:	4642      	mov	r2, r8
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <__aeabi_dsub+0x6e8>)
 80021b4:	2601      	movs	r6, #1
 80021b6:	401a      	ands	r2, r3
 80021b8:	4690      	mov	r8, r2
 80021ba:	e614      	b.n	8001de6 <__aeabi_dsub+0x2e2>
 80021bc:	4666      	mov	r6, ip
 80021be:	001f      	movs	r7, r3
 80021c0:	3e20      	subs	r6, #32
 80021c2:	40f7      	lsrs	r7, r6
 80021c4:	2c20      	cmp	r4, #32
 80021c6:	d005      	beq.n	80021d4 <__aeabi_dsub+0x6d0>
 80021c8:	2640      	movs	r6, #64	; 0x40
 80021ca:	1b36      	subs	r6, r6, r4
 80021cc:	40b3      	lsls	r3, r6
 80021ce:	464c      	mov	r4, r9
 80021d0:	431c      	orrs	r4, r3
 80021d2:	46a2      	mov	sl, r4
 80021d4:	4654      	mov	r4, sl
 80021d6:	1e63      	subs	r3, r4, #1
 80021d8:	419c      	sbcs	r4, r3
 80021da:	433c      	orrs	r4, r7
 80021dc:	e5c8      	b.n	8001d70 <__aeabi_dsub+0x26c>
 80021de:	0011      	movs	r1, r2
 80021e0:	2300      	movs	r3, #0
 80021e2:	2200      	movs	r2, #0
 80021e4:	e532      	b.n	8001c4c <__aeabi_dsub+0x148>
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	000007ff 	.word	0x000007ff
 80021ec:	ff7fffff 	.word	0xff7fffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	464a      	mov	r2, r9
 80021f6:	1814      	adds	r4, r2, r0
 80021f8:	4284      	cmp	r4, r0
 80021fa:	4192      	sbcs	r2, r2
 80021fc:	185b      	adds	r3, r3, r1
 80021fe:	4698      	mov	r8, r3
 8002200:	4252      	negs	r2, r2
 8002202:	4490      	add	r8, r2
 8002204:	e5e9      	b.n	8001dda <__aeabi_dsub+0x2d6>
 8002206:	4642      	mov	r2, r8
 8002208:	4322      	orrs	r2, r4
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0x70a>
 800220c:	e6a6      	b.n	8001f5c <__aeabi_dsub+0x458>
 800220e:	e5ea      	b.n	8001de6 <__aeabi_dsub+0x2e2>
 8002210:	074b      	lsls	r3, r1, #29
 8002212:	08c2      	lsrs	r2, r0, #3
 8002214:	431a      	orrs	r2, r3
 8002216:	08cb      	lsrs	r3, r1, #3
 8002218:	e632      	b.n	8001e80 <__aeabi_dsub+0x37c>
 800221a:	2200      	movs	r2, #0
 800221c:	4901      	ldr	r1, [pc, #4]	; (8002224 <__aeabi_dsub+0x720>)
 800221e:	0013      	movs	r3, r2
 8002220:	e514      	b.n	8001c4c <__aeabi_dsub+0x148>
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	000007ff 	.word	0x000007ff

08002228 <__aeabi_dcmpun>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	0005      	movs	r5, r0
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <__aeabi_dcmpun+0x38>)
 800222e:	030c      	lsls	r4, r1, #12
 8002230:	0016      	movs	r6, r2
 8002232:	0049      	lsls	r1, r1, #1
 8002234:	031a      	lsls	r2, r3, #12
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	0b24      	lsrs	r4, r4, #12
 800223a:	0d49      	lsrs	r1, r1, #21
 800223c:	0b12      	lsrs	r2, r2, #12
 800223e:	0d5b      	lsrs	r3, r3, #21
 8002240:	4281      	cmp	r1, r0
 8002242:	d008      	beq.n	8002256 <__aeabi_dcmpun+0x2e>
 8002244:	4906      	ldr	r1, [pc, #24]	; (8002260 <__aeabi_dcmpun+0x38>)
 8002246:	2000      	movs	r0, #0
 8002248:	428b      	cmp	r3, r1
 800224a:	d103      	bne.n	8002254 <__aeabi_dcmpun+0x2c>
 800224c:	4332      	orrs	r2, r6
 800224e:	0010      	movs	r0, r2
 8002250:	1e42      	subs	r2, r0, #1
 8002252:	4190      	sbcs	r0, r2
 8002254:	bd70      	pop	{r4, r5, r6, pc}
 8002256:	2001      	movs	r0, #1
 8002258:	432c      	orrs	r4, r5
 800225a:	d1fb      	bne.n	8002254 <__aeabi_dcmpun+0x2c>
 800225c:	e7f2      	b.n	8002244 <__aeabi_dcmpun+0x1c>
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	000007ff 	.word	0x000007ff

08002264 <__aeabi_d2iz>:
 8002264:	000a      	movs	r2, r1
 8002266:	b530      	push	{r4, r5, lr}
 8002268:	4c13      	ldr	r4, [pc, #76]	; (80022b8 <__aeabi_d2iz+0x54>)
 800226a:	0053      	lsls	r3, r2, #1
 800226c:	0309      	lsls	r1, r1, #12
 800226e:	0005      	movs	r5, r0
 8002270:	0b09      	lsrs	r1, r1, #12
 8002272:	2000      	movs	r0, #0
 8002274:	0d5b      	lsrs	r3, r3, #21
 8002276:	0fd2      	lsrs	r2, r2, #31
 8002278:	42a3      	cmp	r3, r4
 800227a:	dd04      	ble.n	8002286 <__aeabi_d2iz+0x22>
 800227c:	480f      	ldr	r0, [pc, #60]	; (80022bc <__aeabi_d2iz+0x58>)
 800227e:	4283      	cmp	r3, r0
 8002280:	dd02      	ble.n	8002288 <__aeabi_d2iz+0x24>
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <__aeabi_d2iz+0x5c>)
 8002284:	18d0      	adds	r0, r2, r3
 8002286:	bd30      	pop	{r4, r5, pc}
 8002288:	2080      	movs	r0, #128	; 0x80
 800228a:	0340      	lsls	r0, r0, #13
 800228c:	4301      	orrs	r1, r0
 800228e:	480d      	ldr	r0, [pc, #52]	; (80022c4 <__aeabi_d2iz+0x60>)
 8002290:	1ac0      	subs	r0, r0, r3
 8002292:	281f      	cmp	r0, #31
 8002294:	dd08      	ble.n	80022a8 <__aeabi_d2iz+0x44>
 8002296:	480c      	ldr	r0, [pc, #48]	; (80022c8 <__aeabi_d2iz+0x64>)
 8002298:	1ac3      	subs	r3, r0, r3
 800229a:	40d9      	lsrs	r1, r3
 800229c:	000b      	movs	r3, r1
 800229e:	4258      	negs	r0, r3
 80022a0:	2a00      	cmp	r2, #0
 80022a2:	d1f0      	bne.n	8002286 <__aeabi_d2iz+0x22>
 80022a4:	0018      	movs	r0, r3
 80022a6:	e7ee      	b.n	8002286 <__aeabi_d2iz+0x22>
 80022a8:	4c08      	ldr	r4, [pc, #32]	; (80022cc <__aeabi_d2iz+0x68>)
 80022aa:	40c5      	lsrs	r5, r0
 80022ac:	46a4      	mov	ip, r4
 80022ae:	4463      	add	r3, ip
 80022b0:	4099      	lsls	r1, r3
 80022b2:	000b      	movs	r3, r1
 80022b4:	432b      	orrs	r3, r5
 80022b6:	e7f2      	b.n	800229e <__aeabi_d2iz+0x3a>
 80022b8:	000003fe 	.word	0x000003fe
 80022bc:	0000041d 	.word	0x0000041d
 80022c0:	7fffffff 	.word	0x7fffffff
 80022c4:	00000433 	.word	0x00000433
 80022c8:	00000413 	.word	0x00000413
 80022cc:	fffffbed 	.word	0xfffffbed

080022d0 <__aeabi_i2d>:
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d016      	beq.n	8002304 <__aeabi_i2d+0x34>
 80022d6:	17c3      	asrs	r3, r0, #31
 80022d8:	18c5      	adds	r5, r0, r3
 80022da:	405d      	eors	r5, r3
 80022dc:	0fc4      	lsrs	r4, r0, #31
 80022de:	0028      	movs	r0, r5
 80022e0:	f000 f894 	bl	800240c <__clzsi2>
 80022e4:	4a11      	ldr	r2, [pc, #68]	; (800232c <__aeabi_i2d+0x5c>)
 80022e6:	1a12      	subs	r2, r2, r0
 80022e8:	280a      	cmp	r0, #10
 80022ea:	dc16      	bgt.n	800231a <__aeabi_i2d+0x4a>
 80022ec:	0003      	movs	r3, r0
 80022ee:	002e      	movs	r6, r5
 80022f0:	3315      	adds	r3, #21
 80022f2:	409e      	lsls	r6, r3
 80022f4:	230b      	movs	r3, #11
 80022f6:	1a18      	subs	r0, r3, r0
 80022f8:	40c5      	lsrs	r5, r0
 80022fa:	0553      	lsls	r3, r2, #21
 80022fc:	032d      	lsls	r5, r5, #12
 80022fe:	0b2d      	lsrs	r5, r5, #12
 8002300:	0d5b      	lsrs	r3, r3, #21
 8002302:	e003      	b.n	800230c <__aeabi_i2d+0x3c>
 8002304:	2400      	movs	r4, #0
 8002306:	2300      	movs	r3, #0
 8002308:	2500      	movs	r5, #0
 800230a:	2600      	movs	r6, #0
 800230c:	051b      	lsls	r3, r3, #20
 800230e:	432b      	orrs	r3, r5
 8002310:	07e4      	lsls	r4, r4, #31
 8002312:	4323      	orrs	r3, r4
 8002314:	0030      	movs	r0, r6
 8002316:	0019      	movs	r1, r3
 8002318:	bd70      	pop	{r4, r5, r6, pc}
 800231a:	380b      	subs	r0, #11
 800231c:	4085      	lsls	r5, r0
 800231e:	0553      	lsls	r3, r2, #21
 8002320:	032d      	lsls	r5, r5, #12
 8002322:	2600      	movs	r6, #0
 8002324:	0b2d      	lsrs	r5, r5, #12
 8002326:	0d5b      	lsrs	r3, r3, #21
 8002328:	e7f0      	b.n	800230c <__aeabi_i2d+0x3c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	0000041e 	.word	0x0000041e

08002330 <__aeabi_ui2d>:
 8002330:	b510      	push	{r4, lr}
 8002332:	1e04      	subs	r4, r0, #0
 8002334:	d010      	beq.n	8002358 <__aeabi_ui2d+0x28>
 8002336:	f000 f869 	bl	800240c <__clzsi2>
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <__aeabi_ui2d+0x48>)
 800233c:	1a1b      	subs	r3, r3, r0
 800233e:	280a      	cmp	r0, #10
 8002340:	dc11      	bgt.n	8002366 <__aeabi_ui2d+0x36>
 8002342:	220b      	movs	r2, #11
 8002344:	0021      	movs	r1, r4
 8002346:	1a12      	subs	r2, r2, r0
 8002348:	40d1      	lsrs	r1, r2
 800234a:	3015      	adds	r0, #21
 800234c:	030a      	lsls	r2, r1, #12
 800234e:	055b      	lsls	r3, r3, #21
 8002350:	4084      	lsls	r4, r0
 8002352:	0b12      	lsrs	r2, r2, #12
 8002354:	0d5b      	lsrs	r3, r3, #21
 8002356:	e001      	b.n	800235c <__aeabi_ui2d+0x2c>
 8002358:	2300      	movs	r3, #0
 800235a:	2200      	movs	r2, #0
 800235c:	051b      	lsls	r3, r3, #20
 800235e:	4313      	orrs	r3, r2
 8002360:	0020      	movs	r0, r4
 8002362:	0019      	movs	r1, r3
 8002364:	bd10      	pop	{r4, pc}
 8002366:	0022      	movs	r2, r4
 8002368:	380b      	subs	r0, #11
 800236a:	4082      	lsls	r2, r0
 800236c:	055b      	lsls	r3, r3, #21
 800236e:	0312      	lsls	r2, r2, #12
 8002370:	2400      	movs	r4, #0
 8002372:	0b12      	lsrs	r2, r2, #12
 8002374:	0d5b      	lsrs	r3, r3, #21
 8002376:	e7f1      	b.n	800235c <__aeabi_ui2d+0x2c>
 8002378:	0000041e 	.word	0x0000041e

0800237c <__aeabi_f2d>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	0043      	lsls	r3, r0, #1
 8002380:	0246      	lsls	r6, r0, #9
 8002382:	0fc4      	lsrs	r4, r0, #31
 8002384:	20fe      	movs	r0, #254	; 0xfe
 8002386:	0e1b      	lsrs	r3, r3, #24
 8002388:	1c59      	adds	r1, r3, #1
 800238a:	0a75      	lsrs	r5, r6, #9
 800238c:	4208      	tst	r0, r1
 800238e:	d00c      	beq.n	80023aa <__aeabi_f2d+0x2e>
 8002390:	22e0      	movs	r2, #224	; 0xe0
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4694      	mov	ip, r2
 8002396:	076d      	lsls	r5, r5, #29
 8002398:	0b36      	lsrs	r6, r6, #12
 800239a:	4463      	add	r3, ip
 800239c:	051b      	lsls	r3, r3, #20
 800239e:	4333      	orrs	r3, r6
 80023a0:	07e4      	lsls	r4, r4, #31
 80023a2:	4323      	orrs	r3, r4
 80023a4:	0028      	movs	r0, r5
 80023a6:	0019      	movs	r1, r3
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d114      	bne.n	80023d8 <__aeabi_f2d+0x5c>
 80023ae:	2d00      	cmp	r5, #0
 80023b0:	d01b      	beq.n	80023ea <__aeabi_f2d+0x6e>
 80023b2:	0028      	movs	r0, r5
 80023b4:	f000 f82a 	bl	800240c <__clzsi2>
 80023b8:	280a      	cmp	r0, #10
 80023ba:	dc1c      	bgt.n	80023f6 <__aeabi_f2d+0x7a>
 80023bc:	230b      	movs	r3, #11
 80023be:	002a      	movs	r2, r5
 80023c0:	1a1b      	subs	r3, r3, r0
 80023c2:	40da      	lsrs	r2, r3
 80023c4:	0003      	movs	r3, r0
 80023c6:	3315      	adds	r3, #21
 80023c8:	409d      	lsls	r5, r3
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <__aeabi_f2d+0x88>)
 80023cc:	0312      	lsls	r2, r2, #12
 80023ce:	1a1b      	subs	r3, r3, r0
 80023d0:	055b      	lsls	r3, r3, #21
 80023d2:	0b16      	lsrs	r6, r2, #12
 80023d4:	0d5b      	lsrs	r3, r3, #21
 80023d6:	e7e1      	b.n	800239c <__aeabi_f2d+0x20>
 80023d8:	2d00      	cmp	r5, #0
 80023da:	d009      	beq.n	80023f0 <__aeabi_f2d+0x74>
 80023dc:	0b32      	lsrs	r2, r6, #12
 80023de:	2680      	movs	r6, #128	; 0x80
 80023e0:	0336      	lsls	r6, r6, #12
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <__aeabi_f2d+0x8c>)
 80023e4:	076d      	lsls	r5, r5, #29
 80023e6:	4316      	orrs	r6, r2
 80023e8:	e7d8      	b.n	800239c <__aeabi_f2d+0x20>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2600      	movs	r6, #0
 80023ee:	e7d5      	b.n	800239c <__aeabi_f2d+0x20>
 80023f0:	2600      	movs	r6, #0
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <__aeabi_f2d+0x8c>)
 80023f4:	e7d2      	b.n	800239c <__aeabi_f2d+0x20>
 80023f6:	0003      	movs	r3, r0
 80023f8:	002a      	movs	r2, r5
 80023fa:	3b0b      	subs	r3, #11
 80023fc:	409a      	lsls	r2, r3
 80023fe:	2500      	movs	r5, #0
 8002400:	e7e3      	b.n	80023ca <__aeabi_f2d+0x4e>
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	00000389 	.word	0x00000389
 8002408:	000007ff 	.word	0x000007ff

0800240c <__clzsi2>:
 800240c:	211c      	movs	r1, #28
 800240e:	2301      	movs	r3, #1
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	4298      	cmp	r0, r3
 8002414:	d301      	bcc.n	800241a <__clzsi2+0xe>
 8002416:	0c00      	lsrs	r0, r0, #16
 8002418:	3910      	subs	r1, #16
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	4298      	cmp	r0, r3
 800241e:	d301      	bcc.n	8002424 <__clzsi2+0x18>
 8002420:	0a00      	lsrs	r0, r0, #8
 8002422:	3908      	subs	r1, #8
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	4298      	cmp	r0, r3
 8002428:	d301      	bcc.n	800242e <__clzsi2+0x22>
 800242a:	0900      	lsrs	r0, r0, #4
 800242c:	3904      	subs	r1, #4
 800242e:	a202      	add	r2, pc, #8	; (adr r2, 8002438 <__clzsi2+0x2c>)
 8002430:	5c10      	ldrb	r0, [r2, r0]
 8002432:	1840      	adds	r0, r0, r1
 8002434:	4770      	bx	lr
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	02020304 	.word	0x02020304
 800243c:	01010101 	.word	0x01010101
	...

08002448 <Error>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Error()/*Функция, вызываемая в случае возникновения ошибки*/
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);/*Выключение пользовательского светодиода*/
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <Error+0x18>)
 800244e:	2200      	movs	r2, #0
 8002450:	2104      	movs	r1, #4
 8002452:	0018      	movs	r0, r3
 8002454:	f001 f82a 	bl	80034ac <HAL_GPIO_WritePin>
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	48000400 	.word	0x48000400

08002464 <BME280I2Cx_WriteData>:
//------------------------------------------------//
void BME280I2Cx_WriteData(uint8_t Reg, uint8_t Value)/*Функция записи одного байта данных в заданный регистр*/
{
 8002464:	b5b0      	push	{r4, r5, r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af04      	add	r7, sp, #16
 800246a:	0002      	movs	r2, r0
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	1c0a      	adds	r2, r1, #0
 8002474:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002476:	250f      	movs	r5, #15
 8002478:	197b      	adds	r3, r7, r5
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&hi2c2, BME280_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);/*Функция
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b29a      	uxth	r2, r3
 8002484:	197c      	adds	r4, r7, r5
 8002486:	480c      	ldr	r0, [pc, #48]	; (80024b8 <BME280I2Cx_WriteData+0x54>)
 8002488:	23fa      	movs	r3, #250	; 0xfa
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	2301      	movs	r3, #1
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	1dbb      	adds	r3, r7, #6
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	21ec      	movs	r1, #236	; 0xec
 800249a:	f001 f8bb 	bl	8003614 <HAL_I2C_Mem_Write>
 800249e:	0003      	movs	r3, r0
 80024a0:	7023      	strb	r3, [r4, #0]
записи данных value в заданный регистр Reg датчика BME280*/
	if(status != HAL_OK)/*Если произошла проблема при записи данных,*/
 80024a2:	197b      	adds	r3, r7, r5
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <BME280I2Cx_WriteData+0x4a>
	{
		Error();/*Вызовем функцию ошибки*/
 80024aa:	f7ff ffcd 	bl	8002448 <Error>
	}
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b004      	add	sp, #16
 80024b4:	bdb0      	pop	{r4, r5, r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	20000208 	.word	0x20000208

080024bc <BME280I2Cx_ReadData>:
//------------------------------------------------//
uint8_t BME280I2Cx_ReadData(uint8_t Reg)/*Функция чтения одного байта данных из заданного регистра*/
{
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af04      	add	r7, sp, #16
 80024c2:	0002      	movs	r2, r0
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80024c8:	210f      	movs	r1, #15
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
	uint8_t value = 0;
 80024d0:	260e      	movs	r6, #14
 80024d2:	19bb      	adds	r3, r7, r6
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);/*Функция
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	000d      	movs	r5, r1
 80024e0:	187c      	adds	r4, r7, r1
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <BME280I2Cx_ReadData+0x5c>)
 80024e4:	23fa      	movs	r3, #250	; 0xfa
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	9302      	str	r3, [sp, #8]
 80024ea:	2301      	movs	r3, #1
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	19bb      	adds	r3, r7, r6
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2301      	movs	r3, #1
 80024f4:	21ec      	movs	r1, #236	; 0xec
 80024f6:	f001 f9bb 	bl	8003870 <HAL_I2C_Mem_Read>
 80024fa:	0003      	movs	r3, r0
 80024fc:	7023      	strb	r3, [r4, #0]
чтения данных в переменную value из заданного регистра Reg датчика BME280*/
	if(status != HAL_OK)/*Если произошла проблема при чтении данных,*/
 80024fe:	197b      	adds	r3, r7, r5
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <BME280I2Cx_ReadData+0x4e>
	{
		Error();/*Вызовем функцию ошибки*/
 8002506:	f7ff ff9f 	bl	8002448 <Error>
	}
	return value;/*Возвращаем прочитанное значение*/
 800250a:	230e      	movs	r3, #14
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	781b      	ldrb	r3, [r3, #0]
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	b005      	add	sp, #20
 8002516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002518:	20000208 	.word	0x20000208

0800251c <BME280_ReadReg_U16>:
//------------------------------------------------//
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)/*Функция чтения двух байт данных в беззнаковую переменную
value из заданного регистра*/
{
 800251c:	b5b0      	push	{r4, r5, r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af04      	add	r7, sp, #16
 8002522:	0002      	movs	r2, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800252a:	250f      	movs	r5, #15
 800252c:	197b      	adds	r3, r7, r5
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 1000);/*Функция
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b29a      	uxth	r2, r3
 8002538:	197c      	adds	r4, r7, r5
 800253a:	480c      	ldr	r0, [pc, #48]	; (800256c <BME280_ReadReg_U16+0x50>)
 800253c:	23fa      	movs	r3, #250	; 0xfa
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	2302      	movs	r3, #2
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	21ec      	movs	r1, #236	; 0xec
 800254e:	f001 f98f 	bl	8003870 <HAL_I2C_Mem_Read>
 8002552:	0003      	movs	r3, r0
 8002554:	7023      	strb	r3, [r4, #0]
чтения данных в переменную value из заданного регистра Reg датчика BME280*/
	if(status != HAL_OK)/*Если произошла проблема при чтении данных,*/
 8002556:	197b      	adds	r3, r7, r5
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <BME280_ReadReg_U16+0x46>
	{
		Error();/*Вызовем функцию ошибки*/
 800255e:	f7ff ff73 	bl	8002448 <Error>
	}
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b004      	add	sp, #16
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	20000208 	.word	0x20000208

08002570 <BME280_ReadReg_S16>:
//------------------------------------------------//
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)/*Функция чтения двух байт данных в знаковую переменную
value из заданного регистра*/
{
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af04      	add	r7, sp, #16
 8002576:	0002      	movs	r2, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	1dfb      	adds	r3, r7, #7
 800257c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800257e:	250f      	movs	r5, #15
 8002580:	197b      	adds	r3, r7, r5
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 1000);/*Функция
 8002586:	1dfb      	adds	r3, r7, #7
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b29a      	uxth	r2, r3
 800258c:	197c      	adds	r4, r7, r5
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <BME280_ReadReg_S16+0x50>)
 8002590:	23fa      	movs	r3, #250	; 0xfa
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	9302      	str	r3, [sp, #8]
 8002596:	2302      	movs	r3, #2
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2301      	movs	r3, #1
 80025a0:	21ec      	movs	r1, #236	; 0xec
 80025a2:	f001 f965 	bl	8003870 <HAL_I2C_Mem_Read>
 80025a6:	0003      	movs	r3, r0
 80025a8:	7023      	strb	r3, [r4, #0]
чтения данных в переменную value из заданного регистра Reg датчика BME280*/
	if(status != HAL_OK)/*Если произошла проблема при чтении данных,*/
 80025aa:	197b      	adds	r3, r7, r5
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <BME280_ReadReg_S16+0x46>
	{
		Error();/*Вызовем функцию ошибки*/
 80025b2:	f7ff ff49 	bl	8002448 <Error>
	}
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bdb0      	pop	{r4, r5, r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	20000208 	.word	0x20000208

080025c4 <BME280_ReadReg_S24>:
//------------------------------------------------//
void BME280_ReadReg_S24(uint8_t Reg, int32_t *Value)/*Функция чтения трёх байт данных в знаковую переменную value из заданного регистра*/
{
 80025c4:	b5b0      	push	{r4, r5, r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	0002      	movs	r2, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	1dfb      	adds	r3, r7, #7
 80025d0:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80025d2:	250f      	movs	r5, #15
 80025d4:	197b      	adds	r3, r7, r5
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 1000);/*Функция
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	197c      	adds	r4, r7, r5
 80025e2:	4817      	ldr	r0, [pc, #92]	; (8002640 <BME280_ReadReg_S24+0x7c>)
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	2303      	movs	r3, #3
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	21ec      	movs	r1, #236	; 0xec
 80025f6:	f001 f93b 	bl	8003870 <HAL_I2C_Mem_Read>
 80025fa:	0003      	movs	r3, r0
 80025fc:	7023      	strb	r3, [r4, #0]
чтения данных в переменную value из заданного регистра Reg датчика BME280*/
	if(status != HAL_OK)/*Если произошла проблема при чтении данных,*/
 80025fe:	197b      	adds	r3, r7, r5
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <BME280_ReadReg_S24+0x46>
	{
		Error();/*Вызовем функцию ошибки*/
 8002606:	f7ff ff1f 	bl	8002448 <Error>
	}
	*(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;/*Замена местами байт слова*/
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0c1b      	lsrs	r3, r3, #16
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	401a      	ands	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	23ff      	movs	r3, #255	; 0xff
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	400b      	ands	r3, r1
 800261e:	431a      	orrs	r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0419      	lsls	r1, r3, #16
 8002626:	23ff      	movs	r3, #255	; 0xff
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	400b      	ands	r3, r1
 800262c:	4313      	orrs	r3, r2
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	0a1a      	lsrs	r2, r3, #8
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	601a      	str	r2, [r3, #0]
}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bdb0      	pop	{r4, r5, r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	20000208 	.word	0x20000208

08002644 <BME280_Init>:
//------------------------------------------------//
void BME280_Init()/*Функция инициализации BME280*/
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
	uint32_t value32=0;
 8002650:	2300      	movs	r3, #0
 8002652:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);/*Зажигаем пользовательский светодиод*/
 8002654:	4b84      	ldr	r3, [pc, #528]	; (8002868 <BME280_Init+0x224>)
 8002656:	2201      	movs	r2, #1
 8002658:	2104      	movs	r1, #4
 800265a:	0018      	movs	r0, r3
 800265c:	f000 ff26 	bl	80034ac <HAL_GPIO_WritePin>
	value = BME280I2Cx_ReadData(BME280_REG_ID);/*Считаем ID датчика*/
 8002660:	1dfc      	adds	r4, r7, #7
 8002662:	20d0      	movs	r0, #208	; 0xd0
 8002664:	f7ff ff2a 	bl	80024bc <BME280I2Cx_ReadData>
 8002668:	0003      	movs	r3, r0
 800266a:	7023      	strb	r3, [r4, #0]
	sprintf(str, "ID: 0x%02X\n", value);/*Запишем в строку считанные данные*/
 800266c:	1dfb      	adds	r3, r7, #7
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	497e      	ldr	r1, [pc, #504]	; (800286c <BME280_Init+0x228>)
 8002672:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <BME280_Init+0x22c>)
 8002674:	0018      	movs	r0, r3
 8002676:	f003 fb0b 	bl	8005c90 <siprintf>
	HAL_UART_Transmit(&huart4,(uint8_t*)str,strlen(str),1000);/*Передадим строку по UART*/
 800267a:	4b7d      	ldr	r3, [pc, #500]	; (8002870 <BME280_Init+0x22c>)
 800267c:	0018      	movs	r0, r3
 800267e:	f7fd fd43 	bl	8000108 <strlen>
 8002682:	0003      	movs	r3, r0
 8002684:	b29a      	uxth	r2, r3
 8002686:	23fa      	movs	r3, #250	; 0xfa
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4979      	ldr	r1, [pc, #484]	; (8002870 <BME280_Init+0x22c>)
 800268c:	4879      	ldr	r0, [pc, #484]	; (8002874 <BME280_Init+0x230>)
 800268e:	f002 fa61 	bl	8004b54 <HAL_UART_Transmit>
	if(value !=BME280_ID)/*Если считанные данные не равны ID датчика, то*/
 8002692:	1dfb      	adds	r3, r7, #7
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b60      	cmp	r3, #96	; 0x60
 8002698:	d001      	beq.n	800269e <BME280_Init+0x5a>
	{
		Error();/*Вызовем функцию ошибки*/
 800269a:	f7ff fed5 	bl	8002448 <Error>
	}
	BME280I2Cx_WriteData(BME280_REG_SOFTRESET, BME280_SOFTRESET_VALUE);/*Перезагрузим датчик*/
 800269e:	21b6      	movs	r1, #182	; 0xb6
 80026a0:	20e0      	movs	r0, #224	; 0xe0
 80026a2:	f7ff fedf 	bl	8002464 <BME280I2Cx_WriteData>
	while (BME280I2Cx_ReadData(BME280_REGISTER_STATUS)&0x09 & BME280_STATUS_IM_UPDATE);/*Проверяем статус датчика,
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	20f3      	movs	r0, #243	; 0xf3
 80026aa:	f7ff ff07 	bl	80024bc <BME280I2Cx_ReadData>
 80026ae:	0003      	movs	r3, r0
 80026b0:	001a      	movs	r2, r3
 80026b2:	2301      	movs	r3, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d1f7      	bne.n	80026a8 <BME280_Init+0x64>
готов ли датчик к работе*/
	/*Считаем калибровочные коэффициенты температуры датчика и передадим каждый из коэффициентов по UART*/
	BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 80026b8:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <BME280_Init+0x234>)
 80026ba:	0019      	movs	r1, r3
 80026bc:	2088      	movs	r0, #136	; 0x88
 80026be:	f7ff ff2d 	bl	800251c <BME280_ReadReg_U16>
	sprintf(str, "DIG_T1: %u\n", CalibData.dig_T1);
 80026c2:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <BME280_Init+0x234>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	001a      	movs	r2, r3
 80026c8:	496c      	ldr	r1, [pc, #432]	; (800287c <BME280_Init+0x238>)
 80026ca:	4b69      	ldr	r3, [pc, #420]	; (8002870 <BME280_Init+0x22c>)
 80026cc:	0018      	movs	r0, r3
 80026ce:	f003 fadf 	bl	8005c90 <siprintf>
	HAL_UART_Transmit(&huart4,(uint8_t*)str,strlen(str),1000);
 80026d2:	4b67      	ldr	r3, [pc, #412]	; (8002870 <BME280_Init+0x22c>)
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7fd fd17 	bl	8000108 <strlen>
 80026da:	0003      	movs	r3, r0
 80026dc:	b29a      	uxth	r2, r3
 80026de:	23fa      	movs	r3, #250	; 0xfa
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4963      	ldr	r1, [pc, #396]	; (8002870 <BME280_Init+0x22c>)
 80026e4:	4863      	ldr	r0, [pc, #396]	; (8002874 <BME280_Init+0x230>)
 80026e6:	f002 fa35 	bl	8004b54 <HAL_UART_Transmit>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 80026ea:	4b65      	ldr	r3, [pc, #404]	; (8002880 <BME280_Init+0x23c>)
 80026ec:	0019      	movs	r1, r3
 80026ee:	208a      	movs	r0, #138	; 0x8a
 80026f0:	f7ff ff3e 	bl	8002570 <BME280_ReadReg_S16>
	sprintf(str, "DIG_T2: %d\n", CalibData.dig_T2);
 80026f4:	4b60      	ldr	r3, [pc, #384]	; (8002878 <BME280_Init+0x234>)
 80026f6:	2202      	movs	r2, #2
 80026f8:	5e9b      	ldrsh	r3, [r3, r2]
 80026fa:	001a      	movs	r2, r3
 80026fc:	4961      	ldr	r1, [pc, #388]	; (8002884 <BME280_Init+0x240>)
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <BME280_Init+0x22c>)
 8002700:	0018      	movs	r0, r3
 8002702:	f003 fac5 	bl	8005c90 <siprintf>
	HAL_UART_Transmit(&huart4,(uint8_t*)str,strlen(str),1000);
 8002706:	4b5a      	ldr	r3, [pc, #360]	; (8002870 <BME280_Init+0x22c>)
 8002708:	0018      	movs	r0, r3
 800270a:	f7fd fcfd 	bl	8000108 <strlen>
 800270e:	0003      	movs	r3, r0
 8002710:	b29a      	uxth	r2, r3
 8002712:	23fa      	movs	r3, #250	; 0xfa
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4956      	ldr	r1, [pc, #344]	; (8002870 <BME280_Init+0x22c>)
 8002718:	4856      	ldr	r0, [pc, #344]	; (8002874 <BME280_Init+0x230>)
 800271a:	f002 fa1b 	bl	8004b54 <HAL_UART_Transmit>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 800271e:	4b5a      	ldr	r3, [pc, #360]	; (8002888 <BME280_Init+0x244>)
 8002720:	0019      	movs	r1, r3
 8002722:	208c      	movs	r0, #140	; 0x8c
 8002724:	f7ff ff24 	bl	8002570 <BME280_ReadReg_S16>
	sprintf(str, "DIG_T3: %d\n", CalibData.dig_T3);
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <BME280_Init+0x234>)
 800272a:	2204      	movs	r2, #4
 800272c:	5e9b      	ldrsh	r3, [r3, r2]
 800272e:	001a      	movs	r2, r3
 8002730:	4956      	ldr	r1, [pc, #344]	; (800288c <BME280_Init+0x248>)
 8002732:	4b4f      	ldr	r3, [pc, #316]	; (8002870 <BME280_Init+0x22c>)
 8002734:	0018      	movs	r0, r3
 8002736:	f003 faab 	bl	8005c90 <siprintf>
	HAL_UART_Transmit(&huart4,(uint8_t*)str,strlen(str),1000);
 800273a:	4b4d      	ldr	r3, [pc, #308]	; (8002870 <BME280_Init+0x22c>)
 800273c:	0018      	movs	r0, r3
 800273e:	f7fd fce3 	bl	8000108 <strlen>
 8002742:	0003      	movs	r3, r0
 8002744:	b29a      	uxth	r2, r3
 8002746:	23fa      	movs	r3, #250	; 0xfa
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4949      	ldr	r1, [pc, #292]	; (8002870 <BME280_Init+0x22c>)
 800274c:	4849      	ldr	r0, [pc, #292]	; (8002874 <BME280_Init+0x230>)
 800274e:	f002 fa01 	bl	8004b54 <HAL_UART_Transmit>
	/*Зададим время ожидания датчика*/
	value = BME280I2Cx_ReadData(BME280_REG_CONFIG) & ~BME280_STBY_MSK;/*Считаем данные из регистра*/
 8002752:	20f5      	movs	r0, #245	; 0xf5
 8002754:	f7ff feb2 	bl	80024bc <BME280I2Cx_ReadData>
 8002758:	0003      	movs	r3, r0
 800275a:	0019      	movs	r1, r3
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	221f      	movs	r2, #31
 8002760:	400a      	ands	r2, r1
 8002762:	701a      	strb	r2, [r3, #0]
	value |= BME280_STBY_1000 & BME280_STBY_MSK;/*Перезапишем именно те биты, которые отвечают за время ожидания*/
 8002764:	1dfb      	adds	r3, r7, #7
 8002766:	1dfa      	adds	r2, r7, #7
 8002768:	7812      	ldrb	r2, [r2, #0]
 800276a:	2160      	movs	r1, #96	; 0x60
 800276c:	4249      	negs	r1, r1
 800276e:	430a      	orrs	r2, r1
 8002770:	701a      	strb	r2, [r3, #0]
	BME280I2Cx_WriteData(BME280_REG_CONFIG,value);/*Запишем новые данные в регистр конфигурации BME280*/
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	0019      	movs	r1, r3
 8002778:	20f5      	movs	r0, #245	; 0xf5
 800277a:	f7ff fe73 	bl	8002464 <BME280I2Cx_WriteData>
	/*Зададим постоянную времени фильтра*/
	value = BME280I2Cx_ReadData(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;/*Считаем данные из регистра*/
 800277e:	20f5      	movs	r0, #245	; 0xf5
 8002780:	f7ff fe9c 	bl	80024bc <BME280I2Cx_ReadData>
 8002784:	0003      	movs	r3, r0
 8002786:	0019      	movs	r1, r3
 8002788:	1dfb      	adds	r3, r7, #7
 800278a:	221c      	movs	r2, #28
 800278c:	4391      	bics	r1, r2
 800278e:	000a      	movs	r2, r1
 8002790:	701a      	strb	r2, [r3, #0]
	value |= BME280_FILTER_4 & BME280_FILTER_MSK;/*Перезапишем биты, которые отвечают за постоянную времени фильтра*/
 8002792:	1dfb      	adds	r3, r7, #7
 8002794:	1dfa      	adds	r2, r7, #7
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	2108      	movs	r1, #8
 800279a:	430a      	orrs	r2, r1
 800279c:	701a      	strb	r2, [r3, #0]
	BME280I2Cx_WriteData(BME280_REG_CONFIG,value);/*Запишем новые данные в регистр конфигурации BME280*/
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	0019      	movs	r1, r3
 80027a4:	20f5      	movs	r0, #245	; 0xf5
 80027a6:	f7ff fe5d 	bl	8002464 <BME280I2Cx_WriteData>
	/*Настроим параметры сбора данных температуры*/
	value = BME280I2Cx_ReadData(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;/*Считаем данные из регистра*/
 80027aa:	20f4      	movs	r0, #244	; 0xf4
 80027ac:	f7ff fe86 	bl	80024bc <BME280I2Cx_ReadData>
 80027b0:	0003      	movs	r3, r0
 80027b2:	0019      	movs	r1, r3
 80027b4:	1dfb      	adds	r3, r7, #7
 80027b6:	221f      	movs	r2, #31
 80027b8:	400a      	ands	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]
	value |= BME280_OSRS_T_x4 & BME280_OSRS_T_MSK;/*Перезапишем биты, которые отвечают за преддискретизацию температуры*/
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	1dfa      	adds	r2, r7, #7
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	2160      	movs	r1, #96	; 0x60
 80027c4:	430a      	orrs	r2, r1
 80027c6:	701a      	strb	r2, [r3, #0]
	BME280I2Cx_WriteData(BME280_REG_CTRL_MEAS,value);/*Запишем новые данные в регистр параметров сбора данных*/
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	0019      	movs	r1, r3
 80027ce:	20f4      	movs	r0, #244	; 0xf4
 80027d0:	f7ff fe48 	bl	8002464 <BME280I2Cx_WriteData>
	value32 = BME280I2Cx_ReadData(BME280_REG_CTRL_MEAS);/*Считаем данные из регистра параметров сбора данных*/
 80027d4:	20f4      	movs	r0, #244	; 0xf4
 80027d6:	f7ff fe71 	bl	80024bc <BME280I2Cx_ReadData>
 80027da:	0003      	movs	r3, r0
 80027dc:	603b      	str	r3, [r7, #0]
	sprintf(str, "Measurements status: %04X\n", value32);/*Запишем в строку считанные данные*/
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	492b      	ldr	r1, [pc, #172]	; (8002890 <BME280_Init+0x24c>)
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <BME280_Init+0x22c>)
 80027e4:	0018      	movs	r0, r3
 80027e6:	f003 fa53 	bl	8005c90 <siprintf>
	HAL_UART_Transmit(&huart4,(uint8_t*)str,strlen(str),1000);/*Передадим строку по UART*/
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <BME280_Init+0x22c>)
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fd fc8b 	bl	8000108 <strlen>
 80027f2:	0003      	movs	r3, r0
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	23fa      	movs	r3, #250	; 0xfa
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	491d      	ldr	r1, [pc, #116]	; (8002870 <BME280_Init+0x22c>)
 80027fc:	481d      	ldr	r0, [pc, #116]	; (8002874 <BME280_Init+0x230>)
 80027fe:	f002 f9a9 	bl	8004b54 <HAL_UART_Transmit>
	sprintf(str, "Temperature: %s\n",
			(value32 & BME280_OSRS_T_MSK) ? "ON" : "OFF");/*Запишем в строку считанные данные и, если всё в порядке,
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	22e0      	movs	r2, #224	; 0xe0
 8002806:	4013      	ands	r3, r2
	sprintf(str, "Temperature: %s\n",
 8002808:	d001      	beq.n	800280e <BME280_Init+0x1ca>
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <BME280_Init+0x250>)
 800280c:	e000      	b.n	8002810 <BME280_Init+0x1cc>
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <BME280_Init+0x254>)
 8002810:	4922      	ldr	r1, [pc, #136]	; (800289c <BME280_Init+0x258>)
 8002812:	4817      	ldr	r0, [pc, #92]	; (8002870 <BME280_Init+0x22c>)
 8002814:	001a      	movs	r2, r3
 8002816:	f003 fa3b 	bl	8005c90 <siprintf>
			то в строку пропишем ON, иначе OFF*/
	HAL_UART_Transmit(&huart4,(uint8_t*)str,strlen(str),1000);/*Передадим строку по UART*/
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <BME280_Init+0x22c>)
 800281c:	0018      	movs	r0, r3
 800281e:	f7fd fc73 	bl	8000108 <strlen>
 8002822:	0003      	movs	r3, r0
 8002824:	b29a      	uxth	r2, r3
 8002826:	23fa      	movs	r3, #250	; 0xfa
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4911      	ldr	r1, [pc, #68]	; (8002870 <BME280_Init+0x22c>)
 800282c:	4811      	ldr	r0, [pc, #68]	; (8002874 <BME280_Init+0x230>)
 800282e:	f002 f991 	bl	8004b54 <HAL_UART_Transmit>
	/*Настроим режим работы*/
	value = BME280I2Cx_ReadData(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;/*Считаем данные из регистра параметров сбора данных*/
 8002832:	20f4      	movs	r0, #244	; 0xf4
 8002834:	f7ff fe42 	bl	80024bc <BME280I2Cx_ReadData>
 8002838:	0003      	movs	r3, r0
 800283a:	0019      	movs	r1, r3
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	2203      	movs	r2, #3
 8002840:	4391      	bics	r1, r2
 8002842:	000a      	movs	r2, r1
 8002844:	701a      	strb	r2, [r3, #0]
	value |= BME280_MODE_NORMAL & BME280_MODE_MSK;/*Перезапишем биты, которые отвечают за настройку режима работы BME280*/
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	1dfa      	adds	r2, r7, #7
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	2103      	movs	r1, #3
 800284e:	430a      	orrs	r2, r1
 8002850:	701a      	strb	r2, [r3, #0]
	BME280I2Cx_WriteData(BME280_REG_CTRL_MEAS,value);/*Запишем новые данные в регистр параметров сбора данных*/
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	0019      	movs	r1, r3
 8002858:	20f4      	movs	r0, #244	; 0xf4
 800285a:	f7ff fe03 	bl	8002464 <BME280I2Cx_WriteData>
}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b003      	add	sp, #12
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	48000400 	.word	0x48000400
 800286c:	08008250 	.word	0x08008250
 8002870:	200002e0 	.word	0x200002e0
 8002874:	2000025c 	.word	0x2000025c
 8002878:	20000254 	.word	0x20000254
 800287c:	0800825c 	.word	0x0800825c
 8002880:	20000256 	.word	0x20000256
 8002884:	08008268 	.word	0x08008268
 8002888:	20000258 	.word	0x20000258
 800288c:	08008274 	.word	0x08008274
 8002890:	08008280 	.word	0x08008280
 8002894:	0800829c 	.word	0x0800829c
 8002898:	080082a0 	.word	0x080082a0
 800289c:	080082a4 	.word	0x080082a4

080028a0 <BME280_ReadTemperature>:
//------------------------------------------------//
float BME280_ReadTemperature()/*Функция чтения температуры*/
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
	float temper_float = 0.0f;/*Переменная типа Float (с плавающей точкой), куда записывается значение температуры*/
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
	int32_t temper_raw; /*Вспомогательная знаковая переменная, в которое переводятся полученные из регистра датчика данные*/
	int32_t temper_int;/*Переменная типа Integer, куда записывается значение температуры*/
	int32_t val1, val2;/*Вспомогательные переменные для вычисления температуры*/
	BME280_ReadReg_S24(BME280_REGISTER_TEMPDATA,&temper_raw);/*Читаем данные из регистра данных температуры*/
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	0019      	movs	r1, r3
 80028ae:	20fa      	movs	r0, #250	; 0xfa
 80028b0:	f7ff fe88 	bl	80025c4 <BME280_ReadReg_S24>
	temper_raw >>= 4;/*Сдвигаем переменную на 4 бита вправо, т.к. четыре самых младших бита не участвуют в показаниях*/
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	111b      	asrs	r3, r3, #4
 80028b8:	607b      	str	r3, [r7, #4]
	/*Далее используем программный код, предлагаемый в документации от производителя, p.25*/
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	10da      	asrs	r2, r3, #3
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <BME280_ReadTemperature+0x8c>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	1ad3      	subs	r3, r2, r3
			((int32_t)CalibData.dig_T2)) >> 11;
 80028c6:	4a19      	ldr	r2, [pc, #100]	; (800292c <BME280_ReadTemperature+0x8c>)
 80028c8:	2102      	movs	r1, #2
 80028ca:	5e52      	ldrsh	r2, [r2, r1]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80028cc:	4353      	muls	r3, r2
 80028ce:	12db      	asrs	r3, r3, #11
 80028d0:	613b      	str	r3, [r7, #16]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	111b      	asrs	r3, r3, #4
 80028d6:	4a15      	ldr	r2, [pc, #84]	; (800292c <BME280_ReadTemperature+0x8c>)
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	1a9b      	subs	r3, r3, r2
			((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	1112      	asrs	r2, r2, #4
 80028e0:	4912      	ldr	r1, [pc, #72]	; (800292c <BME280_ReadTemperature+0x8c>)
 80028e2:	8809      	ldrh	r1, [r1, #0]
 80028e4:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80028e6:	4353      	muls	r3, r2
			((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80028e8:	131b      	asrs	r3, r3, #12
			((int32_t)CalibData.dig_T3)) >> 14;
 80028ea:	4a10      	ldr	r2, [pc, #64]	; (800292c <BME280_ReadTemperature+0x8c>)
 80028ec:	2104      	movs	r1, #4
 80028ee:	5e52      	ldrsh	r2, [r2, r1]
			((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80028f0:	4353      	muls	r3, r2
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80028f2:	139b      	asrs	r3, r3, #14
 80028f4:	60fb      	str	r3, [r7, #12]
	temper_int = val1 + val2;
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	18d3      	adds	r3, r2, r3
 80028fc:	60bb      	str	r3, [r7, #8]
	temper_float = ((temper_int * 5 + 128) >> 8);
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	0013      	movs	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	189b      	adds	r3, r3, r2
 8002906:	3380      	adds	r3, #128	; 0x80
 8002908:	121b      	asrs	r3, r3, #8
 800290a:	0018      	movs	r0, r3
 800290c:	f7fd fed8 	bl	80006c0 <__aeabi_i2f>
 8002910:	1c03      	adds	r3, r0, #0
 8002912:	617b      	str	r3, [r7, #20]
	temper_float /= 100.0f;/*Поделим вычисленные данные на 100, чтобы привести данные к удобному для чтения виду*/
 8002914:	4906      	ldr	r1, [pc, #24]	; (8002930 <BME280_ReadTemperature+0x90>)
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7fd fdc6 	bl	80004a8 <__aeabi_fdiv>
 800291c:	1c03      	adds	r3, r0, #0
 800291e:	617b      	str	r3, [r7, #20]
	return temper_float;/*Возвращаем вычисленное в функции значение*/
 8002920:	697b      	ldr	r3, [r7, #20]
}
 8002922:	1c18      	adds	r0, r3, #0
 8002924:	46bd      	mov	sp, r7
 8002926:	b006      	add	sp, #24
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	20000254 	.word	0x20000254
 8002930:	42c80000 	.word	0x42c80000

08002934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002938:	f000 fb04 	bl	8002f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800293c:	f000 f832 	bl	80029a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002940:	f000 f8e2 	bl	8002b08 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002944:	f000 f86e 	bl	8002a24 <MX_I2C2_Init>
  MX_USART4_UART_Init();
 8002948:	f000 f8ac 	bl	8002aa4 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  BME280_Init();/*Запустим функцию инициализации датчика BME280*/
 800294c:	f7ff fe7a 	bl	8002644 <BME280_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  tf = BME280_ReadTemperature();/*Считаем значение температуры из функции вычисления температуры*/
 8002950:	f7ff ffa6 	bl	80028a0 <BME280_ReadTemperature>
 8002954:	1c02      	adds	r2, r0, #0
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <main+0x60>)
 8002958:	601a      	str	r2, [r3, #0]
	  sprintf(str, "Temperature: %.2f *C\n\n", tf);/*Запишем в строку считанное из функции значение температуры*/
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <main+0x60>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1c18      	adds	r0, r3, #0
 8002960:	f7ff fd0c 	bl	800237c <__aeabi_f2d>
 8002964:	0002      	movs	r2, r0
 8002966:	000b      	movs	r3, r1
 8002968:	490b      	ldr	r1, [pc, #44]	; (8002998 <main+0x64>)
 800296a:	480c      	ldr	r0, [pc, #48]	; (800299c <main+0x68>)
 800296c:	f003 f990 	bl	8005c90 <siprintf>
	  HAL_UART_Transmit(&huart4,(uint8_t*)str,strlen(str),1000);/*Передадим строку по UART*/
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <main+0x68>)
 8002972:	0018      	movs	r0, r3
 8002974:	f7fd fbc8 	bl	8000108 <strlen>
 8002978:	0003      	movs	r3, r0
 800297a:	b29a      	uxth	r2, r3
 800297c:	23fa      	movs	r3, #250	; 0xfa
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4906      	ldr	r1, [pc, #24]	; (800299c <main+0x68>)
 8002982:	4807      	ldr	r0, [pc, #28]	; (80029a0 <main+0x6c>)
 8002984:	f002 f8e6 	bl	8004b54 <HAL_UART_Transmit>
	  HAL_Delay(1000);/*Организуем временную задержку в 1000мс*/
 8002988:	23fa      	movs	r3, #250	; 0xfa
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	0018      	movs	r0, r3
 800298e:	f000 fb3d 	bl	800300c <HAL_Delay>
	  tf = BME280_ReadTemperature();/*Считаем значение температуры из функции вычисления температуры*/
 8002992:	e7dd      	b.n	8002950 <main+0x1c>
 8002994:	200001f8 	.word	0x200001f8
 8002998:	080082b8 	.word	0x080082b8
 800299c:	200002e0 	.word	0x200002e0
 80029a0:	2000025c 	.word	0x2000025c

080029a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b093      	sub	sp, #76	; 0x4c
 80029a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029aa:	2414      	movs	r4, #20
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	0018      	movs	r0, r3
 80029b0:	2334      	movs	r3, #52	; 0x34
 80029b2:	001a      	movs	r2, r3
 80029b4:	2100      	movs	r1, #0
 80029b6:	f002 fce9 	bl	800538c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	0018      	movs	r0, r3
 80029be:	2310      	movs	r3, #16
 80029c0:	001a      	movs	r2, r3
 80029c2:	2100      	movs	r1, #0
 80029c4:	f002 fce2 	bl	800538c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029c8:	0021      	movs	r1, r4
 80029ca:	187b      	adds	r3, r7, r1
 80029cc:	2202      	movs	r2, #2
 80029ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2201      	movs	r2, #1
 80029d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	2210      	movs	r2, #16
 80029da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	0018      	movs	r0, r3
 80029e6:	f001 fb61 	bl	80040ac <HAL_RCC_OscConfig>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d001      	beq.n	80029f2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80029ee:	f000 f8e1 	bl	8002bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2207      	movs	r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2200      	movs	r2, #0
 80029fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f001 fed2 	bl	80047b8 <HAL_RCC_ClockConfig>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d001      	beq.n	8002a1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002a18:	f000 f8cc 	bl	8002bb4 <Error_Handler>
  }
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b013      	add	sp, #76	; 0x4c
 8002a22:	bd90      	pop	{r4, r7, pc}

08002a24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a2a:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <MX_I2C2_Init+0x78>)
 8002a2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a30:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <MX_I2C2_Init+0x7c>)
 8002a32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 fd41 	bl	80034e8 <HAL_I2C_Init>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d001      	beq.n	8002a6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002a6a:	f000 f8a3 	bl	8002bb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a70:	2100      	movs	r1, #0
 8002a72:	0018      	movs	r0, r3
 8002a74:	f001 fa82 	bl	8003f7c <HAL_I2CEx_ConfigAnalogFilter>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002a7c:	f000 f89a 	bl	8002bb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <MX_I2C2_Init+0x74>)
 8002a82:	2100      	movs	r1, #0
 8002a84:	0018      	movs	r0, r3
 8002a86:	f001 fac5 	bl	8004014 <HAL_I2CEx_ConfigDigitalFilter>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002a8e:	f000 f891 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000208 	.word	0x20000208
 8002a9c:	40005800 	.word	0x40005800
 8002aa0:	2000090e 	.word	0x2000090e

08002aa4 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8002aa8:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002aaa:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <MX_USART4_UART_Init+0x60>)
 8002aac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002aae:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002ab0:	2296      	movs	r2, #150	; 0x96
 8002ab2:	0192      	lsls	r2, r2, #6
 8002ab4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	0152      	lsls	r2, r2, #5
 8002abc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	00d2      	lsls	r2, r2, #3
 8002aca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002ace:	220c      	movs	r2, #12
 8002ad0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <MX_USART4_UART_Init+0x5c>)
 8002aec:	0018      	movs	r0, r3
 8002aee:	f001 ffdd 	bl	8004aac <HAL_UART_Init>
 8002af2:	1e03      	subs	r3, r0, #0
 8002af4:	d001      	beq.n	8002afa <MX_USART4_UART_Init+0x56>
  {
    Error_Handler();
 8002af6:	f000 f85d 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2000025c 	.word	0x2000025c
 8002b04:	40004c00 	.word	0x40004c00

08002b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0e:	240c      	movs	r4, #12
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	0018      	movs	r0, r3
 8002b14:	2314      	movs	r3, #20
 8002b16:	001a      	movs	r2, r3
 8002b18:	2100      	movs	r1, #0
 8002b1a:	f002 fc37 	bl	800538c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	03c9      	lsls	r1, r1, #15
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	615a      	str	r2, [r3, #20]
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	03db      	lsls	r3, r3, #15
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0289      	lsls	r1, r1, #10
 8002b44:	430a      	orrs	r2, r1
 8002b46:	615a      	str	r2, [r3, #20]
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	4013      	ands	r3, r2
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	02c9      	lsls	r1, r1, #11
 8002b60:	430a      	orrs	r2, r1
 8002b62:	615a      	str	r2, [r3, #20]
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	02db      	lsls	r3, r3, #11
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <MX_GPIO_Init+0xa8>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	2104      	movs	r1, #4
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 fc97 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002b7e:	0021      	movs	r1, r4
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	2204      	movs	r2, #4
 8002b84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	2201      	movs	r2, #1
 8002b8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2200      	movs	r2, #0
 8002b96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <MX_GPIO_Init+0xa8>)
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	0010      	movs	r0, r2
 8002ba0:	f000 fb0c 	bl	80031bc <HAL_GPIO_Init>

}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b009      	add	sp, #36	; 0x24
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	48000400 	.word	0x48000400

08002bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
}
 8002bba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <Error_Handler+0x8>
	...

08002bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_MspInit+0x44>)
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_MspInit+0x44>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	619a      	str	r2, [r3, #24]
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_MspInit+0x44>)
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_MspInit+0x44>)
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_MspInit+0x44>)
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	0549      	lsls	r1, r1, #21
 8002be8:	430a      	orrs	r2, r1
 8002bea:	61da      	str	r2, [r3, #28]
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_MspInit+0x44>)
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	055b      	lsls	r3, r3, #21
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b08b      	sub	sp, #44	; 0x2c
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	2414      	movs	r4, #20
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	0018      	movs	r0, r3
 8002c16:	2314      	movs	r3, #20
 8002c18:	001a      	movs	r2, r3
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f002 fbb6 	bl	800538c <memset>
  if(hi2c->Instance==I2C2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <HAL_I2C_MspInit+0x90>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d132      	bne.n	8002c90 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <HAL_I2C_MspInit+0x94>)
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_I2C_MspInit+0x94>)
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	02c9      	lsls	r1, r1, #11
 8002c34:	430a      	orrs	r2, r1
 8002c36:	615a      	str	r2, [r3, #20]
 8002c38:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <HAL_I2C_MspInit+0x94>)
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	02db      	lsls	r3, r3, #11
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c46:	193b      	adds	r3, r7, r4
 8002c48:	22c0      	movs	r2, #192	; 0xc0
 8002c4a:	0112      	lsls	r2, r2, #4
 8002c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c4e:	0021      	movs	r1, r4
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2212      	movs	r2, #18
 8002c54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	2201      	movs	r2, #1
 8002c66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_I2C_MspInit+0x98>)
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	0010      	movs	r0, r2
 8002c70:	f000 faa4 	bl	80031bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_I2C_MspInit+0x94>)
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_I2C_MspInit+0x94>)
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	03c9      	lsls	r1, r1, #15
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	61da      	str	r2, [r3, #28]
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_I2C_MspInit+0x94>)
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	03db      	lsls	r3, r3, #15
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b00b      	add	sp, #44	; 0x2c
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	40005800 	.word	0x40005800
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	48000400 	.word	0x48000400

08002ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b08b      	sub	sp, #44	; 0x2c
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	2414      	movs	r4, #20
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	2314      	movs	r3, #20
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f002 fb68 	bl	800538c <memset>
  if(huart->Instance==USART4)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_UART_MspInit+0x90>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d132      	bne.n	8002d2c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_UART_MspInit+0x94>)
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_UART_MspInit+0x94>)
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	0309      	lsls	r1, r1, #12
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
 8002cd4:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_UART_MspInit+0x94>)
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	031b      	lsls	r3, r3, #12
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_UART_MspInit+0x94>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_UART_MspInit+0x94>)
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0289      	lsls	r1, r1, #10
 8002cec:	430a      	orrs	r2, r1
 8002cee:	615a      	str	r2, [r3, #20]
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_UART_MspInit+0x94>)
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	029b      	lsls	r3, r3, #10
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART4 GPIO Configuration
    PA0     ------> USART4_TX
    PA1     ------> USART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cfe:	0021      	movs	r1, r4
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2203      	movs	r2, #3
 8002d04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2202      	movs	r2, #2
 8002d0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2203      	movs	r2, #3
 8002d16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	187a      	adds	r2, r7, r1
 8002d20:	2390      	movs	r3, #144	; 0x90
 8002d22:	05db      	lsls	r3, r3, #23
 8002d24:	0011      	movs	r1, r2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fa48 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b00b      	add	sp, #44	; 0x2c
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	40004c00 	.word	0x40004c00
 8002d38:	40021000 	.word	0x40021000

08002d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <NMI_Handler+0x4>

08002d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <HardFault_Handler+0x4>

08002d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d60:	f000 f938 	bl	8002fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	af00      	add	r7, sp, #0
	return 1;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_kill>:

int _kill(int pid, int sig)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d80:	f002 fada 	bl	8005338 <__errno>
 8002d84:	0003      	movs	r3, r0
 8002d86:	2216      	movs	r2, #22
 8002d88:	601a      	str	r2, [r3, #0]
	return -1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	425b      	negs	r3, r3
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b002      	add	sp, #8
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_exit>:

void _exit (int status)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d9e:	2301      	movs	r3, #1
 8002da0:	425a      	negs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	0011      	movs	r1, r2
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7ff ffe5 	bl	8002d76 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dac:	e7fe      	b.n	8002dac <_exit+0x16>

08002dae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e00a      	b.n	8002dd6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dc0:	e000      	b.n	8002dc4 <_read+0x16>
 8002dc2:	bf00      	nop
 8002dc4:	0001      	movs	r1, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	60ba      	str	r2, [r7, #8]
 8002dcc:	b2ca      	uxtb	r2, r1
 8002dce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	dbf0      	blt.n	8002dc0 <_read+0x12>
	}

return len;
 8002dde:	687b      	ldr	r3, [r7, #4]
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b006      	add	sp, #24
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e009      	b.n	8002e0e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	60ba      	str	r2, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	0018      	movs	r0, r3
 8002e04:	e000      	b.n	8002e08 <_write+0x20>
 8002e06:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	dbf1      	blt.n	8002dfa <_write+0x12>
	}
	return len;
 8002e16:	687b      	ldr	r3, [r7, #4]
}
 8002e18:	0018      	movs	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b006      	add	sp, #24
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_close>:

int _close(int file)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	return -1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	425b      	negs	r3, r3
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	0192      	lsls	r2, r2, #6
 8002e44:	605a      	str	r2, [r3, #4]
	return 0;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_isatty>:

int _isatty(int file)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	return 1;
 8002e58:	2301      	movs	r3, #1
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b002      	add	sp, #8
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
	return 0;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e80:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <_sbrk+0x5c>)
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <_sbrk+0x60>)
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <_sbrk+0x64>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <_sbrk+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <_sbrk+0x64>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	18d3      	adds	r3, r2, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d207      	bcs.n	8002eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea8:	f002 fa46 	bl	8005338 <__errno>
 8002eac:	0003      	movs	r3, r0
 8002eae:	220c      	movs	r2, #12
 8002eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	425b      	negs	r3, r3
 8002eb6:	e009      	b.n	8002ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <_sbrk+0x64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <_sbrk+0x64>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	18d2      	adds	r2, r2, r3
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <_sbrk+0x64>)
 8002ec8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b006      	add	sp, #24
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20004000 	.word	0x20004000
 8002ed8:	00000400 	.word	0x00000400
 8002edc:	200001fc 	.word	0x200001fc
 8002ee0:	20000358 	.word	0x20000358

08002ee4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ef0:	480d      	ldr	r0, [pc, #52]	; (8002f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ef2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002ef6:	490e      	ldr	r1, [pc, #56]	; (8002f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <LoopForever+0xe>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002efc:	e002      	b.n	8002f04 <LoopCopyDataInit>

08002efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f02:	3304      	adds	r3, #4

08002f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f08:	d3f9      	bcc.n	8002efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f0c:	4c0b      	ldr	r4, [pc, #44]	; (8002f3c <LoopForever+0x16>)
  movs r3, #0
 8002f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f10:	e001      	b.n	8002f16 <LoopFillZerobss>

08002f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f14:	3204      	adds	r2, #4

08002f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f18:	d3fb      	bcc.n	8002f12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f1a:	f7ff ffe3 	bl	8002ee4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002f1e:	f002 fa11 	bl	8005344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f22:	f7ff fd07 	bl	8002934 <main>

08002f26 <LoopForever>:

LoopForever:
    b LoopForever
 8002f26:	e7fe      	b.n	8002f26 <LoopForever>
  ldr   r0, =_estack
 8002f28:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f30:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002f34:	080087f4 	.word	0x080087f4
  ldr r2, =_sbss
 8002f38:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002f3c:	20000358 	.word	0x20000358

08002f40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f40:	e7fe      	b.n	8002f40 <ADC1_COMP_IRQHandler>
	...

08002f44 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_Init+0x24>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_Init+0x24>)
 8002f4e:	2110      	movs	r1, #16
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f54:	2003      	movs	r0, #3
 8002f56:	f000 f809 	bl	8002f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f5a:	f7ff fe31 	bl	8002bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	40022000 	.word	0x40022000

08002f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <HAL_InitTick+0x5c>)
 8002f76:	681c      	ldr	r4, [r3, #0]
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_InitTick+0x60>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	23fa      	movs	r3, #250	; 0xfa
 8002f80:	0098      	lsls	r0, r3, #2
 8002f82:	f7fd f8dd 	bl	8000140 <__udivsi3>
 8002f86:	0003      	movs	r3, r0
 8002f88:	0019      	movs	r1, r3
 8002f8a:	0020      	movs	r0, r4
 8002f8c:	f7fd f8d8 	bl	8000140 <__udivsi3>
 8002f90:	0003      	movs	r3, r0
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 f905 	bl	80031a2 <HAL_SYSTICK_Config>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e00f      	b.n	8002fc0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d80b      	bhi.n	8002fbe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	425b      	negs	r3, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 f8e2 	bl	8003178 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_InitTick+0x64>)
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e000      	b.n	8002fc0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b003      	add	sp, #12
 8002fc6:	bd90      	pop	{r4, r7, pc}
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	20000008 	.word	0x20000008
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_IncTick+0x1c>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	001a      	movs	r2, r3
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_IncTick+0x20>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	18d2      	adds	r2, r2, r3
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_IncTick+0x20>)
 8002fe6:	601a      	str	r2, [r3, #0]
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	20000008 	.word	0x20000008
 8002ff4:	20000344 	.word	0x20000344

08002ff8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8002ffc:	4b02      	ldr	r3, [pc, #8]	; (8003008 <HAL_GetTick+0x10>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	20000344 	.word	0x20000344

0800300c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7ff fff0 	bl	8002ff8 <HAL_GetTick>
 8003018:	0003      	movs	r3, r0
 800301a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3301      	adds	r3, #1
 8003024:	d005      	beq.n	8003032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_Delay+0x44>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	001a      	movs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	189b      	adds	r3, r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	f7ff ffe0 	bl	8002ff8 <HAL_GetTick>
 8003038:	0002      	movs	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	d8f7      	bhi.n	8003034 <HAL_Delay+0x28>
  {
  }
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20000008 	.word	0x20000008

08003054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	0002      	movs	r2, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b7f      	cmp	r3, #127	; 0x7f
 8003068:	d828      	bhi.n	80030bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800306a:	4a2f      	ldr	r2, [pc, #188]	; (8003128 <__NVIC_SetPriority+0xd4>)
 800306c:	1dfb      	adds	r3, r7, #7
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	33c0      	adds	r3, #192	; 0xc0
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	589b      	ldr	r3, [r3, r2]
 800307a:	1dfa      	adds	r2, r7, #7
 800307c:	7812      	ldrb	r2, [r2, #0]
 800307e:	0011      	movs	r1, r2
 8003080:	2203      	movs	r2, #3
 8003082:	400a      	ands	r2, r1
 8003084:	00d2      	lsls	r2, r2, #3
 8003086:	21ff      	movs	r1, #255	; 0xff
 8003088:	4091      	lsls	r1, r2
 800308a:	000a      	movs	r2, r1
 800308c:	43d2      	mvns	r2, r2
 800308e:	401a      	ands	r2, r3
 8003090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	22ff      	movs	r2, #255	; 0xff
 8003098:	401a      	ands	r2, r3
 800309a:	1dfb      	adds	r3, r7, #7
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	0018      	movs	r0, r3
 80030a0:	2303      	movs	r3, #3
 80030a2:	4003      	ands	r3, r0
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030a8:	481f      	ldr	r0, [pc, #124]	; (8003128 <__NVIC_SetPriority+0xd4>)
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	430a      	orrs	r2, r1
 80030b4:	33c0      	adds	r3, #192	; 0xc0
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030ba:	e031      	b.n	8003120 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030bc:	4a1b      	ldr	r2, [pc, #108]	; (800312c <__NVIC_SetPriority+0xd8>)
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	0019      	movs	r1, r3
 80030c4:	230f      	movs	r3, #15
 80030c6:	400b      	ands	r3, r1
 80030c8:	3b08      	subs	r3, #8
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3306      	adds	r3, #6
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	18d3      	adds	r3, r2, r3
 80030d2:	3304      	adds	r3, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1dfa      	adds	r2, r7, #7
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	0011      	movs	r1, r2
 80030dc:	2203      	movs	r2, #3
 80030de:	400a      	ands	r2, r1
 80030e0:	00d2      	lsls	r2, r2, #3
 80030e2:	21ff      	movs	r1, #255	; 0xff
 80030e4:	4091      	lsls	r1, r2
 80030e6:	000a      	movs	r2, r1
 80030e8:	43d2      	mvns	r2, r2
 80030ea:	401a      	ands	r2, r3
 80030ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	22ff      	movs	r2, #255	; 0xff
 80030f4:	401a      	ands	r2, r3
 80030f6:	1dfb      	adds	r3, r7, #7
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	0018      	movs	r0, r3
 80030fc:	2303      	movs	r3, #3
 80030fe:	4003      	ands	r3, r0
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003104:	4809      	ldr	r0, [pc, #36]	; (800312c <__NVIC_SetPriority+0xd8>)
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	001c      	movs	r4, r3
 800310c:	230f      	movs	r3, #15
 800310e:	4023      	ands	r3, r4
 8003110:	3b08      	subs	r3, #8
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	430a      	orrs	r2, r1
 8003116:	3306      	adds	r3, #6
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	18c3      	adds	r3, r0, r3
 800311c:	3304      	adds	r3, #4
 800311e:	601a      	str	r2, [r3, #0]
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b003      	add	sp, #12
 8003126:	bd90      	pop	{r4, r7, pc}
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1e5a      	subs	r2, r3, #1
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	045b      	lsls	r3, r3, #17
 8003140:	429a      	cmp	r2, r3
 8003142:	d301      	bcc.n	8003148 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003144:	2301      	movs	r3, #1
 8003146:	e010      	b.n	800316a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <SysTick_Config+0x44>)
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	3a01      	subs	r2, #1
 800314e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003150:	2301      	movs	r3, #1
 8003152:	425b      	negs	r3, r3
 8003154:	2103      	movs	r1, #3
 8003156:	0018      	movs	r0, r3
 8003158:	f7ff ff7c 	bl	8003054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <SysTick_Config+0x44>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <SysTick_Config+0x44>)
 8003164:	2207      	movs	r2, #7
 8003166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003168:	2300      	movs	r3, #0
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b002      	add	sp, #8
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	e000e010 	.word	0xe000e010

08003178 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	210f      	movs	r1, #15
 8003184:	187b      	adds	r3, r7, r1
 8003186:	1c02      	adds	r2, r0, #0
 8003188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	187b      	adds	r3, r7, r1
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b25b      	sxtb	r3, r3
 8003192:	0011      	movs	r1, r2
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff ff5d 	bl	8003054 <__NVIC_SetPriority>
}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff ffbf 	bl	8003130 <SysTick_Config>
 80031b2:	0003      	movs	r3, r0
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ca:	e155      	b.n	8003478 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4091      	lsls	r1, r2
 80031d6:	000a      	movs	r2, r1
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d100      	bne.n	80031e4 <HAL_GPIO_Init+0x28>
 80031e2:	e146      	b.n	8003472 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2203      	movs	r2, #3
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d005      	beq.n	80031fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2203      	movs	r2, #3
 80031f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d130      	bne.n	800325e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	409a      	lsls	r2, r3
 800320a:	0013      	movs	r3, r2
 800320c:	43da      	mvns	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	409a      	lsls	r2, r3
 800321e:	0013      	movs	r3, r2
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003232:	2201      	movs	r2, #1
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
 8003238:	0013      	movs	r3, r2
 800323a:	43da      	mvns	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	2201      	movs	r2, #1
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
 8003250:	0013      	movs	r3, r2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2203      	movs	r2, #3
 8003264:	4013      	ands	r3, r2
 8003266:	2b03      	cmp	r3, #3
 8003268:	d017      	beq.n	800329a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	409a      	lsls	r2, r3
 8003278:	0013      	movs	r3, r2
 800327a:	43da      	mvns	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	409a      	lsls	r2, r3
 800328c:	0013      	movs	r3, r2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2203      	movs	r2, #3
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d123      	bne.n	80032ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	08da      	lsrs	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3208      	adds	r2, #8
 80032ae:	0092      	lsls	r2, r2, #2
 80032b0:	58d3      	ldr	r3, [r2, r3]
 80032b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2207      	movs	r2, #7
 80032b8:	4013      	ands	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	409a      	lsls	r2, r3
 80032c0:	0013      	movs	r3, r2
 80032c2:	43da      	mvns	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2107      	movs	r1, #7
 80032d2:	400b      	ands	r3, r1
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	409a      	lsls	r2, r3
 80032d8:	0013      	movs	r3, r2
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	6939      	ldr	r1, [r7, #16]
 80032ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	2203      	movs	r2, #3
 80032fa:	409a      	lsls	r2, r3
 80032fc:	0013      	movs	r3, r2
 80032fe:	43da      	mvns	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	401a      	ands	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	409a      	lsls	r2, r3
 8003314:	0013      	movs	r3, r2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	23c0      	movs	r3, #192	; 0xc0
 8003328:	029b      	lsls	r3, r3, #10
 800332a:	4013      	ands	r3, r2
 800332c:	d100      	bne.n	8003330 <HAL_GPIO_Init+0x174>
 800332e:	e0a0      	b.n	8003472 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003330:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_GPIO_Init+0x2d4>)
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	4b56      	ldr	r3, [pc, #344]	; (8003490 <HAL_GPIO_Init+0x2d4>)
 8003336:	2101      	movs	r1, #1
 8003338:	430a      	orrs	r2, r1
 800333a:	619a      	str	r2, [r3, #24]
 800333c:	4b54      	ldr	r3, [pc, #336]	; (8003490 <HAL_GPIO_Init+0x2d4>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2201      	movs	r2, #1
 8003342:	4013      	ands	r3, r2
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003348:	4a52      	ldr	r2, [pc, #328]	; (8003494 <HAL_GPIO_Init+0x2d8>)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3302      	adds	r3, #2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	589b      	ldr	r3, [r3, r2]
 8003354:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2203      	movs	r2, #3
 800335a:	4013      	ands	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	220f      	movs	r2, #15
 8003360:	409a      	lsls	r2, r3
 8003362:	0013      	movs	r3, r2
 8003364:	43da      	mvns	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	2390      	movs	r3, #144	; 0x90
 8003370:	05db      	lsls	r3, r3, #23
 8003372:	429a      	cmp	r2, r3
 8003374:	d019      	beq.n	80033aa <HAL_GPIO_Init+0x1ee>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a47      	ldr	r2, [pc, #284]	; (8003498 <HAL_GPIO_Init+0x2dc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_GPIO_Init+0x1ea>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a46      	ldr	r2, [pc, #280]	; (800349c <HAL_GPIO_Init+0x2e0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00d      	beq.n	80033a2 <HAL_GPIO_Init+0x1e6>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a45      	ldr	r2, [pc, #276]	; (80034a0 <HAL_GPIO_Init+0x2e4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <HAL_GPIO_Init+0x1e2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a44      	ldr	r2, [pc, #272]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <HAL_GPIO_Init+0x1de>
 8003396:	2304      	movs	r3, #4
 8003398:	e008      	b.n	80033ac <HAL_GPIO_Init+0x1f0>
 800339a:	2305      	movs	r3, #5
 800339c:	e006      	b.n	80033ac <HAL_GPIO_Init+0x1f0>
 800339e:	2303      	movs	r3, #3
 80033a0:	e004      	b.n	80033ac <HAL_GPIO_Init+0x1f0>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e002      	b.n	80033ac <HAL_GPIO_Init+0x1f0>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_GPIO_Init+0x1f0>
 80033aa:	2300      	movs	r3, #0
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	2103      	movs	r1, #3
 80033b0:	400a      	ands	r2, r1
 80033b2:	0092      	lsls	r2, r2, #2
 80033b4:	4093      	lsls	r3, r2
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033bc:	4935      	ldr	r1, [pc, #212]	; (8003494 <HAL_GPIO_Init+0x2d8>)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	3302      	adds	r3, #2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ca:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	025b      	lsls	r3, r3, #9
 80033e2:	4013      	ands	r3, r2
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033ee:	4b2e      	ldr	r3, [pc, #184]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80033f4:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	029b      	lsls	r3, r3, #10
 800340c:	4013      	ands	r3, r2
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003418:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	43da      	mvns	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	035b      	lsls	r3, r3, #13
 8003436:	4013      	ands	r3, r2
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003442:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003448:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	43da      	mvns	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	039b      	lsls	r3, r3, #14
 8003460:	4013      	ands	r3, r2
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3301      	adds	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	40da      	lsrs	r2, r3
 8003480:	1e13      	subs	r3, r2, #0
 8003482:	d000      	beq.n	8003486 <HAL_GPIO_Init+0x2ca>
 8003484:	e6a2      	b.n	80031cc <HAL_GPIO_Init+0x10>
  } 
}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b006      	add	sp, #24
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	40010000 	.word	0x40010000
 8003498:	48000400 	.word	0x48000400
 800349c:	48000800 	.word	0x48000800
 80034a0:	48000c00 	.word	0x48000c00
 80034a4:	48001000 	.word	0x48001000
 80034a8:	40010400 	.word	0x40010400

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	0008      	movs	r0, r1
 80034b6:	0011      	movs	r1, r2
 80034b8:	1cbb      	adds	r3, r7, #2
 80034ba:	1c02      	adds	r2, r0, #0
 80034bc:	801a      	strh	r2, [r3, #0]
 80034be:	1c7b      	adds	r3, r7, #1
 80034c0:	1c0a      	adds	r2, r1, #0
 80034c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034c4:	1c7b      	adds	r3, r7, #1
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034cc:	1cbb      	adds	r3, r7, #2
 80034ce:	881a      	ldrh	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d4:	e003      	b.n	80034de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034d6:	1cbb      	adds	r3, r7, #2
 80034d8:	881a      	ldrh	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b002      	add	sp, #8
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e082      	b.n	8003600 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2241      	movs	r2, #65	; 0x41
 80034fe:	5c9b      	ldrb	r3, [r3, r2]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d107      	bne.n	8003516 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2240      	movs	r2, #64	; 0x40
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff fb79 	bl	8002c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2241      	movs	r2, #65	; 0x41
 800351a:	2124      	movs	r1, #36	; 0x24
 800351c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	438a      	bics	r2, r1
 800352c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4934      	ldr	r1, [pc, #208]	; (8003608 <HAL_I2C_Init+0x120>)
 8003538:	400a      	ands	r2, r1
 800353a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4931      	ldr	r1, [pc, #196]	; (800360c <HAL_I2C_Init+0x124>)
 8003548:	400a      	ands	r2, r1
 800354a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d108      	bne.n	8003566 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	0209      	lsls	r1, r1, #8
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	e007      	b.n	8003576 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2184      	movs	r1, #132	; 0x84
 8003570:	0209      	lsls	r1, r1, #8
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d104      	bne.n	8003588 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	0112      	lsls	r2, r2, #4
 8003586:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	491f      	ldr	r1, [pc, #124]	; (8003610 <HAL_I2C_Init+0x128>)
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	491a      	ldr	r1, [pc, #104]	; (800360c <HAL_I2C_Init+0x124>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69d9      	ldr	r1, [r3, #28]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	430a      	orrs	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2241      	movs	r2, #65	; 0x41
 80035ec:	2120      	movs	r1, #32
 80035ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2242      	movs	r2, #66	; 0x42
 80035fa:	2100      	movs	r1, #0
 80035fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}
 8003608:	f0ffffff 	.word	0xf0ffffff
 800360c:	ffff7fff 	.word	0xffff7fff
 8003610:	02008000 	.word	0x02008000

08003614 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b089      	sub	sp, #36	; 0x24
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	000c      	movs	r4, r1
 800361e:	0010      	movs	r0, r2
 8003620:	0019      	movs	r1, r3
 8003622:	230a      	movs	r3, #10
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	1c22      	adds	r2, r4, #0
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	2308      	movs	r3, #8
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	1c02      	adds	r2, r0, #0
 8003630:	801a      	strh	r2, [r3, #0]
 8003632:	1dbb      	adds	r3, r7, #6
 8003634:	1c0a      	adds	r2, r1, #0
 8003636:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2241      	movs	r2, #65	; 0x41
 800363c:	5c9b      	ldrb	r3, [r3, r2]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b20      	cmp	r3, #32
 8003642:	d000      	beq.n	8003646 <HAL_I2C_Mem_Write+0x32>
 8003644:	e10c      	b.n	8003860 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_I2C_Mem_Write+0x42>
 800364c:	232c      	movs	r3, #44	; 0x2c
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d105      	bne.n	8003662 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	0092      	lsls	r2, r2, #2
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e0ff      	b.n	8003862 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2240      	movs	r2, #64	; 0x40
 8003666:	5c9b      	ldrb	r3, [r3, r2]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_I2C_Mem_Write+0x5c>
 800366c:	2302      	movs	r3, #2
 800366e:	e0f8      	b.n	8003862 <HAL_I2C_Mem_Write+0x24e>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2240      	movs	r2, #64	; 0x40
 8003674:	2101      	movs	r1, #1
 8003676:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003678:	f7ff fcbe 	bl	8002ff8 <HAL_GetTick>
 800367c:	0003      	movs	r3, r0
 800367e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	0219      	lsls	r1, r3, #8
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2319      	movs	r3, #25
 800368c:	2201      	movs	r2, #1
 800368e:	f000 fb0b 	bl	8003ca8 <I2C_WaitOnFlagUntilTimeout>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0e3      	b.n	8003862 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2241      	movs	r2, #65	; 0x41
 800369e:	2121      	movs	r1, #33	; 0x21
 80036a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2242      	movs	r2, #66	; 0x42
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	222c      	movs	r2, #44	; 0x2c
 80036ba:	18ba      	adds	r2, r7, r2
 80036bc:	8812      	ldrh	r2, [r2, #0]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c6:	1dbb      	adds	r3, r7, #6
 80036c8:	881c      	ldrh	r4, [r3, #0]
 80036ca:	2308      	movs	r3, #8
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	230a      	movs	r3, #10
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	8819      	ldrh	r1, [r3, #0]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	0023      	movs	r3, r4
 80036e2:	f000 f9f9 	bl	8003ad8 <I2C_RequestMemoryWrite>
 80036e6:	1e03      	subs	r3, r0, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2240      	movs	r2, #64	; 0x40
 80036ee:	2100      	movs	r1, #0
 80036f0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0b5      	b.n	8003862 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2bff      	cmp	r3, #255	; 0xff
 80036fe:	d911      	bls.n	8003724 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	b2da      	uxtb	r2, r3
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	045c      	lsls	r4, r3, #17
 8003710:	230a      	movs	r3, #10
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	8819      	ldrh	r1, [r3, #0]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	2300      	movs	r3, #0
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	0023      	movs	r3, r4
 800371e:	f000 fbf7 	bl	8003f10 <I2C_TransferConfig>
 8003722:	e012      	b.n	800374a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	b2da      	uxtb	r2, r3
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	049c      	lsls	r4, r3, #18
 8003738:	230a      	movs	r3, #10
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	8819      	ldrh	r1, [r3, #0]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	0023      	movs	r3, r4
 8003746:	f000 fbe3 	bl	8003f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 fae8 	bl	8003d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8003756:	1e03      	subs	r3, r0, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e081      	b.n	8003862 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	781a      	ldrb	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d03a      	beq.n	800380e <HAL_I2C_Mem_Write+0x1fa>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d136      	bne.n	800380e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	0013      	movs	r3, r2
 80037aa:	2200      	movs	r2, #0
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	f000 fa7b 	bl	8003ca8 <I2C_WaitOnFlagUntilTimeout>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e053      	b.n	8003862 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2bff      	cmp	r3, #255	; 0xff
 80037c2:	d911      	bls.n	80037e8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	22ff      	movs	r2, #255	; 0xff
 80037c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	045c      	lsls	r4, r3, #17
 80037d4:	230a      	movs	r3, #10
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	8819      	ldrh	r1, [r3, #0]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	2300      	movs	r3, #0
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	0023      	movs	r3, r4
 80037e2:	f000 fb95 	bl	8003f10 <I2C_TransferConfig>
 80037e6:	e012      	b.n	800380e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	049c      	lsls	r4, r3, #18
 80037fc:	230a      	movs	r3, #10
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	8819      	ldrh	r1, [r3, #0]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	2300      	movs	r3, #0
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	0023      	movs	r3, r4
 800380a:	f000 fb81 	bl	8003f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d198      	bne.n	800374a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	0018      	movs	r0, r3
 8003820:	f000 fac0 	bl	8003da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e01a      	b.n	8003862 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2220      	movs	r2, #32
 8003832:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	490b      	ldr	r1, [pc, #44]	; (800386c <HAL_I2C_Mem_Write+0x258>)
 8003840:	400a      	ands	r2, r1
 8003842:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2241      	movs	r2, #65	; 0x41
 8003848:	2120      	movs	r1, #32
 800384a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2242      	movs	r2, #66	; 0x42
 8003850:	2100      	movs	r1, #0
 8003852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e000      	b.n	8003862 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
  }
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b007      	add	sp, #28
 8003868:	bd90      	pop	{r4, r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	fe00e800 	.word	0xfe00e800

08003870 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	000c      	movs	r4, r1
 800387a:	0010      	movs	r0, r2
 800387c:	0019      	movs	r1, r3
 800387e:	230a      	movs	r3, #10
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	1c22      	adds	r2, r4, #0
 8003884:	801a      	strh	r2, [r3, #0]
 8003886:	2308      	movs	r3, #8
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	1c02      	adds	r2, r0, #0
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	1dbb      	adds	r3, r7, #6
 8003890:	1c0a      	adds	r2, r1, #0
 8003892:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2241      	movs	r2, #65	; 0x41
 8003898:	5c9b      	ldrb	r3, [r3, r2]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b20      	cmp	r3, #32
 800389e:	d000      	beq.n	80038a2 <HAL_I2C_Mem_Read+0x32>
 80038a0:	e110      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <HAL_I2C_Mem_Read+0x42>
 80038a8:	232c      	movs	r3, #44	; 0x2c
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e103      	b.n	8003ac6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2240      	movs	r2, #64	; 0x40
 80038c2:	5c9b      	ldrb	r3, [r3, r2]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_I2C_Mem_Read+0x5c>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e0fc      	b.n	8003ac6 <HAL_I2C_Mem_Read+0x256>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	2101      	movs	r1, #1
 80038d2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038d4:	f7ff fb90 	bl	8002ff8 <HAL_GetTick>
 80038d8:	0003      	movs	r3, r0
 80038da:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	0219      	lsls	r1, r3, #8
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	2319      	movs	r3, #25
 80038e8:	2201      	movs	r2, #1
 80038ea:	f000 f9dd 	bl	8003ca8 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0e7      	b.n	8003ac6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2241      	movs	r2, #65	; 0x41
 80038fa:	2122      	movs	r1, #34	; 0x22
 80038fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2242      	movs	r2, #66	; 0x42
 8003902:	2140      	movs	r1, #64	; 0x40
 8003904:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	222c      	movs	r2, #44	; 0x2c
 8003916:	18ba      	adds	r2, r7, r2
 8003918:	8812      	ldrh	r2, [r2, #0]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003922:	1dbb      	adds	r3, r7, #6
 8003924:	881c      	ldrh	r4, [r3, #0]
 8003926:	2308      	movs	r3, #8
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	230a      	movs	r3, #10
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	8819      	ldrh	r1, [r3, #0]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	0023      	movs	r3, r4
 800393e:	f000 f92f 	bl	8003ba0 <I2C_RequestMemoryRead>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d005      	beq.n	8003952 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2240      	movs	r2, #64	; 0x40
 800394a:	2100      	movs	r1, #0
 800394c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0b9      	b.n	8003ac6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	2bff      	cmp	r3, #255	; 0xff
 800395a:	d911      	bls.n	8003980 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	22ff      	movs	r2, #255	; 0xff
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	b2da      	uxtb	r2, r3
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	045c      	lsls	r4, r3, #17
 800396c:	230a      	movs	r3, #10
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	8819      	ldrh	r1, [r3, #0]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	4b56      	ldr	r3, [pc, #344]	; (8003ad0 <HAL_I2C_Mem_Read+0x260>)
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	0023      	movs	r3, r4
 800397a:	f000 fac9 	bl	8003f10 <I2C_TransferConfig>
 800397e:	e012      	b.n	80039a6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	b2da      	uxtb	r2, r3
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	049c      	lsls	r4, r3, #18
 8003994:	230a      	movs	r3, #10
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	8819      	ldrh	r1, [r3, #0]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <HAL_I2C_Mem_Read+0x260>)
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	0023      	movs	r3, r4
 80039a2:	f000 fab5 	bl	8003f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	0013      	movs	r3, r2
 80039b0:	2200      	movs	r2, #0
 80039b2:	2104      	movs	r1, #4
 80039b4:	f000 f978 	bl	8003ca8 <I2C_WaitOnFlagUntilTimeout>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e082      	b.n	8003ac6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d03a      	beq.n	8003a72 <HAL_I2C_Mem_Read+0x202>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d136      	bne.n	8003a72 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2180      	movs	r1, #128	; 0x80
 8003a12:	f000 f949 	bl	8003ca8 <I2C_WaitOnFlagUntilTimeout>
 8003a16:	1e03      	subs	r3, r0, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e053      	b.n	8003ac6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2bff      	cmp	r3, #255	; 0xff
 8003a26:	d911      	bls.n	8003a4c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	22ff      	movs	r2, #255	; 0xff
 8003a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	045c      	lsls	r4, r3, #17
 8003a38:	230a      	movs	r3, #10
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	8819      	ldrh	r1, [r3, #0]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	2300      	movs	r3, #0
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	0023      	movs	r3, r4
 8003a46:	f000 fa63 	bl	8003f10 <I2C_TransferConfig>
 8003a4a:	e012      	b.n	8003a72 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	049c      	lsls	r4, r3, #18
 8003a60:	230a      	movs	r3, #10
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	8819      	ldrh	r1, [r3, #0]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	0023      	movs	r3, r4
 8003a6e:	f000 fa4f 	bl	8003f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d194      	bne.n	80039a6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 f98e 	bl	8003da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a88:	1e03      	subs	r3, r0, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e01a      	b.n	8003ac6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2220      	movs	r2, #32
 8003a96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	490c      	ldr	r1, [pc, #48]	; (8003ad4 <HAL_I2C_Mem_Read+0x264>)
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2241      	movs	r2, #65	; 0x41
 8003aac:	2120      	movs	r1, #32
 8003aae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2242      	movs	r2, #66	; 0x42
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2240      	movs	r2, #64	; 0x40
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b007      	add	sp, #28
 8003acc:	bd90      	pop	{r4, r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	80002400 	.word	0x80002400
 8003ad4:	fe00e800 	.word	0xfe00e800

08003ad8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	000c      	movs	r4, r1
 8003ae2:	0010      	movs	r0, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	250a      	movs	r5, #10
 8003ae8:	197b      	adds	r3, r7, r5
 8003aea:	1c22      	adds	r2, r4, #0
 8003aec:	801a      	strh	r2, [r3, #0]
 8003aee:	2308      	movs	r3, #8
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	1c02      	adds	r2, r0, #0
 8003af4:	801a      	strh	r2, [r3, #0]
 8003af6:	1dbb      	adds	r3, r7, #6
 8003af8:	1c0a      	adds	r2, r1, #0
 8003afa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003afc:	1dbb      	adds	r3, r7, #6
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	045c      	lsls	r4, r3, #17
 8003b06:	197b      	adds	r3, r7, r5
 8003b08:	8819      	ldrh	r1, [r3, #0]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <I2C_RequestMemoryWrite+0xc4>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	0023      	movs	r3, r4
 8003b12:	f000 f9fd 	bl	8003f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	6a39      	ldr	r1, [r7, #32]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 f902 	bl	8003d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b22:	1e03      	subs	r3, r0, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e033      	b.n	8003b92 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b2a:	1dbb      	adds	r3, r7, #6
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b32:	2308      	movs	r3, #8
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b40:	e019      	b.n	8003b76 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b42:	2308      	movs	r3, #8
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 f8e3 	bl	8003d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b60:	1e03      	subs	r3, r0, #0
 8003b62:	d001      	beq.n	8003b68 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e014      	b.n	8003b92 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b68:	2308      	movs	r3, #8
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a3a      	ldr	r2, [r7, #32]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	0013      	movs	r3, r2
 8003b80:	2200      	movs	r2, #0
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	f000 f890 	bl	8003ca8 <I2C_WaitOnFlagUntilTimeout>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b004      	add	sp, #16
 8003b98:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	80002000 	.word	0x80002000

08003ba0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ba0:	b5b0      	push	{r4, r5, r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	000c      	movs	r4, r1
 8003baa:	0010      	movs	r0, r2
 8003bac:	0019      	movs	r1, r3
 8003bae:	250a      	movs	r5, #10
 8003bb0:	197b      	adds	r3, r7, r5
 8003bb2:	1c22      	adds	r2, r4, #0
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	1c02      	adds	r2, r0, #0
 8003bbc:	801a      	strh	r2, [r3, #0]
 8003bbe:	1dbb      	adds	r3, r7, #6
 8003bc0:	1c0a      	adds	r2, r1, #0
 8003bc2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bc4:	1dbb      	adds	r3, r7, #6
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	197b      	adds	r3, r7, r5
 8003bcc:	8819      	ldrh	r1, [r3, #0]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <I2C_RequestMemoryRead+0xc0>)
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f000 f99b 	bl	8003f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	6a39      	ldr	r1, [r7, #32]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f000 f8a0 	bl	8003d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8003be6:	1e03      	subs	r3, r0, #0
 8003be8:	d001      	beq.n	8003bee <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e033      	b.n	8003c56 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bee:	1dbb      	adds	r3, r7, #6
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d107      	bne.n	8003c06 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
 8003c04:	e019      	b.n	8003c3a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c06:	2308      	movs	r3, #8
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1a:	6a39      	ldr	r1, [r7, #32]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 f881 	bl	8003d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d001      	beq.n	8003c2c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e014      	b.n	8003c56 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3a:	6a3a      	ldr	r2, [r7, #32]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	0013      	movs	r3, r2
 8003c44:	2200      	movs	r2, #0
 8003c46:	2140      	movs	r1, #64	; 0x40
 8003c48:	f000 f82e 	bl	8003ca8 <I2C_WaitOnFlagUntilTimeout>
 8003c4c:	1e03      	subs	r3, r0, #0
 8003c4e:	d001      	beq.n	8003c54 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	80002000 	.word	0x80002000

08003c64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2202      	movs	r2, #2
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d103      	bne.n	8003c82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d007      	beq.n	8003ca0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	619a      	str	r2, [r3, #24]
  }
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	1dfb      	adds	r3, r7, #7
 8003cb6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb8:	e021      	b.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	d01e      	beq.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc0:	f7ff f99a 	bl	8002ff8 <HAL_GetTick>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d302      	bcc.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d113      	bne.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	2220      	movs	r2, #32
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2241      	movs	r2, #65	; 0x41
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2242      	movs	r2, #66	; 0x42
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2240      	movs	r2, #64	; 0x40
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00f      	b.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	425a      	negs	r2, r3
 8003d0e:	4153      	adcs	r3, r2
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	001a      	movs	r2, r3
 8003d14:	1dfb      	adds	r3, r7, #7
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d0ce      	beq.n	8003cba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b004      	add	sp, #16
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d32:	e02b      	b.n	8003d8c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 f86e 	bl	8003e1c <I2C_IsAcknowledgeFailed>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d001      	beq.n	8003d48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e029      	b.n	8003d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	d01e      	beq.n	8003d8c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7ff f953 	bl	8002ff8 <HAL_GetTick>
 8003d52:	0002      	movs	r2, r0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d113      	bne.n	8003d8c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	2220      	movs	r2, #32
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2241      	movs	r2, #65	; 0x41
 8003d74:	2120      	movs	r1, #32
 8003d76:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2242      	movs	r2, #66	; 0x42
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2240      	movs	r2, #64	; 0x40
 8003d84:	2100      	movs	r1, #0
 8003d86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e007      	b.n	8003d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2202      	movs	r2, #2
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d1cc      	bne.n	8003d34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b004      	add	sp, #16
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db0:	e028      	b.n	8003e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 f82f 	bl	8003e1c <I2C_IsAcknowledgeFailed>
 8003dbe:	1e03      	subs	r3, r0, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e026      	b.n	8003e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7ff f917 	bl	8002ff8 <HAL_GetTick>
 8003dca:	0002      	movs	r2, r0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d302      	bcc.n	8003ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d113      	bne.n	8003e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	2220      	movs	r2, #32
 8003de2:	431a      	orrs	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2241      	movs	r2, #65	; 0x41
 8003dec:	2120      	movs	r1, #32
 8003dee:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2242      	movs	r2, #66	; 0x42
 8003df4:	2100      	movs	r1, #0
 8003df6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d1cf      	bne.n	8003db2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b004      	add	sp, #16
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2210      	movs	r2, #16
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d164      	bne.n	8003f00 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	049b      	lsls	r3, r3, #18
 8003e40:	401a      	ands	r2, r3
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	049b      	lsls	r3, r3, #18
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d02b      	beq.n	8003ea2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	01c9      	lsls	r1, r1, #7
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e5c:	e021      	b.n	8003ea2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3301      	adds	r3, #1
 8003e62:	d01e      	beq.n	8003ea2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e64:	f7ff f8c8 	bl	8002ff8 <HAL_GetTick>
 8003e68:	0002      	movs	r2, r0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <I2C_IsAcknowledgeFailed+0x5e>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d113      	bne.n	8003ea2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	2220      	movs	r2, #32
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2241      	movs	r2, #65	; 0x41
 8003e8a:	2120      	movs	r1, #32
 8003e8c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2242      	movs	r2, #66	; 0x42
 8003e92:	2100      	movs	r1, #0
 8003e94:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2240      	movs	r2, #64	; 0x40
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e02f      	b.n	8003f02 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d1d6      	bne.n	8003e5e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7ff fece 	bl	8003c64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	490e      	ldr	r1, [pc, #56]	; (8003f0c <I2C_IsAcknowledgeFailed+0xf0>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	2204      	movs	r2, #4
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2241      	movs	r2, #65	; 0x41
 8003ee8:	2120      	movs	r1, #32
 8003eea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2242      	movs	r2, #66	; 0x42
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2240      	movs	r2, #64	; 0x40
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	fe00e800 	.word	0xfe00e800

08003f10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	0008      	movs	r0, r1
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	240a      	movs	r4, #10
 8003f20:	193b      	adds	r3, r7, r4
 8003f22:	1c02      	adds	r2, r0, #0
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	2009      	movs	r0, #9
 8003f28:	183b      	adds	r3, r7, r0
 8003f2a:	1c0a      	adds	r2, r1, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	0d51      	lsrs	r1, r2, #21
 8003f38:	2280      	movs	r2, #128	; 0x80
 8003f3a:	00d2      	lsls	r2, r2, #3
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	490e      	ldr	r1, [pc, #56]	; (8003f78 <I2C_TransferConfig+0x68>)
 8003f40:	430a      	orrs	r2, r1
 8003f42:	43d2      	mvns	r2, r2
 8003f44:	401a      	ands	r2, r3
 8003f46:	0011      	movs	r1, r2
 8003f48:	193b      	adds	r3, r7, r4
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	059b      	lsls	r3, r3, #22
 8003f4e:	0d9a      	lsrs	r2, r3, #22
 8003f50:	183b      	adds	r3, r7, r0
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	0418      	lsls	r0, r3, #16
 8003f56:	23ff      	movs	r3, #255	; 0xff
 8003f58:	041b      	lsls	r3, r3, #16
 8003f5a:	4003      	ands	r3, r0
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b005      	add	sp, #20
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	03ff63ff 	.word	0x03ff63ff

08003f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2241      	movs	r2, #65	; 0x41
 8003f8a:	5c9b      	ldrb	r3, [r3, r2]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d138      	bne.n	8004004 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2240      	movs	r2, #64	; 0x40
 8003f96:	5c9b      	ldrb	r3, [r3, r2]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e032      	b.n	8004006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2241      	movs	r2, #65	; 0x41
 8003fac:	2124      	movs	r1, #36	; 0x24
 8003fae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2101      	movs	r1, #1
 8003fbc:	438a      	bics	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4911      	ldr	r1, [pc, #68]	; (8004010 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6819      	ldr	r1, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2101      	movs	r1, #1
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2241      	movs	r2, #65	; 0x41
 8003ff4:	2120      	movs	r1, #32
 8003ff6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2240      	movs	r2, #64	; 0x40
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b002      	add	sp, #8
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	ffffefff 	.word	0xffffefff

08004014 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2241      	movs	r2, #65	; 0x41
 8004022:	5c9b      	ldrb	r3, [r3, r2]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	d139      	bne.n	800409e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2240      	movs	r2, #64	; 0x40
 800402e:	5c9b      	ldrb	r3, [r3, r2]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004034:	2302      	movs	r3, #2
 8004036:	e033      	b.n	80040a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	2101      	movs	r1, #1
 800403e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2241      	movs	r2, #65	; 0x41
 8004044:	2124      	movs	r1, #36	; 0x24
 8004046:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	438a      	bics	r2, r1
 8004056:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004064:	4013      	ands	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2241      	movs	r2, #65	; 0x41
 800408e:	2120      	movs	r1, #32
 8004090:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2240      	movs	r2, #64	; 0x40
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e000      	b.n	80040a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
  }
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b004      	add	sp, #16
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	fffff0ff 	.word	0xfffff0ff

080040ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f000 fb76 	bl	80047ac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	d100      	bne.n	80040cc <HAL_RCC_OscConfig+0x20>
 80040ca:	e08e      	b.n	80041ea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80040cc:	4bc5      	ldr	r3, [pc, #788]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	220c      	movs	r2, #12
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d00e      	beq.n	80040f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040d8:	4bc2      	ldr	r3, [pc, #776]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	220c      	movs	r2, #12
 80040de:	4013      	ands	r3, r2
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d117      	bne.n	8004114 <HAL_RCC_OscConfig+0x68>
 80040e4:	4bbf      	ldr	r3, [pc, #764]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	23c0      	movs	r3, #192	; 0xc0
 80040ea:	025b      	lsls	r3, r3, #9
 80040ec:	401a      	ands	r2, r3
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	025b      	lsls	r3, r3, #9
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10e      	bne.n	8004114 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f6:	4bbb      	ldr	r3, [pc, #748]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	029b      	lsls	r3, r3, #10
 80040fe:	4013      	ands	r3, r2
 8004100:	d100      	bne.n	8004104 <HAL_RCC_OscConfig+0x58>
 8004102:	e071      	b.n	80041e8 <HAL_RCC_OscConfig+0x13c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d000      	beq.n	800410e <HAL_RCC_OscConfig+0x62>
 800410c:	e06c      	b.n	80041e8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f000 fb4c 	bl	80047ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d107      	bne.n	800412c <HAL_RCC_OscConfig+0x80>
 800411c:	4bb1      	ldr	r3, [pc, #708]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4bb0      	ldr	r3, [pc, #704]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	0249      	lsls	r1, r1, #9
 8004126:	430a      	orrs	r2, r1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e02f      	b.n	800418c <HAL_RCC_OscConfig+0xe0>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10c      	bne.n	800414e <HAL_RCC_OscConfig+0xa2>
 8004134:	4bab      	ldr	r3, [pc, #684]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4baa      	ldr	r3, [pc, #680]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800413a:	49ab      	ldr	r1, [pc, #684]	; (80043e8 <HAL_RCC_OscConfig+0x33c>)
 800413c:	400a      	ands	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	4ba8      	ldr	r3, [pc, #672]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4ba7      	ldr	r3, [pc, #668]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004146:	49a9      	ldr	r1, [pc, #676]	; (80043ec <HAL_RCC_OscConfig+0x340>)
 8004148:	400a      	ands	r2, r1
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e01e      	b.n	800418c <HAL_RCC_OscConfig+0xe0>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b05      	cmp	r3, #5
 8004154:	d10e      	bne.n	8004174 <HAL_RCC_OscConfig+0xc8>
 8004156:	4ba3      	ldr	r3, [pc, #652]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4ba2      	ldr	r3, [pc, #648]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	02c9      	lsls	r1, r1, #11
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	4b9f      	ldr	r3, [pc, #636]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b9e      	ldr	r3, [pc, #632]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	0249      	lsls	r1, r1, #9
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e00b      	b.n	800418c <HAL_RCC_OscConfig+0xe0>
 8004174:	4b9b      	ldr	r3, [pc, #620]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b9a      	ldr	r3, [pc, #616]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800417a:	499b      	ldr	r1, [pc, #620]	; (80043e8 <HAL_RCC_OscConfig+0x33c>)
 800417c:	400a      	ands	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	4b98      	ldr	r3, [pc, #608]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b97      	ldr	r3, [pc, #604]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004186:	4999      	ldr	r1, [pc, #612]	; (80043ec <HAL_RCC_OscConfig+0x340>)
 8004188:	400a      	ands	r2, r1
 800418a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d014      	beq.n	80041be <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fe ff30 	bl	8002ff8 <HAL_GetTick>
 8004198:	0003      	movs	r3, r0
 800419a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419e:	f7fe ff2b 	bl	8002ff8 <HAL_GetTick>
 80041a2:	0002      	movs	r2, r0
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b64      	cmp	r3, #100	; 0x64
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e2fd      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b0:	4b8c      	ldr	r3, [pc, #560]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	029b      	lsls	r3, r3, #10
 80041b8:	4013      	ands	r3, r2
 80041ba:	d0f0      	beq.n	800419e <HAL_RCC_OscConfig+0xf2>
 80041bc:	e015      	b.n	80041ea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041be:	f7fe ff1b 	bl	8002ff8 <HAL_GetTick>
 80041c2:	0003      	movs	r3, r0
 80041c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c8:	f7fe ff16 	bl	8002ff8 <HAL_GetTick>
 80041cc:	0002      	movs	r2, r0
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e2e8      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041da:	4b82      	ldr	r3, [pc, #520]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	029b      	lsls	r3, r3, #10
 80041e2:	4013      	ands	r3, r2
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x11c>
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2202      	movs	r2, #2
 80041f0:	4013      	ands	r3, r2
 80041f2:	d100      	bne.n	80041f6 <HAL_RCC_OscConfig+0x14a>
 80041f4:	e06c      	b.n	80042d0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041f6:	4b7b      	ldr	r3, [pc, #492]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	220c      	movs	r2, #12
 80041fc:	4013      	ands	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004200:	4b78      	ldr	r3, [pc, #480]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	220c      	movs	r2, #12
 8004206:	4013      	ands	r3, r2
 8004208:	2b08      	cmp	r3, #8
 800420a:	d11f      	bne.n	800424c <HAL_RCC_OscConfig+0x1a0>
 800420c:	4b75      	ldr	r3, [pc, #468]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	23c0      	movs	r3, #192	; 0xc0
 8004212:	025b      	lsls	r3, r3, #9
 8004214:	401a      	ands	r2, r3
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	429a      	cmp	r2, r3
 800421c:	d116      	bne.n	800424c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800421e:	4b71      	ldr	r3, [pc, #452]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2202      	movs	r2, #2
 8004224:	4013      	ands	r3, r2
 8004226:	d005      	beq.n	8004234 <HAL_RCC_OscConfig+0x188>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d001      	beq.n	8004234 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e2bb      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004234:	4b6b      	ldr	r3, [pc, #428]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	22f8      	movs	r2, #248	; 0xf8
 800423a:	4393      	bics	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00da      	lsls	r2, r3, #3
 8004244:	4b67      	ldr	r3, [pc, #412]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004246:	430a      	orrs	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424a:	e041      	b.n	80042d0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d024      	beq.n	800429e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004254:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b62      	ldr	r3, [pc, #392]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800425a:	2101      	movs	r1, #1
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe feca 	bl	8002ff8 <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426a:	f7fe fec5 	bl	8002ff8 <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e297      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427c:	4b59      	ldr	r3, [pc, #356]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2202      	movs	r2, #2
 8004282:	4013      	ands	r3, r2
 8004284:	d0f1      	beq.n	800426a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004286:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	22f8      	movs	r2, #248	; 0xf8
 800428c:	4393      	bics	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	00da      	lsls	r2, r3, #3
 8004296:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e018      	b.n	80042d0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429e:	4b51      	ldr	r3, [pc, #324]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80042a4:	2101      	movs	r1, #1
 80042a6:	438a      	bics	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fe fea5 	bl	8002ff8 <HAL_GetTick>
 80042ae:	0003      	movs	r3, r0
 80042b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b4:	f7fe fea0 	bl	8002ff8 <HAL_GetTick>
 80042b8:	0002      	movs	r2, r0
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e272      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2202      	movs	r2, #2
 80042cc:	4013      	ands	r3, r2
 80042ce:	d1f1      	bne.n	80042b4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2208      	movs	r2, #8
 80042d6:	4013      	ands	r3, r2
 80042d8:	d036      	beq.n	8004348 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d019      	beq.n	8004316 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80042e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e6:	4b3f      	ldr	r3, [pc, #252]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80042e8:	2101      	movs	r1, #1
 80042ea:	430a      	orrs	r2, r1
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ee:	f7fe fe83 	bl	8002ff8 <HAL_GetTick>
 80042f2:	0003      	movs	r3, r0
 80042f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f8:	f7fe fe7e 	bl	8002ff8 <HAL_GetTick>
 80042fc:	0002      	movs	r2, r0
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e250      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2202      	movs	r2, #2
 8004310:	4013      	ands	r3, r2
 8004312:	d0f1      	beq.n	80042f8 <HAL_RCC_OscConfig+0x24c>
 8004314:	e018      	b.n	8004348 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004316:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800431a:	4b32      	ldr	r3, [pc, #200]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800431c:	2101      	movs	r1, #1
 800431e:	438a      	bics	r2, r1
 8004320:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004322:	f7fe fe69 	bl	8002ff8 <HAL_GetTick>
 8004326:	0003      	movs	r3, r0
 8004328:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800432c:	f7fe fe64 	bl	8002ff8 <HAL_GetTick>
 8004330:	0002      	movs	r2, r0
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e236      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800433e:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	2202      	movs	r2, #2
 8004344:	4013      	ands	r3, r2
 8004346:	d1f1      	bne.n	800432c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2204      	movs	r2, #4
 800434e:	4013      	ands	r3, r2
 8004350:	d100      	bne.n	8004354 <HAL_RCC_OscConfig+0x2a8>
 8004352:	e0b5      	b.n	80044c0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004354:	201f      	movs	r0, #31
 8004356:	183b      	adds	r3, r7, r0
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435c:	4b21      	ldr	r3, [pc, #132]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	055b      	lsls	r3, r3, #21
 8004364:	4013      	ands	r3, r2
 8004366:	d110      	bne.n	800438a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004368:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 800436e:	2180      	movs	r1, #128	; 0x80
 8004370:	0549      	lsls	r1, r1, #21
 8004372:	430a      	orrs	r2, r1
 8004374:	61da      	str	r2, [r3, #28]
 8004376:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	055b      	lsls	r3, r3, #21
 800437e:	4013      	ands	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004384:	183b      	adds	r3, r7, r0
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438a:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_RCC_OscConfig+0x344>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4013      	ands	r3, r2
 8004394:	d11a      	bne.n	80043cc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <HAL_RCC_OscConfig+0x344>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <HAL_RCC_OscConfig+0x344>)
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	0049      	lsls	r1, r1, #1
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a4:	f7fe fe28 	bl	8002ff8 <HAL_GetTick>
 80043a8:	0003      	movs	r3, r0
 80043aa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ae:	f7fe fe23 	bl	8002ff8 <HAL_GetTick>
 80043b2:	0002      	movs	r2, r0
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b64      	cmp	r3, #100	; 0x64
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e1f5      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_OscConfig+0x344>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4013      	ands	r3, r2
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d10f      	bne.n	80043f4 <HAL_RCC_OscConfig+0x348>
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	4b02      	ldr	r3, [pc, #8]	; (80043e4 <HAL_RCC_OscConfig+0x338>)
 80043da:	2101      	movs	r1, #1
 80043dc:	430a      	orrs	r2, r1
 80043de:	621a      	str	r2, [r3, #32]
 80043e0:	e036      	b.n	8004450 <HAL_RCC_OscConfig+0x3a4>
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	40021000 	.word	0x40021000
 80043e8:	fffeffff 	.word	0xfffeffff
 80043ec:	fffbffff 	.word	0xfffbffff
 80043f0:	40007000 	.word	0x40007000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10c      	bne.n	8004416 <HAL_RCC_OscConfig+0x36a>
 80043fc:	4bca      	ldr	r3, [pc, #808]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	4bc9      	ldr	r3, [pc, #804]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004402:	2101      	movs	r1, #1
 8004404:	438a      	bics	r2, r1
 8004406:	621a      	str	r2, [r3, #32]
 8004408:	4bc7      	ldr	r3, [pc, #796]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	4bc6      	ldr	r3, [pc, #792]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800440e:	2104      	movs	r1, #4
 8004410:	438a      	bics	r2, r1
 8004412:	621a      	str	r2, [r3, #32]
 8004414:	e01c      	b.n	8004450 <HAL_RCC_OscConfig+0x3a4>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b05      	cmp	r3, #5
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x38c>
 800441e:	4bc2      	ldr	r3, [pc, #776]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004420:	6a1a      	ldr	r2, [r3, #32]
 8004422:	4bc1      	ldr	r3, [pc, #772]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004424:	2104      	movs	r1, #4
 8004426:	430a      	orrs	r2, r1
 8004428:	621a      	str	r2, [r3, #32]
 800442a:	4bbf      	ldr	r3, [pc, #764]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800442c:	6a1a      	ldr	r2, [r3, #32]
 800442e:	4bbe      	ldr	r3, [pc, #760]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004430:	2101      	movs	r1, #1
 8004432:	430a      	orrs	r2, r1
 8004434:	621a      	str	r2, [r3, #32]
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0x3a4>
 8004438:	4bbb      	ldr	r3, [pc, #748]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800443a:	6a1a      	ldr	r2, [r3, #32]
 800443c:	4bba      	ldr	r3, [pc, #744]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800443e:	2101      	movs	r1, #1
 8004440:	438a      	bics	r2, r1
 8004442:	621a      	str	r2, [r3, #32]
 8004444:	4bb8      	ldr	r3, [pc, #736]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	4bb7      	ldr	r3, [pc, #732]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800444a:	2104      	movs	r1, #4
 800444c:	438a      	bics	r2, r1
 800444e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d014      	beq.n	8004482 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004458:	f7fe fdce 	bl	8002ff8 <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004460:	e009      	b.n	8004476 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004462:	f7fe fdc9 	bl	8002ff8 <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	4aaf      	ldr	r2, [pc, #700]	; (800472c <HAL_RCC_OscConfig+0x680>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e19a      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004476:	4bac      	ldr	r3, [pc, #688]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	2202      	movs	r2, #2
 800447c:	4013      	ands	r3, r2
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x3b6>
 8004480:	e013      	b.n	80044aa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004482:	f7fe fdb9 	bl	8002ff8 <HAL_GetTick>
 8004486:	0003      	movs	r3, r0
 8004488:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448a:	e009      	b.n	80044a0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800448c:	f7fe fdb4 	bl	8002ff8 <HAL_GetTick>
 8004490:	0002      	movs	r2, r0
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	4aa5      	ldr	r2, [pc, #660]	; (800472c <HAL_RCC_OscConfig+0x680>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e185      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a0:	4ba1      	ldr	r3, [pc, #644]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	2202      	movs	r2, #2
 80044a6:	4013      	ands	r3, r2
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044aa:	231f      	movs	r3, #31
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d105      	bne.n	80044c0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b4:	4b9c      	ldr	r3, [pc, #624]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	4b9b      	ldr	r3, [pc, #620]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80044ba:	499d      	ldr	r1, [pc, #628]	; (8004730 <HAL_RCC_OscConfig+0x684>)
 80044bc:	400a      	ands	r2, r1
 80044be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2210      	movs	r2, #16
 80044c6:	4013      	ands	r3, r2
 80044c8:	d063      	beq.n	8004592 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d12a      	bne.n	8004528 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80044d2:	4b95      	ldr	r3, [pc, #596]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80044d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d6:	4b94      	ldr	r3, [pc, #592]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80044d8:	2104      	movs	r1, #4
 80044da:	430a      	orrs	r2, r1
 80044dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80044de:	4b92      	ldr	r3, [pc, #584]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80044e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e2:	4b91      	ldr	r3, [pc, #580]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80044e4:	2101      	movs	r1, #1
 80044e6:	430a      	orrs	r2, r1
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fe fd85 	bl	8002ff8 <HAL_GetTick>
 80044ee:	0003      	movs	r3, r0
 80044f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80044f4:	f7fe fd80 	bl	8002ff8 <HAL_GetTick>
 80044f8:	0002      	movs	r2, r0
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e152      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004506:	4b88      	ldr	r3, [pc, #544]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450a:	2202      	movs	r2, #2
 800450c:	4013      	ands	r3, r2
 800450e:	d0f1      	beq.n	80044f4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004510:	4b85      	ldr	r3, [pc, #532]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	22f8      	movs	r2, #248	; 0xf8
 8004516:	4393      	bics	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	00da      	lsls	r2, r3, #3
 8004520:	4b81      	ldr	r3, [pc, #516]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004522:	430a      	orrs	r2, r1
 8004524:	635a      	str	r2, [r3, #52]	; 0x34
 8004526:	e034      	b.n	8004592 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	3305      	adds	r3, #5
 800452e:	d111      	bne.n	8004554 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004530:	4b7d      	ldr	r3, [pc, #500]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004534:	4b7c      	ldr	r3, [pc, #496]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004536:	2104      	movs	r1, #4
 8004538:	438a      	bics	r2, r1
 800453a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800453c:	4b7a      	ldr	r3, [pc, #488]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	22f8      	movs	r2, #248	; 0xf8
 8004542:	4393      	bics	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	00da      	lsls	r2, r3, #3
 800454c:	4b76      	ldr	r3, [pc, #472]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800454e:	430a      	orrs	r2, r1
 8004550:	635a      	str	r2, [r3, #52]	; 0x34
 8004552:	e01e      	b.n	8004592 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004554:	4b74      	ldr	r3, [pc, #464]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004558:	4b73      	ldr	r3, [pc, #460]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800455a:	2104      	movs	r1, #4
 800455c:	430a      	orrs	r2, r1
 800455e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004560:	4b71      	ldr	r3, [pc, #452]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004564:	4b70      	ldr	r3, [pc, #448]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004566:	2101      	movs	r1, #1
 8004568:	438a      	bics	r2, r1
 800456a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456c:	f7fe fd44 	bl	8002ff8 <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004576:	f7fe fd3f 	bl	8002ff8 <HAL_GetTick>
 800457a:	0002      	movs	r2, r0
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e111      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004588:	4b67      	ldr	r3, [pc, #412]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	2202      	movs	r2, #2
 800458e:	4013      	ands	r3, r2
 8004590:	d1f1      	bne.n	8004576 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2220      	movs	r2, #32
 8004598:	4013      	ands	r3, r2
 800459a:	d05c      	beq.n	8004656 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800459c:	4b62      	ldr	r3, [pc, #392]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	220c      	movs	r2, #12
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d00e      	beq.n	80045c6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045a8:	4b5f      	ldr	r3, [pc, #380]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	220c      	movs	r2, #12
 80045ae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d114      	bne.n	80045de <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045b4:	4b5c      	ldr	r3, [pc, #368]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	23c0      	movs	r3, #192	; 0xc0
 80045ba:	025b      	lsls	r3, r3, #9
 80045bc:	401a      	ands	r2, r3
 80045be:	23c0      	movs	r3, #192	; 0xc0
 80045c0:	025b      	lsls	r3, r3, #9
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d10b      	bne.n	80045de <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80045c6:	4b58      	ldr	r3, [pc, #352]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80045c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	025b      	lsls	r3, r3, #9
 80045ce:	4013      	ands	r3, r2
 80045d0:	d040      	beq.n	8004654 <HAL_RCC_OscConfig+0x5a8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d03c      	beq.n	8004654 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e0e6      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01b      	beq.n	800461e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80045e6:	4b50      	ldr	r3, [pc, #320]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80045e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ea:	4b4f      	ldr	r3, [pc, #316]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	0249      	lsls	r1, r1, #9
 80045f0:	430a      	orrs	r2, r1
 80045f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fe fd00 	bl	8002ff8 <HAL_GetTick>
 80045f8:	0003      	movs	r3, r0
 80045fa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7fe fcfb 	bl	8002ff8 <HAL_GetTick>
 8004602:	0002      	movs	r2, r0
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e0cd      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004610:	4b45      	ldr	r3, [pc, #276]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	025b      	lsls	r3, r3, #9
 8004618:	4013      	ands	r3, r2
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x552>
 800461c:	e01b      	b.n	8004656 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800461e:	4b42      	ldr	r3, [pc, #264]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004622:	4b41      	ldr	r3, [pc, #260]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004624:	4943      	ldr	r1, [pc, #268]	; (8004734 <HAL_RCC_OscConfig+0x688>)
 8004626:	400a      	ands	r2, r1
 8004628:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462a:	f7fe fce5 	bl	8002ff8 <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004634:	f7fe fce0 	bl	8002ff8 <HAL_GetTick>
 8004638:	0002      	movs	r2, r0
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0b2      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004646:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	025b      	lsls	r3, r3, #9
 800464e:	4013      	ands	r3, r2
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x588>
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004654:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d100      	bne.n	8004660 <HAL_RCC_OscConfig+0x5b4>
 800465e:	e0a4      	b.n	80047aa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004660:	4b31      	ldr	r3, [pc, #196]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	220c      	movs	r2, #12
 8004666:	4013      	ands	r3, r2
 8004668:	2b08      	cmp	r3, #8
 800466a:	d100      	bne.n	800466e <HAL_RCC_OscConfig+0x5c2>
 800466c:	e078      	b.n	8004760 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	2b02      	cmp	r3, #2
 8004674:	d14c      	bne.n	8004710 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 800467c:	492e      	ldr	r1, [pc, #184]	; (8004738 <HAL_RCC_OscConfig+0x68c>)
 800467e:	400a      	ands	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe fcb9 	bl	8002ff8 <HAL_GetTick>
 8004686:	0003      	movs	r3, r0
 8004688:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468c:	f7fe fcb4 	bl	8002ff8 <HAL_GetTick>
 8004690:	0002      	movs	r2, r0
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e086      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	049b      	lsls	r3, r3, #18
 80046a6:	4013      	ands	r3, r2
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046aa:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	220f      	movs	r2, #15
 80046b0:	4393      	bics	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b8:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80046ba:	430a      	orrs	r2, r1
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4a1e      	ldr	r2, [pc, #120]	; (800473c <HAL_RCC_OscConfig+0x690>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	0019      	movs	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	431a      	orrs	r2, r3
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b12      	ldr	r3, [pc, #72]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	0449      	lsls	r1, r1, #17
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e6:	f7fe fc87 	bl	8002ff8 <HAL_GetTick>
 80046ea:	0003      	movs	r3, r0
 80046ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fe fc82 	bl	8002ff8 <HAL_GetTick>
 80046f4:	0002      	movs	r2, r0
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e054      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	049b      	lsls	r3, r3, #18
 800470a:	4013      	ands	r3, r2
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x644>
 800470e:	e04c      	b.n	80047aa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <HAL_RCC_OscConfig+0x67c>)
 8004716:	4908      	ldr	r1, [pc, #32]	; (8004738 <HAL_RCC_OscConfig+0x68c>)
 8004718:	400a      	ands	r2, r1
 800471a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fe fc6c 	bl	8002ff8 <HAL_GetTick>
 8004720:	0003      	movs	r3, r0
 8004722:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x6a6>
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	40021000 	.word	0x40021000
 800472c:	00001388 	.word	0x00001388
 8004730:	efffffff 	.word	0xefffffff
 8004734:	fffeffff 	.word	0xfffeffff
 8004738:	feffffff 	.word	0xfeffffff
 800473c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004740:	f7fe fc5a 	bl	8002ff8 <HAL_GetTick>
 8004744:	0002      	movs	r2, r0
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e02c      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004752:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_RCC_OscConfig+0x708>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	049b      	lsls	r3, r3, #18
 800475a:	4013      	ands	r3, r2
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x694>
 800475e:	e024      	b.n	80047aa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e01f      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_RCC_OscConfig+0x708>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_RCC_OscConfig+0x708>)
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	23c0      	movs	r3, #192	; 0xc0
 800477c:	025b      	lsls	r3, r3, #9
 800477e:	401a      	ands	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	429a      	cmp	r2, r3
 8004786:	d10e      	bne.n	80047a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	220f      	movs	r2, #15
 800478c:	401a      	ands	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	23f0      	movs	r3, #240	; 0xf0
 800479a:	039b      	lsls	r3, r3, #14
 800479c:	401a      	ands	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	0018      	movs	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b008      	add	sp, #32
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000

080047b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0bf      	b.n	800494c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047cc:	4b61      	ldr	r3, [pc, #388]	; (8004954 <HAL_RCC_ClockConfig+0x19c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2201      	movs	r2, #1
 80047d2:	4013      	ands	r3, r2
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d911      	bls.n	80047fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b5e      	ldr	r3, [pc, #376]	; (8004954 <HAL_RCC_ClockConfig+0x19c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2201      	movs	r2, #1
 80047e0:	4393      	bics	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	4b5b      	ldr	r3, [pc, #364]	; (8004954 <HAL_RCC_ClockConfig+0x19c>)
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_ClockConfig+0x19c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2201      	movs	r2, #1
 80047f2:	4013      	ands	r3, r2
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0a6      	b.n	800494c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2202      	movs	r2, #2
 8004804:	4013      	ands	r3, r2
 8004806:	d015      	beq.n	8004834 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2204      	movs	r2, #4
 800480e:	4013      	ands	r3, r2
 8004810:	d006      	beq.n	8004820 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004812:	4b51      	ldr	r3, [pc, #324]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4b50      	ldr	r3, [pc, #320]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004818:	21e0      	movs	r1, #224	; 0xe0
 800481a:	00c9      	lsls	r1, r1, #3
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004820:	4b4d      	ldr	r3, [pc, #308]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	22f0      	movs	r2, #240	; 0xf0
 8004826:	4393      	bics	r3, r2
 8004828:	0019      	movs	r1, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2201      	movs	r2, #1
 800483a:	4013      	ands	r3, r2
 800483c:	d04c      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	4b44      	ldr	r3, [pc, #272]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	029b      	lsls	r3, r3, #10
 800484e:	4013      	ands	r3, r2
 8004850:	d120      	bne.n	8004894 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e07a      	b.n	800494c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b3e      	ldr	r3, [pc, #248]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	049b      	lsls	r3, r3, #18
 8004866:	4013      	ands	r3, r2
 8004868:	d114      	bne.n	8004894 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e06e      	b.n	800494c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b03      	cmp	r3, #3
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004876:	4b38      	ldr	r3, [pc, #224]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	025b      	lsls	r3, r3, #9
 800487e:	4013      	ands	r3, r2
 8004880:	d108      	bne.n	8004894 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e062      	b.n	800494c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004886:	4b34      	ldr	r3, [pc, #208]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2202      	movs	r2, #2
 800488c:	4013      	ands	r3, r2
 800488e:	d101      	bne.n	8004894 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e05b      	b.n	800494c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004894:	4b30      	ldr	r3, [pc, #192]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2203      	movs	r2, #3
 800489a:	4393      	bics	r3, r2
 800489c:	0019      	movs	r1, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a8:	f7fe fba6 	bl	8002ff8 <HAL_GetTick>
 80048ac:	0003      	movs	r3, r0
 80048ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b0:	e009      	b.n	80048c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b2:	f7fe fba1 	bl	8002ff8 <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	4a27      	ldr	r2, [pc, #156]	; (800495c <HAL_RCC_ClockConfig+0x1a4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e042      	b.n	800494c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	220c      	movs	r2, #12
 80048cc:	401a      	ands	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d1ec      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d8:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <HAL_RCC_ClockConfig+0x19c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2201      	movs	r2, #1
 80048de:	4013      	ands	r3, r2
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d211      	bcs.n	800490a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e6:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_RCC_ClockConfig+0x19c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	4393      	bics	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	4b18      	ldr	r3, [pc, #96]	; (8004954 <HAL_RCC_ClockConfig+0x19c>)
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f8:	4b16      	ldr	r3, [pc, #88]	; (8004954 <HAL_RCC_ClockConfig+0x19c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2201      	movs	r2, #1
 80048fe:	4013      	ands	r3, r2
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d001      	beq.n	800490a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e020      	b.n	800494c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2204      	movs	r2, #4
 8004910:	4013      	ands	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004914:	4b10      	ldr	r3, [pc, #64]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a11      	ldr	r2, [pc, #68]	; (8004960 <HAL_RCC_ClockConfig+0x1a8>)
 800491a:	4013      	ands	r3, r2
 800491c:	0019      	movs	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004924:	430a      	orrs	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004928:	f000 f820 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800492c:	0001      	movs	r1, r0
 800492e:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x1a0>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	220f      	movs	r2, #15
 8004936:	4013      	ands	r3, r2
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x1ac>)
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	000a      	movs	r2, r1
 800493e:	40da      	lsrs	r2, r3
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x1b0>)
 8004942:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004944:	2003      	movs	r0, #3
 8004946:	f7fe fb11 	bl	8002f6c <HAL_InitTick>
  
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	b004      	add	sp, #16
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40022000 	.word	0x40022000
 8004958:	40021000 	.word	0x40021000
 800495c:	00001388 	.word	0x00001388
 8004960:	fffff8ff 	.word	0xfffff8ff
 8004964:	080083f0 	.word	0x080083f0
 8004968:	20000000 	.word	0x20000000

0800496c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b08f      	sub	sp, #60	; 0x3c
 8004970:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004972:	2314      	movs	r3, #20
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	4a38      	ldr	r2, [pc, #224]	; (8004a58 <HAL_RCC_GetSysClockFreq+0xec>)
 8004978:	ca13      	ldmia	r2!, {r0, r1, r4}
 800497a:	c313      	stmia	r3!, {r0, r1, r4}
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	4a36      	ldr	r2, [pc, #216]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xf0>)
 8004984:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004986:	c313      	stmia	r3!, {r0, r1, r4}
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004990:	2300      	movs	r3, #0
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
 8004994:	2300      	movs	r3, #0
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
 8004998:	2300      	movs	r3, #0
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80049a0:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	220c      	movs	r2, #12
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b0c      	cmp	r3, #12
 80049ae:	d047      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0xd4>
 80049b0:	d849      	bhi.n	8004a46 <HAL_RCC_GetSysClockFreq+0xda>
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d002      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x50>
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d003      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x56>
 80049ba:	e044      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049bc:	4b29      	ldr	r3, [pc, #164]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049c0:	e044      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	0c9b      	lsrs	r3, r3, #18
 80049c6:	220f      	movs	r2, #15
 80049c8:	4013      	ands	r3, r2
 80049ca:	2214      	movs	r2, #20
 80049cc:	18ba      	adds	r2, r7, r2
 80049ce:	5cd3      	ldrb	r3, [r2, r3]
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80049d2:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	220f      	movs	r2, #15
 80049d8:	4013      	ands	r3, r2
 80049da:	1d3a      	adds	r2, r7, #4
 80049dc:	5cd3      	ldrb	r3, [r2, r3]
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e2:	23c0      	movs	r3, #192	; 0xc0
 80049e4:	025b      	lsls	r3, r3, #9
 80049e6:	401a      	ands	r2, r3
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	025b      	lsls	r3, r3, #9
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d109      	bne.n	8004a04 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f2:	481c      	ldr	r0, [pc, #112]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049f4:	f7fb fba4 	bl	8000140 <__udivsi3>
 80049f8:	0003      	movs	r3, r0
 80049fa:	001a      	movs	r2, r3
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	4353      	muls	r3, r2
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
 8004a02:	e01a      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a06:	23c0      	movs	r3, #192	; 0xc0
 8004a08:	025b      	lsls	r3, r3, #9
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	23c0      	movs	r3, #192	; 0xc0
 8004a0e:	025b      	lsls	r3, r3, #9
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d109      	bne.n	8004a28 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a16:	4814      	ldr	r0, [pc, #80]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a18:	f7fb fb92 	bl	8000140 <__udivsi3>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	001a      	movs	r2, r3
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	4353      	muls	r3, r2
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a2a:	480e      	ldr	r0, [pc, #56]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a2c:	f7fb fb88 	bl	8000140 <__udivsi3>
 8004a30:	0003      	movs	r3, r0
 8004a32:	001a      	movs	r2, r3
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	4353      	muls	r3, r2
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a3e:	e005      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a44:	e002      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b00f      	add	sp, #60	; 0x3c
 8004a54:	bd90      	pop	{r4, r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	080082d0 	.word	0x080082d0
 8004a5c:	080082e0 	.word	0x080082e0
 8004a60:	40021000 	.word	0x40021000
 8004a64:	007a1200 	.word	0x007a1200
 8004a68:	02dc6c00 	.word	0x02dc6c00

08004a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	20000000 	.word	0x20000000

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004a84:	f7ff fff2 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004a88:	0001      	movs	r1, r0
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	2207      	movs	r2, #7
 8004a92:	4013      	ands	r3, r2
 8004a94:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	40d9      	lsrs	r1, r3
 8004a9a:	000b      	movs	r3, r1
}    
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	08008400 	.word	0x08008400

08004aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e044      	b.n	8004b48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d107      	bne.n	8004ad6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2274      	movs	r2, #116	; 0x74
 8004aca:	2100      	movs	r1, #0
 8004acc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f7fe f8e7 	bl	8002ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2224      	movs	r2, #36	; 0x24
 8004ada:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	438a      	bics	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	0018      	movs	r0, r3
 8004af0:	f000 f8da 	bl	8004ca8 <UART_SetConfig>
 8004af4:	0003      	movs	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e024      	b.n	8004b48 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f000 fa55 	bl	8004fb8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	490d      	ldr	r1, [pc, #52]	; (8004b50 <HAL_UART_Init+0xa4>)
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	212a      	movs	r1, #42	; 0x2a
 8004b2a:	438a      	bics	r2, r1
 8004b2c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f000 faed 	bl	8005120 <UART_CheckIdleState>
 8004b46:	0003      	movs	r3, r0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	ffffb7ff 	.word	0xffffb7ff

08004b54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	1dbb      	adds	r3, r7, #6
 8004b62:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d000      	beq.n	8004b6e <HAL_UART_Transmit+0x1a>
 8004b6c:	e096      	b.n	8004c9c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_UART_Transmit+0x28>
 8004b74:	1dbb      	adds	r3, r7, #6
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e08e      	b.n	8004c9e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	015b      	lsls	r3, r3, #5
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d109      	bne.n	8004ba0 <HAL_UART_Transmit+0x4c>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2201      	movs	r2, #1
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d001      	beq.n	8004ba0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e07e      	b.n	8004c9e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2274      	movs	r2, #116	; 0x74
 8004ba4:	5c9b      	ldrb	r3, [r3, r2]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Transmit+0x5a>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e077      	b.n	8004c9e <HAL_UART_Transmit+0x14a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2274      	movs	r2, #116	; 0x74
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2280      	movs	r2, #128	; 0x80
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2221      	movs	r2, #33	; 0x21
 8004bc2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bc4:	f7fe fa18 	bl	8002ff8 <HAL_GetTick>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1dba      	adds	r2, r7, #6
 8004bd0:	2150      	movs	r1, #80	; 0x50
 8004bd2:	8812      	ldrh	r2, [r2, #0]
 8004bd4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1dba      	adds	r2, r7, #6
 8004bda:	2152      	movs	r1, #82	; 0x52
 8004bdc:	8812      	ldrh	r2, [r2, #0]
 8004bde:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	015b      	lsls	r3, r3, #5
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d108      	bne.n	8004bfe <HAL_UART_Transmit+0xaa>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	e003      	b.n	8004c06 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2274      	movs	r2, #116	; 0x74
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004c0e:	e02d      	b.n	8004c6c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	0013      	movs	r3, r2
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2180      	movs	r1, #128	; 0x80
 8004c1e:	f000 fac7 	bl	80051b0 <UART_WaitOnFlagUntilTimeout>
 8004c22:	1e03      	subs	r3, r0, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e039      	b.n	8004c9e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	881a      	ldrh	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	05d2      	lsls	r2, r2, #23
 8004c3a:	0dd2      	lsrs	r2, r2, #23
 8004c3c:	b292      	uxth	r2, r2
 8004c3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	3302      	adds	r3, #2
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	e008      	b.n	8004c5a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	781a      	ldrb	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	b292      	uxth	r2, r2
 8004c52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2252      	movs	r2, #82	; 0x52
 8004c5e:	5a9b      	ldrh	r3, [r3, r2]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b299      	uxth	r1, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2252      	movs	r2, #82	; 0x52
 8004c6a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2252      	movs	r2, #82	; 0x52
 8004c70:	5a9b      	ldrh	r3, [r3, r2]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1cb      	bne.n	8004c10 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	0013      	movs	r3, r2
 8004c82:	2200      	movs	r2, #0
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	f000 fa93 	bl	80051b0 <UART_WaitOnFlagUntilTimeout>
 8004c8a:	1e03      	subs	r3, r0, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e005      	b.n	8004c9e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b008      	add	sp, #32
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb0:	231e      	movs	r3, #30
 8004cb2:	18fb      	adds	r3, r7, r3
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4aaf      	ldr	r2, [pc, #700]	; (8004f94 <UART_SetConfig+0x2ec>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4aaa      	ldr	r2, [pc, #680]	; (8004f98 <UART_SetConfig+0x2f0>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4aa1      	ldr	r2, [pc, #644]	; (8004f9c <UART_SetConfig+0x2f4>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a9d      	ldr	r2, [pc, #628]	; (8004fa0 <UART_SetConfig+0x2f8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d127      	bne.n	8004d7e <UART_SetConfig+0xd6>
 8004d2e:	4b9d      	ldr	r3, [pc, #628]	; (8004fa4 <UART_SetConfig+0x2fc>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	2203      	movs	r2, #3
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d00d      	beq.n	8004d56 <UART_SetConfig+0xae>
 8004d3a:	d81b      	bhi.n	8004d74 <UART_SetConfig+0xcc>
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d014      	beq.n	8004d6a <UART_SetConfig+0xc2>
 8004d40:	d818      	bhi.n	8004d74 <UART_SetConfig+0xcc>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <UART_SetConfig+0xa4>
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d00a      	beq.n	8004d60 <UART_SetConfig+0xb8>
 8004d4a:	e013      	b.n	8004d74 <UART_SetConfig+0xcc>
 8004d4c:	231f      	movs	r3, #31
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e065      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004d56:	231f      	movs	r3, #31
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	e060      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004d60:	231f      	movs	r3, #31
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	2204      	movs	r2, #4
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e05b      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004d6a:	231f      	movs	r3, #31
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	2208      	movs	r2, #8
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e056      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004d74:	231f      	movs	r3, #31
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	2210      	movs	r2, #16
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	e051      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a89      	ldr	r2, [pc, #548]	; (8004fa8 <UART_SetConfig+0x300>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d134      	bne.n	8004df2 <UART_SetConfig+0x14a>
 8004d88:	4b86      	ldr	r3, [pc, #536]	; (8004fa4 <UART_SetConfig+0x2fc>)
 8004d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8c:	23c0      	movs	r3, #192	; 0xc0
 8004d8e:	029b      	lsls	r3, r3, #10
 8004d90:	4013      	ands	r3, r2
 8004d92:	22c0      	movs	r2, #192	; 0xc0
 8004d94:	0292      	lsls	r2, r2, #10
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d017      	beq.n	8004dca <UART_SetConfig+0x122>
 8004d9a:	22c0      	movs	r2, #192	; 0xc0
 8004d9c:	0292      	lsls	r2, r2, #10
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d822      	bhi.n	8004de8 <UART_SetConfig+0x140>
 8004da2:	2280      	movs	r2, #128	; 0x80
 8004da4:	0292      	lsls	r2, r2, #10
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d019      	beq.n	8004dde <UART_SetConfig+0x136>
 8004daa:	2280      	movs	r2, #128	; 0x80
 8004dac:	0292      	lsls	r2, r2, #10
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d81a      	bhi.n	8004de8 <UART_SetConfig+0x140>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <UART_SetConfig+0x118>
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	0252      	lsls	r2, r2, #9
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00a      	beq.n	8004dd4 <UART_SetConfig+0x12c>
 8004dbe:	e013      	b.n	8004de8 <UART_SetConfig+0x140>
 8004dc0:	231f      	movs	r3, #31
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	e02b      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004dca:	231f      	movs	r3, #31
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	2202      	movs	r2, #2
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e026      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004dd4:	231f      	movs	r3, #31
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	2204      	movs	r2, #4
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e021      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004dde:	231f      	movs	r3, #31
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	2208      	movs	r2, #8
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	e01c      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004de8:	231f      	movs	r3, #31
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	2210      	movs	r2, #16
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	e017      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6d      	ldr	r2, [pc, #436]	; (8004fac <UART_SetConfig+0x304>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d104      	bne.n	8004e06 <UART_SetConfig+0x15e>
 8004dfc:	231f      	movs	r3, #31
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e00d      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a69      	ldr	r2, [pc, #420]	; (8004fb0 <UART_SetConfig+0x308>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d104      	bne.n	8004e1a <UART_SetConfig+0x172>
 8004e10:	231f      	movs	r3, #31
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	e003      	b.n	8004e22 <UART_SetConfig+0x17a>
 8004e1a:	231f      	movs	r3, #31
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	2210      	movs	r2, #16
 8004e20:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d15d      	bne.n	8004eea <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8004e2e:	231f      	movs	r3, #31
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d015      	beq.n	8004e64 <UART_SetConfig+0x1bc>
 8004e38:	dc18      	bgt.n	8004e6c <UART_SetConfig+0x1c4>
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d00d      	beq.n	8004e5a <UART_SetConfig+0x1b2>
 8004e3e:	dc15      	bgt.n	8004e6c <UART_SetConfig+0x1c4>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <UART_SetConfig+0x1a2>
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d005      	beq.n	8004e54 <UART_SetConfig+0x1ac>
 8004e48:	e010      	b.n	8004e6c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e4a:	f7ff fe19 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	61bb      	str	r3, [r7, #24]
        break;
 8004e52:	e012      	b.n	8004e7a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e54:	4b57      	ldr	r3, [pc, #348]	; (8004fb4 <UART_SetConfig+0x30c>)
 8004e56:	61bb      	str	r3, [r7, #24]
        break;
 8004e58:	e00f      	b.n	8004e7a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5a:	f7ff fd87 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	61bb      	str	r3, [r7, #24]
        break;
 8004e62:	e00a      	b.n	8004e7a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	61bb      	str	r3, [r7, #24]
        break;
 8004e6a:	e006      	b.n	8004e7a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e70:	231e      	movs	r3, #30
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	2201      	movs	r2, #1
 8004e76:	701a      	strb	r2, [r3, #0]
        break;
 8004e78:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d100      	bne.n	8004e82 <UART_SetConfig+0x1da>
 8004e80:	e07b      	b.n	8004f7a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	005a      	lsls	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	18d2      	adds	r2, r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	0019      	movs	r1, r3
 8004e94:	0010      	movs	r0, r2
 8004e96:	f7fb f953 	bl	8000140 <__udivsi3>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b0f      	cmp	r3, #15
 8004ea4:	d91c      	bls.n	8004ee0 <UART_SetConfig+0x238>
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	025b      	lsls	r3, r3, #9
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d217      	bcs.n	8004ee0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	200e      	movs	r0, #14
 8004eb6:	183b      	adds	r3, r7, r0
 8004eb8:	210f      	movs	r1, #15
 8004eba:	438a      	bics	r2, r1
 8004ebc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2207      	movs	r2, #7
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	b299      	uxth	r1, r3
 8004eca:	183b      	adds	r3, r7, r0
 8004ecc:	183a      	adds	r2, r7, r0
 8004ece:	8812      	ldrh	r2, [r2, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	183a      	adds	r2, r7, r0
 8004eda:	8812      	ldrh	r2, [r2, #0]
 8004edc:	60da      	str	r2, [r3, #12]
 8004ede:	e04c      	b.n	8004f7a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004ee0:	231e      	movs	r3, #30
 8004ee2:	18fb      	adds	r3, r7, r3
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	e047      	b.n	8004f7a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eea:	231f      	movs	r3, #31
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d015      	beq.n	8004f20 <UART_SetConfig+0x278>
 8004ef4:	dc18      	bgt.n	8004f28 <UART_SetConfig+0x280>
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d00d      	beq.n	8004f16 <UART_SetConfig+0x26e>
 8004efa:	dc15      	bgt.n	8004f28 <UART_SetConfig+0x280>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <UART_SetConfig+0x25e>
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d005      	beq.n	8004f10 <UART_SetConfig+0x268>
 8004f04:	e010      	b.n	8004f28 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f06:	f7ff fdbb 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	61bb      	str	r3, [r7, #24]
        break;
 8004f0e:	e012      	b.n	8004f36 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <UART_SetConfig+0x30c>)
 8004f12:	61bb      	str	r3, [r7, #24]
        break;
 8004f14:	e00f      	b.n	8004f36 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7ff fd29 	bl	800496c <HAL_RCC_GetSysClockFreq>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	61bb      	str	r3, [r7, #24]
        break;
 8004f1e:	e00a      	b.n	8004f36 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	61bb      	str	r3, [r7, #24]
        break;
 8004f26:	e006      	b.n	8004f36 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f2c:	231e      	movs	r3, #30
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
        break;
 8004f34:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01e      	beq.n	8004f7a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	085a      	lsrs	r2, r3, #1
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	18d2      	adds	r2, r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	0010      	movs	r0, r2
 8004f4e:	f7fb f8f7 	bl	8000140 <__udivsi3>
 8004f52:	0003      	movs	r3, r0
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b0f      	cmp	r3, #15
 8004f5c:	d909      	bls.n	8004f72 <UART_SetConfig+0x2ca>
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	025b      	lsls	r3, r3, #9
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d204      	bcs.n	8004f72 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	e003      	b.n	8004f7a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004f72:	231e      	movs	r3, #30
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	2201      	movs	r2, #1
 8004f78:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f86:	231e      	movs	r3, #30
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	781b      	ldrb	r3, [r3, #0]
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b008      	add	sp, #32
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	efff69f3 	.word	0xefff69f3
 8004f98:	ffffcfff 	.word	0xffffcfff
 8004f9c:	fffff4ff 	.word	0xfffff4ff
 8004fa0:	40013800 	.word	0x40013800
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40004400 	.word	0x40004400
 8004fac:	40004800 	.word	0x40004800
 8004fb0:	40004c00 	.word	0x40004c00
 8004fb4:	007a1200 	.word	0x007a1200

08004fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d00b      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4a4a      	ldr	r2, [pc, #296]	; (80050fc <UART_AdvFeatureConfig+0x144>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d00b      	beq.n	8005004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	4a43      	ldr	r2, [pc, #268]	; (8005100 <UART_AdvFeatureConfig+0x148>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2204      	movs	r2, #4
 800500a:	4013      	ands	r3, r2
 800500c:	d00b      	beq.n	8005026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	4a3b      	ldr	r2, [pc, #236]	; (8005104 <UART_AdvFeatureConfig+0x14c>)
 8005016:	4013      	ands	r3, r2
 8005018:	0019      	movs	r1, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	2208      	movs	r2, #8
 800502c:	4013      	ands	r3, r2
 800502e:	d00b      	beq.n	8005048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4a34      	ldr	r2, [pc, #208]	; (8005108 <UART_AdvFeatureConfig+0x150>)
 8005038:	4013      	ands	r3, r2
 800503a:	0019      	movs	r1, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2210      	movs	r2, #16
 800504e:	4013      	ands	r3, r2
 8005050:	d00b      	beq.n	800506a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4a2c      	ldr	r2, [pc, #176]	; (800510c <UART_AdvFeatureConfig+0x154>)
 800505a:	4013      	ands	r3, r2
 800505c:	0019      	movs	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2220      	movs	r2, #32
 8005070:	4013      	ands	r3, r2
 8005072:	d00b      	beq.n	800508c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4a25      	ldr	r2, [pc, #148]	; (8005110 <UART_AdvFeatureConfig+0x158>)
 800507c:	4013      	ands	r3, r2
 800507e:	0019      	movs	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2240      	movs	r2, #64	; 0x40
 8005092:	4013      	ands	r3, r2
 8005094:	d01d      	beq.n	80050d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <UART_AdvFeatureConfig+0x15c>)
 800509e:	4013      	ands	r3, r2
 80050a0:	0019      	movs	r1, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b2:	2380      	movs	r3, #128	; 0x80
 80050b4:	035b      	lsls	r3, r3, #13
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d10b      	bne.n	80050d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a15      	ldr	r2, [pc, #84]	; (8005118 <UART_AdvFeatureConfig+0x160>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	0019      	movs	r1, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2280      	movs	r2, #128	; 0x80
 80050d8:	4013      	ands	r3, r2
 80050da:	d00b      	beq.n	80050f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4a0e      	ldr	r2, [pc, #56]	; (800511c <UART_AdvFeatureConfig+0x164>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	0019      	movs	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }
}
 80050f4:	46c0      	nop			; (mov r8, r8)
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b002      	add	sp, #8
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	fffdffff 	.word	0xfffdffff
 8005100:	fffeffff 	.word	0xfffeffff
 8005104:	fffbffff 	.word	0xfffbffff
 8005108:	ffff7fff 	.word	0xffff7fff
 800510c:	ffffefff 	.word	0xffffefff
 8005110:	ffffdfff 	.word	0xffffdfff
 8005114:	ffefffff 	.word	0xffefffff
 8005118:	ff9fffff 	.word	0xff9fffff
 800511c:	fff7ffff 	.word	0xfff7ffff

08005120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	2100      	movs	r1, #0
 800512e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005130:	f7fd ff62 	bl	8002ff8 <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2208      	movs	r2, #8
 8005140:	4013      	ands	r3, r2
 8005142:	2b08      	cmp	r3, #8
 8005144:	d10c      	bne.n	8005160 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2280      	movs	r2, #128	; 0x80
 800514a:	0391      	lsls	r1, r2, #14
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	4a17      	ldr	r2, [pc, #92]	; (80051ac <UART_CheckIdleState+0x8c>)
 8005150:	9200      	str	r2, [sp, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	f000 f82c 	bl	80051b0 <UART_WaitOnFlagUntilTimeout>
 8005158:	1e03      	subs	r3, r0, #0
 800515a:	d001      	beq.n	8005160 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e021      	b.n	80051a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2204      	movs	r2, #4
 8005168:	4013      	ands	r3, r2
 800516a:	2b04      	cmp	r3, #4
 800516c:	d10c      	bne.n	8005188 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2280      	movs	r2, #128	; 0x80
 8005172:	03d1      	lsls	r1, r2, #15
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <UART_CheckIdleState+0x8c>)
 8005178:	9200      	str	r2, [sp, #0]
 800517a:	2200      	movs	r2, #0
 800517c:	f000 f818 	bl	80051b0 <UART_WaitOnFlagUntilTimeout>
 8005180:	1e03      	subs	r3, r0, #0
 8005182:	d001      	beq.n	8005188 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e00d      	b.n	80051a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2274      	movs	r2, #116	; 0x74
 800519e:	2100      	movs	r1, #0
 80051a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b004      	add	sp, #16
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	01ffffff 	.word	0x01ffffff

080051b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b094      	sub	sp, #80	; 0x50
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c0:	e0a3      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c4:	3301      	adds	r3, #1
 80051c6:	d100      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80051c8:	e09f      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ca:	f7fd ff15 	bl	8002ff8 <HAL_GetTick>
 80051ce:	0002      	movs	r2, r0
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d13d      	bne.n	800525c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e0:	f3ef 8310 	mrs	r3, PRIMASK
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
 80051ea:	2301      	movs	r3, #1
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	494c      	ldr	r1, [pc, #304]	; (8005334 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005202:	400a      	ands	r2, r1
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005208:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	f383 8810 	msr	PRIMASK, r3
}
 8005210:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005212:	f3ef 8310 	mrs	r3, PRIMASK
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521a:	643b      	str	r3, [r7, #64]	; 0x40
 800521c:	2301      	movs	r3, #1
 800521e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	f383 8810 	msr	PRIMASK, r3
}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2101      	movs	r1, #1
 8005234:	438a      	bics	r2, r1
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523e:	f383 8810 	msr	PRIMASK, r3
}
 8005242:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2274      	movs	r2, #116	; 0x74
 8005254:	2100      	movs	r1, #0
 8005256:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e067      	b.n	800532c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2204      	movs	r2, #4
 8005264:	4013      	ands	r3, r2
 8005266:	d050      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69da      	ldr	r2, [r3, #28]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	401a      	ands	r2, r3
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	429a      	cmp	r2, r3
 800527a:	d146      	bne.n	800530a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2280      	movs	r2, #128	; 0x80
 8005282:	0112      	lsls	r2, r2, #4
 8005284:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005286:	f3ef 8310 	mrs	r3, PRIMASK
 800528a:	613b      	str	r3, [r7, #16]
  return(result);
 800528c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005290:	2301      	movs	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f383 8810 	msr	PRIMASK, r3
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4923      	ldr	r1, [pc, #140]	; (8005334 <UART_WaitOnFlagUntilTimeout+0x184>)
 80052a8:	400a      	ands	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f383 8810 	msr	PRIMASK, r3
}
 80052b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b8:	f3ef 8310 	mrs	r3, PRIMASK
 80052bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80052be:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052c2:	2301      	movs	r3, #1
 80052c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f383 8810 	msr	PRIMASK, r3
}
 80052cc:	46c0      	nop			; (mov r8, r8)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2101      	movs	r1, #1
 80052da:	438a      	bics	r2, r1
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2280      	movs	r2, #128	; 0x80
 80052fa:	2120      	movs	r1, #32
 80052fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2274      	movs	r2, #116	; 0x74
 8005302:	2100      	movs	r1, #0
 8005304:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e010      	b.n	800532c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	4013      	ands	r3, r2
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	425a      	negs	r2, r3
 800531a:	4153      	adcs	r3, r2
 800531c:	b2db      	uxtb	r3, r3
 800531e:	001a      	movs	r2, r3
 8005320:	1dfb      	adds	r3, r7, #7
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d100      	bne.n	800532a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005328:	e74b      	b.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	0018      	movs	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	b014      	add	sp, #80	; 0x50
 8005332:	bd80      	pop	{r7, pc}
 8005334:	fffffe5f 	.word	0xfffffe5f

08005338 <__errno>:
 8005338:	4b01      	ldr	r3, [pc, #4]	; (8005340 <__errno+0x8>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	4770      	bx	lr
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	2000000c 	.word	0x2000000c

08005344 <__libc_init_array>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	2600      	movs	r6, #0
 8005348:	4d0c      	ldr	r5, [pc, #48]	; (800537c <__libc_init_array+0x38>)
 800534a:	4c0d      	ldr	r4, [pc, #52]	; (8005380 <__libc_init_array+0x3c>)
 800534c:	1b64      	subs	r4, r4, r5
 800534e:	10a4      	asrs	r4, r4, #2
 8005350:	42a6      	cmp	r6, r4
 8005352:	d109      	bne.n	8005368 <__libc_init_array+0x24>
 8005354:	2600      	movs	r6, #0
 8005356:	f002 ff6d 	bl	8008234 <_init>
 800535a:	4d0a      	ldr	r5, [pc, #40]	; (8005384 <__libc_init_array+0x40>)
 800535c:	4c0a      	ldr	r4, [pc, #40]	; (8005388 <__libc_init_array+0x44>)
 800535e:	1b64      	subs	r4, r4, r5
 8005360:	10a4      	asrs	r4, r4, #2
 8005362:	42a6      	cmp	r6, r4
 8005364:	d105      	bne.n	8005372 <__libc_init_array+0x2e>
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	00b3      	lsls	r3, r6, #2
 800536a:	58eb      	ldr	r3, [r5, r3]
 800536c:	4798      	blx	r3
 800536e:	3601      	adds	r6, #1
 8005370:	e7ee      	b.n	8005350 <__libc_init_array+0xc>
 8005372:	00b3      	lsls	r3, r6, #2
 8005374:	58eb      	ldr	r3, [r5, r3]
 8005376:	4798      	blx	r3
 8005378:	3601      	adds	r6, #1
 800537a:	e7f2      	b.n	8005362 <__libc_init_array+0x1e>
 800537c:	080087ec 	.word	0x080087ec
 8005380:	080087ec 	.word	0x080087ec
 8005384:	080087ec 	.word	0x080087ec
 8005388:	080087f0 	.word	0x080087f0

0800538c <memset>:
 800538c:	0003      	movs	r3, r0
 800538e:	1882      	adds	r2, r0, r2
 8005390:	4293      	cmp	r3, r2
 8005392:	d100      	bne.n	8005396 <memset+0xa>
 8005394:	4770      	bx	lr
 8005396:	7019      	strb	r1, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	e7f9      	b.n	8005390 <memset+0x4>

0800539c <__cvt>:
 800539c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539e:	001e      	movs	r6, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	0014      	movs	r4, r2
 80053a4:	b08b      	sub	sp, #44	; 0x2c
 80053a6:	429e      	cmp	r6, r3
 80053a8:	da04      	bge.n	80053b4 <__cvt+0x18>
 80053aa:	2180      	movs	r1, #128	; 0x80
 80053ac:	0609      	lsls	r1, r1, #24
 80053ae:	1873      	adds	r3, r6, r1
 80053b0:	001e      	movs	r6, r3
 80053b2:	232d      	movs	r3, #45	; 0x2d
 80053b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053b6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80053b8:	7013      	strb	r3, [r2, #0]
 80053ba:	2320      	movs	r3, #32
 80053bc:	2203      	movs	r2, #3
 80053be:	439f      	bics	r7, r3
 80053c0:	2f46      	cmp	r7, #70	; 0x46
 80053c2:	d007      	beq.n	80053d4 <__cvt+0x38>
 80053c4:	003b      	movs	r3, r7
 80053c6:	3b45      	subs	r3, #69	; 0x45
 80053c8:	4259      	negs	r1, r3
 80053ca:	414b      	adcs	r3, r1
 80053cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80053ce:	3a01      	subs	r2, #1
 80053d0:	18cb      	adds	r3, r1, r3
 80053d2:	9310      	str	r3, [sp, #64]	; 0x40
 80053d4:	ab09      	add	r3, sp, #36	; 0x24
 80053d6:	9304      	str	r3, [sp, #16]
 80053d8:	ab08      	add	r3, sp, #32
 80053da:	9303      	str	r3, [sp, #12]
 80053dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053de:	9200      	str	r2, [sp, #0]
 80053e0:	9302      	str	r3, [sp, #8]
 80053e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053e4:	0022      	movs	r2, r4
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	0033      	movs	r3, r6
 80053ea:	f000 fcfd 	bl	8005de8 <_dtoa_r>
 80053ee:	0005      	movs	r5, r0
 80053f0:	2f47      	cmp	r7, #71	; 0x47
 80053f2:	d102      	bne.n	80053fa <__cvt+0x5e>
 80053f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053f6:	07db      	lsls	r3, r3, #31
 80053f8:	d528      	bpl.n	800544c <__cvt+0xb0>
 80053fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053fc:	18eb      	adds	r3, r5, r3
 80053fe:	9307      	str	r3, [sp, #28]
 8005400:	2f46      	cmp	r7, #70	; 0x46
 8005402:	d114      	bne.n	800542e <__cvt+0x92>
 8005404:	782b      	ldrb	r3, [r5, #0]
 8005406:	2b30      	cmp	r3, #48	; 0x30
 8005408:	d10c      	bne.n	8005424 <__cvt+0x88>
 800540a:	2200      	movs	r2, #0
 800540c:	2300      	movs	r3, #0
 800540e:	0020      	movs	r0, r4
 8005410:	0031      	movs	r1, r6
 8005412:	f7fb f81b 	bl	800044c <__aeabi_dcmpeq>
 8005416:	2800      	cmp	r0, #0
 8005418:	d104      	bne.n	8005424 <__cvt+0x88>
 800541a:	2301      	movs	r3, #1
 800541c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005426:	9a07      	ldr	r2, [sp, #28]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	18d3      	adds	r3, r2, r3
 800542c:	9307      	str	r3, [sp, #28]
 800542e:	2200      	movs	r2, #0
 8005430:	2300      	movs	r3, #0
 8005432:	0020      	movs	r0, r4
 8005434:	0031      	movs	r1, r6
 8005436:	f7fb f809 	bl	800044c <__aeabi_dcmpeq>
 800543a:	2800      	cmp	r0, #0
 800543c:	d001      	beq.n	8005442 <__cvt+0xa6>
 800543e:	9b07      	ldr	r3, [sp, #28]
 8005440:	9309      	str	r3, [sp, #36]	; 0x24
 8005442:	2230      	movs	r2, #48	; 0x30
 8005444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005446:	9907      	ldr	r1, [sp, #28]
 8005448:	428b      	cmp	r3, r1
 800544a:	d306      	bcc.n	800545a <__cvt+0xbe>
 800544c:	0028      	movs	r0, r5
 800544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005450:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005452:	1b5b      	subs	r3, r3, r5
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	b00b      	add	sp, #44	; 0x2c
 8005458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545a:	1c59      	adds	r1, r3, #1
 800545c:	9109      	str	r1, [sp, #36]	; 0x24
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e7f0      	b.n	8005444 <__cvt+0xa8>

08005462 <__exponent>:
 8005462:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005464:	1c83      	adds	r3, r0, #2
 8005466:	b087      	sub	sp, #28
 8005468:	9303      	str	r3, [sp, #12]
 800546a:	0005      	movs	r5, r0
 800546c:	000c      	movs	r4, r1
 800546e:	232b      	movs	r3, #43	; 0x2b
 8005470:	7002      	strb	r2, [r0, #0]
 8005472:	2900      	cmp	r1, #0
 8005474:	da01      	bge.n	800547a <__exponent+0x18>
 8005476:	424c      	negs	r4, r1
 8005478:	3302      	adds	r3, #2
 800547a:	706b      	strb	r3, [r5, #1]
 800547c:	2c09      	cmp	r4, #9
 800547e:	dd31      	ble.n	80054e4 <__exponent+0x82>
 8005480:	270a      	movs	r7, #10
 8005482:	ab04      	add	r3, sp, #16
 8005484:	1dde      	adds	r6, r3, #7
 8005486:	0020      	movs	r0, r4
 8005488:	0039      	movs	r1, r7
 800548a:	9601      	str	r6, [sp, #4]
 800548c:	f7fa ffc8 	bl	8000420 <__aeabi_idivmod>
 8005490:	3e01      	subs	r6, #1
 8005492:	3130      	adds	r1, #48	; 0x30
 8005494:	0020      	movs	r0, r4
 8005496:	7031      	strb	r1, [r6, #0]
 8005498:	0039      	movs	r1, r7
 800549a:	9402      	str	r4, [sp, #8]
 800549c:	f7fa feda 	bl	8000254 <__divsi3>
 80054a0:	9b02      	ldr	r3, [sp, #8]
 80054a2:	0004      	movs	r4, r0
 80054a4:	2b63      	cmp	r3, #99	; 0x63
 80054a6:	dcee      	bgt.n	8005486 <__exponent+0x24>
 80054a8:	9b01      	ldr	r3, [sp, #4]
 80054aa:	3430      	adds	r4, #48	; 0x30
 80054ac:	1e9a      	subs	r2, r3, #2
 80054ae:	0013      	movs	r3, r2
 80054b0:	9903      	ldr	r1, [sp, #12]
 80054b2:	7014      	strb	r4, [r2, #0]
 80054b4:	a804      	add	r0, sp, #16
 80054b6:	3007      	adds	r0, #7
 80054b8:	4298      	cmp	r0, r3
 80054ba:	d80e      	bhi.n	80054da <__exponent+0x78>
 80054bc:	ab04      	add	r3, sp, #16
 80054be:	3307      	adds	r3, #7
 80054c0:	2000      	movs	r0, #0
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d804      	bhi.n	80054d0 <__exponent+0x6e>
 80054c6:	ab04      	add	r3, sp, #16
 80054c8:	3009      	adds	r0, #9
 80054ca:	18c0      	adds	r0, r0, r3
 80054cc:	9b01      	ldr	r3, [sp, #4]
 80054ce:	1ac0      	subs	r0, r0, r3
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	1818      	adds	r0, r3, r0
 80054d4:	1b40      	subs	r0, r0, r5
 80054d6:	b007      	add	sp, #28
 80054d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054da:	7818      	ldrb	r0, [r3, #0]
 80054dc:	3301      	adds	r3, #1
 80054de:	7008      	strb	r0, [r1, #0]
 80054e0:	3101      	adds	r1, #1
 80054e2:	e7e7      	b.n	80054b4 <__exponent+0x52>
 80054e4:	2330      	movs	r3, #48	; 0x30
 80054e6:	18e4      	adds	r4, r4, r3
 80054e8:	70ab      	strb	r3, [r5, #2]
 80054ea:	1d28      	adds	r0, r5, #4
 80054ec:	70ec      	strb	r4, [r5, #3]
 80054ee:	e7f1      	b.n	80054d4 <__exponent+0x72>

080054f0 <_printf_float>:
 80054f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f2:	b095      	sub	sp, #84	; 0x54
 80054f4:	000c      	movs	r4, r1
 80054f6:	9208      	str	r2, [sp, #32]
 80054f8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80054fa:	9309      	str	r3, [sp, #36]	; 0x24
 80054fc:	0007      	movs	r7, r0
 80054fe:	f001 fa91 	bl	8006a24 <_localeconv_r>
 8005502:	6803      	ldr	r3, [r0, #0]
 8005504:	0018      	movs	r0, r3
 8005506:	930b      	str	r3, [sp, #44]	; 0x2c
 8005508:	f7fa fdfe 	bl	8000108 <strlen>
 800550c:	2300      	movs	r3, #0
 800550e:	9312      	str	r3, [sp, #72]	; 0x48
 8005510:	7e23      	ldrb	r3, [r4, #24]
 8005512:	2207      	movs	r2, #7
 8005514:	001e      	movs	r6, r3
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	900d      	str	r0, [sp, #52]	; 0x34
 800551a:	930c      	str	r3, [sp, #48]	; 0x30
 800551c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800551e:	682b      	ldr	r3, [r5, #0]
 8005520:	05c9      	lsls	r1, r1, #23
 8005522:	d547      	bpl.n	80055b4 <_printf_float+0xc4>
 8005524:	189b      	adds	r3, r3, r2
 8005526:	4393      	bics	r3, r2
 8005528:	001a      	movs	r2, r3
 800552a:	3208      	adds	r2, #8
 800552c:	602a      	str	r2, [r5, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	64a2      	str	r2, [r4, #72]	; 0x48
 8005534:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005536:	2201      	movs	r2, #1
 8005538:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800553a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800553c:	930a      	str	r3, [sp, #40]	; 0x28
 800553e:	006b      	lsls	r3, r5, #1
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	930e      	str	r3, [sp, #56]	; 0x38
 8005544:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005546:	4ba8      	ldr	r3, [pc, #672]	; (80057e8 <_printf_float+0x2f8>)
 8005548:	990e      	ldr	r1, [sp, #56]	; 0x38
 800554a:	4252      	negs	r2, r2
 800554c:	f7fc fe6c 	bl	8002228 <__aeabi_dcmpun>
 8005550:	2800      	cmp	r0, #0
 8005552:	d131      	bne.n	80055b8 <_printf_float+0xc8>
 8005554:	2201      	movs	r2, #1
 8005556:	4ba4      	ldr	r3, [pc, #656]	; (80057e8 <_printf_float+0x2f8>)
 8005558:	980a      	ldr	r0, [sp, #40]	; 0x28
 800555a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800555c:	4252      	negs	r2, r2
 800555e:	f7fa ff85 	bl	800046c <__aeabi_dcmple>
 8005562:	2800      	cmp	r0, #0
 8005564:	d128      	bne.n	80055b8 <_printf_float+0xc8>
 8005566:	2200      	movs	r2, #0
 8005568:	2300      	movs	r3, #0
 800556a:	0029      	movs	r1, r5
 800556c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800556e:	f7fa ff73 	bl	8000458 <__aeabi_dcmplt>
 8005572:	2800      	cmp	r0, #0
 8005574:	d003      	beq.n	800557e <_printf_float+0x8e>
 8005576:	0023      	movs	r3, r4
 8005578:	222d      	movs	r2, #45	; 0x2d
 800557a:	3343      	adds	r3, #67	; 0x43
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	4d9b      	ldr	r5, [pc, #620]	; (80057ec <_printf_float+0x2fc>)
 8005580:	2e47      	cmp	r6, #71	; 0x47
 8005582:	d900      	bls.n	8005586 <_printf_float+0x96>
 8005584:	4d9a      	ldr	r5, [pc, #616]	; (80057f0 <_printf_float+0x300>)
 8005586:	2303      	movs	r3, #3
 8005588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800558a:	6123      	str	r3, [r4, #16]
 800558c:	3301      	adds	r3, #1
 800558e:	439a      	bics	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	6022      	str	r2, [r4, #0]
 8005594:	930a      	str	r3, [sp, #40]	; 0x28
 8005596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005598:	0021      	movs	r1, r4
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	0038      	movs	r0, r7
 800559e:	9b08      	ldr	r3, [sp, #32]
 80055a0:	aa13      	add	r2, sp, #76	; 0x4c
 80055a2:	f000 f9f3 	bl	800598c <_printf_common>
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	d000      	beq.n	80055ac <_printf_float+0xbc>
 80055aa:	e09e      	b.n	80056ea <_printf_float+0x1fa>
 80055ac:	2001      	movs	r0, #1
 80055ae:	4240      	negs	r0, r0
 80055b0:	b015      	add	sp, #84	; 0x54
 80055b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b4:	3307      	adds	r3, #7
 80055b6:	e7b6      	b.n	8005526 <_printf_float+0x36>
 80055b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ba:	002b      	movs	r3, r5
 80055bc:	0010      	movs	r0, r2
 80055be:	0029      	movs	r1, r5
 80055c0:	f7fc fe32 	bl	8002228 <__aeabi_dcmpun>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d00a      	beq.n	80055de <_printf_float+0xee>
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	da03      	bge.n	80055d4 <_printf_float+0xe4>
 80055cc:	0023      	movs	r3, r4
 80055ce:	222d      	movs	r2, #45	; 0x2d
 80055d0:	3343      	adds	r3, #67	; 0x43
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	4d87      	ldr	r5, [pc, #540]	; (80057f4 <_printf_float+0x304>)
 80055d6:	2e47      	cmp	r6, #71	; 0x47
 80055d8:	d9d5      	bls.n	8005586 <_printf_float+0x96>
 80055da:	4d87      	ldr	r5, [pc, #540]	; (80057f8 <_printf_float+0x308>)
 80055dc:	e7d3      	b.n	8005586 <_printf_float+0x96>
 80055de:	2220      	movs	r2, #32
 80055e0:	0031      	movs	r1, r6
 80055e2:	6863      	ldr	r3, [r4, #4]
 80055e4:	4391      	bics	r1, r2
 80055e6:	910e      	str	r1, [sp, #56]	; 0x38
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	d147      	bne.n	800567c <_printf_float+0x18c>
 80055ec:	3307      	adds	r3, #7
 80055ee:	6063      	str	r3, [r4, #4]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4313      	orrs	r3, r2
 80055f8:	2200      	movs	r2, #0
 80055fa:	9206      	str	r2, [sp, #24]
 80055fc:	aa12      	add	r2, sp, #72	; 0x48
 80055fe:	9205      	str	r2, [sp, #20]
 8005600:	aa11      	add	r2, sp, #68	; 0x44
 8005602:	9203      	str	r2, [sp, #12]
 8005604:	2223      	movs	r2, #35	; 0x23
 8005606:	a908      	add	r1, sp, #32
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	1852      	adds	r2, r2, r1
 8005610:	9202      	str	r2, [sp, #8]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	0038      	movs	r0, r7
 8005616:	002b      	movs	r3, r5
 8005618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800561a:	9604      	str	r6, [sp, #16]
 800561c:	f7ff febe 	bl	800539c <__cvt>
 8005620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005622:	0005      	movs	r5, r0
 8005624:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005626:	2b47      	cmp	r3, #71	; 0x47
 8005628:	d108      	bne.n	800563c <_printf_float+0x14c>
 800562a:	1ccb      	adds	r3, r1, #3
 800562c:	db02      	blt.n	8005634 <_printf_float+0x144>
 800562e:	6863      	ldr	r3, [r4, #4]
 8005630:	4299      	cmp	r1, r3
 8005632:	dd46      	ble.n	80056c2 <_printf_float+0x1d2>
 8005634:	0033      	movs	r3, r6
 8005636:	3b02      	subs	r3, #2
 8005638:	b2db      	uxtb	r3, r3
 800563a:	001e      	movs	r6, r3
 800563c:	2e65      	cmp	r6, #101	; 0x65
 800563e:	d824      	bhi.n	800568a <_printf_float+0x19a>
 8005640:	0020      	movs	r0, r4
 8005642:	0032      	movs	r2, r6
 8005644:	3901      	subs	r1, #1
 8005646:	3050      	adds	r0, #80	; 0x50
 8005648:	9111      	str	r1, [sp, #68]	; 0x44
 800564a:	f7ff ff0a 	bl	8005462 <__exponent>
 800564e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005650:	900a      	str	r0, [sp, #40]	; 0x28
 8005652:	1813      	adds	r3, r2, r0
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	2a01      	cmp	r2, #1
 8005658:	dc02      	bgt.n	8005660 <_printf_float+0x170>
 800565a:	6822      	ldr	r2, [r4, #0]
 800565c:	07d2      	lsls	r2, r2, #31
 800565e:	d501      	bpl.n	8005664 <_printf_float+0x174>
 8005660:	3301      	adds	r3, #1
 8005662:	6123      	str	r3, [r4, #16]
 8005664:	2323      	movs	r3, #35	; 0x23
 8005666:	aa08      	add	r2, sp, #32
 8005668:	189b      	adds	r3, r3, r2
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d100      	bne.n	8005672 <_printf_float+0x182>
 8005670:	e791      	b.n	8005596 <_printf_float+0xa6>
 8005672:	0023      	movs	r3, r4
 8005674:	222d      	movs	r2, #45	; 0x2d
 8005676:	3343      	adds	r3, #67	; 0x43
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	e78c      	b.n	8005596 <_printf_float+0xa6>
 800567c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800567e:	2a47      	cmp	r2, #71	; 0x47
 8005680:	d1b6      	bne.n	80055f0 <_printf_float+0x100>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1b4      	bne.n	80055f0 <_printf_float+0x100>
 8005686:	3301      	adds	r3, #1
 8005688:	e7b1      	b.n	80055ee <_printf_float+0xfe>
 800568a:	2e66      	cmp	r6, #102	; 0x66
 800568c:	d11b      	bne.n	80056c6 <_printf_float+0x1d6>
 800568e:	6863      	ldr	r3, [r4, #4]
 8005690:	2900      	cmp	r1, #0
 8005692:	dd0d      	ble.n	80056b0 <_printf_float+0x1c0>
 8005694:	6121      	str	r1, [r4, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <_printf_float+0x1b0>
 800569a:	6822      	ldr	r2, [r4, #0]
 800569c:	07d2      	lsls	r2, r2, #31
 800569e:	d502      	bpl.n	80056a6 <_printf_float+0x1b6>
 80056a0:	3301      	adds	r3, #1
 80056a2:	1859      	adds	r1, r3, r1
 80056a4:	6121      	str	r1, [r4, #16]
 80056a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80056aa:	2300      	movs	r3, #0
 80056ac:	930a      	str	r3, [sp, #40]	; 0x28
 80056ae:	e7d9      	b.n	8005664 <_printf_float+0x174>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <_printf_float+0x1cc>
 80056b4:	2201      	movs	r2, #1
 80056b6:	6821      	ldr	r1, [r4, #0]
 80056b8:	4211      	tst	r1, r2
 80056ba:	d000      	beq.n	80056be <_printf_float+0x1ce>
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	6122      	str	r2, [r4, #16]
 80056c0:	e7f1      	b.n	80056a6 <_printf_float+0x1b6>
 80056c2:	2367      	movs	r3, #103	; 0x67
 80056c4:	001e      	movs	r6, r3
 80056c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056ca:	4293      	cmp	r3, r2
 80056cc:	db06      	blt.n	80056dc <_printf_float+0x1ec>
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	07d2      	lsls	r2, r2, #31
 80056d4:	d5e7      	bpl.n	80056a6 <_printf_float+0x1b6>
 80056d6:	3301      	adds	r3, #1
 80056d8:	6123      	str	r3, [r4, #16]
 80056da:	e7e4      	b.n	80056a6 <_printf_float+0x1b6>
 80056dc:	2101      	movs	r1, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	dc01      	bgt.n	80056e6 <_printf_float+0x1f6>
 80056e2:	1849      	adds	r1, r1, r1
 80056e4:	1ac9      	subs	r1, r1, r3
 80056e6:	1852      	adds	r2, r2, r1
 80056e8:	e7e9      	b.n	80056be <_printf_float+0x1ce>
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	0553      	lsls	r3, r2, #21
 80056ee:	d408      	bmi.n	8005702 <_printf_float+0x212>
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	002a      	movs	r2, r5
 80056f4:	0038      	movs	r0, r7
 80056f6:	9908      	ldr	r1, [sp, #32]
 80056f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80056fa:	47a8      	blx	r5
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d129      	bne.n	8005754 <_printf_float+0x264>
 8005700:	e754      	b.n	80055ac <_printf_float+0xbc>
 8005702:	2e65      	cmp	r6, #101	; 0x65
 8005704:	d800      	bhi.n	8005708 <_printf_float+0x218>
 8005706:	e0ec      	b.n	80058e2 <_printf_float+0x3f2>
 8005708:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800570a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	f7fa fe9c 	bl	800044c <__aeabi_dcmpeq>
 8005714:	2800      	cmp	r0, #0
 8005716:	d034      	beq.n	8005782 <_printf_float+0x292>
 8005718:	2301      	movs	r3, #1
 800571a:	0038      	movs	r0, r7
 800571c:	4a37      	ldr	r2, [pc, #220]	; (80057fc <_printf_float+0x30c>)
 800571e:	9908      	ldr	r1, [sp, #32]
 8005720:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005722:	47a8      	blx	r5
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d100      	bne.n	800572a <_printf_float+0x23a>
 8005728:	e740      	b.n	80055ac <_printf_float+0xbc>
 800572a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800572c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800572e:	4293      	cmp	r3, r2
 8005730:	db02      	blt.n	8005738 <_printf_float+0x248>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	07db      	lsls	r3, r3, #31
 8005736:	d50d      	bpl.n	8005754 <_printf_float+0x264>
 8005738:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800573a:	0038      	movs	r0, r7
 800573c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800573e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005740:	9908      	ldr	r1, [sp, #32]
 8005742:	47a8      	blx	r5
 8005744:	2500      	movs	r5, #0
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d100      	bne.n	800574c <_printf_float+0x25c>
 800574a:	e72f      	b.n	80055ac <_printf_float+0xbc>
 800574c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800574e:	3b01      	subs	r3, #1
 8005750:	42ab      	cmp	r3, r5
 8005752:	dc0a      	bgt.n	800576a <_printf_float+0x27a>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	079b      	lsls	r3, r3, #30
 8005758:	d500      	bpl.n	800575c <_printf_float+0x26c>
 800575a:	e114      	b.n	8005986 <_printf_float+0x496>
 800575c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800575e:	68e0      	ldr	r0, [r4, #12]
 8005760:	4298      	cmp	r0, r3
 8005762:	db00      	blt.n	8005766 <_printf_float+0x276>
 8005764:	e724      	b.n	80055b0 <_printf_float+0xc0>
 8005766:	0018      	movs	r0, r3
 8005768:	e722      	b.n	80055b0 <_printf_float+0xc0>
 800576a:	0022      	movs	r2, r4
 800576c:	2301      	movs	r3, #1
 800576e:	0038      	movs	r0, r7
 8005770:	9908      	ldr	r1, [sp, #32]
 8005772:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005774:	321a      	adds	r2, #26
 8005776:	47b0      	blx	r6
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d100      	bne.n	800577e <_printf_float+0x28e>
 800577c:	e716      	b.n	80055ac <_printf_float+0xbc>
 800577e:	3501      	adds	r5, #1
 8005780:	e7e4      	b.n	800574c <_printf_float+0x25c>
 8005782:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005784:	2b00      	cmp	r3, #0
 8005786:	dc3b      	bgt.n	8005800 <_printf_float+0x310>
 8005788:	2301      	movs	r3, #1
 800578a:	0038      	movs	r0, r7
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <_printf_float+0x30c>)
 800578e:	9908      	ldr	r1, [sp, #32]
 8005790:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005792:	47b0      	blx	r6
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d100      	bne.n	800579a <_printf_float+0x2aa>
 8005798:	e708      	b.n	80055ac <_printf_float+0xbc>
 800579a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800579c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800579e:	4313      	orrs	r3, r2
 80057a0:	d102      	bne.n	80057a8 <_printf_float+0x2b8>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	07db      	lsls	r3, r3, #31
 80057a6:	d5d5      	bpl.n	8005754 <_printf_float+0x264>
 80057a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057aa:	0038      	movs	r0, r7
 80057ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057ae:	9908      	ldr	r1, [sp, #32]
 80057b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80057b2:	47b0      	blx	r6
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d100      	bne.n	80057ba <_printf_float+0x2ca>
 80057b8:	e6f8      	b.n	80055ac <_printf_float+0xbc>
 80057ba:	2300      	movs	r3, #0
 80057bc:	930a      	str	r3, [sp, #40]	; 0x28
 80057be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057c2:	425b      	negs	r3, r3
 80057c4:	4293      	cmp	r3, r2
 80057c6:	dc01      	bgt.n	80057cc <_printf_float+0x2dc>
 80057c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057ca:	e792      	b.n	80056f2 <_printf_float+0x202>
 80057cc:	0022      	movs	r2, r4
 80057ce:	2301      	movs	r3, #1
 80057d0:	0038      	movs	r0, r7
 80057d2:	9908      	ldr	r1, [sp, #32]
 80057d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80057d6:	321a      	adds	r2, #26
 80057d8:	47b0      	blx	r6
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	d100      	bne.n	80057e0 <_printf_float+0x2f0>
 80057de:	e6e5      	b.n	80055ac <_printf_float+0xbc>
 80057e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e2:	3301      	adds	r3, #1
 80057e4:	e7ea      	b.n	80057bc <_printf_float+0x2cc>
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	7fefffff 	.word	0x7fefffff
 80057ec:	0800840c 	.word	0x0800840c
 80057f0:	08008410 	.word	0x08008410
 80057f4:	08008414 	.word	0x08008414
 80057f8:	08008418 	.word	0x08008418
 80057fc:	0800841c 	.word	0x0800841c
 8005800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005802:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005804:	920a      	str	r2, [sp, #40]	; 0x28
 8005806:	429a      	cmp	r2, r3
 8005808:	dd00      	ble.n	800580c <_printf_float+0x31c>
 800580a:	930a      	str	r3, [sp, #40]	; 0x28
 800580c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	dc3d      	bgt.n	800588e <_printf_float+0x39e>
 8005812:	2300      	movs	r3, #0
 8005814:	930e      	str	r3, [sp, #56]	; 0x38
 8005816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005818:	43db      	mvns	r3, r3
 800581a:	17db      	asrs	r3, r3, #31
 800581c:	930f      	str	r3, [sp, #60]	; 0x3c
 800581e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005822:	930c      	str	r3, [sp, #48]	; 0x30
 8005824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005826:	4013      	ands	r3, r2
 8005828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800582e:	4293      	cmp	r3, r2
 8005830:	dc36      	bgt.n	80058a0 <_printf_float+0x3b0>
 8005832:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005836:	4293      	cmp	r3, r2
 8005838:	db40      	blt.n	80058bc <_printf_float+0x3cc>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	07db      	lsls	r3, r3, #31
 800583e:	d43d      	bmi.n	80058bc <_printf_float+0x3cc>
 8005840:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005844:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	1a52      	subs	r2, r2, r1
 800584a:	920a      	str	r2, [sp, #40]	; 0x28
 800584c:	429a      	cmp	r2, r3
 800584e:	dd00      	ble.n	8005852 <_printf_float+0x362>
 8005850:	930a      	str	r3, [sp, #40]	; 0x28
 8005852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	dc3a      	bgt.n	80058ce <_printf_float+0x3de>
 8005858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585a:	2500      	movs	r5, #0
 800585c:	43db      	mvns	r3, r3
 800585e:	17db      	asrs	r3, r3, #31
 8005860:	930b      	str	r3, [sp, #44]	; 0x2c
 8005862:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005866:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800586c:	400a      	ands	r2, r1
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	42ab      	cmp	r3, r5
 8005872:	dc00      	bgt.n	8005876 <_printf_float+0x386>
 8005874:	e76e      	b.n	8005754 <_printf_float+0x264>
 8005876:	0022      	movs	r2, r4
 8005878:	2301      	movs	r3, #1
 800587a:	0038      	movs	r0, r7
 800587c:	9908      	ldr	r1, [sp, #32]
 800587e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005880:	321a      	adds	r2, #26
 8005882:	47b0      	blx	r6
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d100      	bne.n	800588a <_printf_float+0x39a>
 8005888:	e690      	b.n	80055ac <_printf_float+0xbc>
 800588a:	3501      	adds	r5, #1
 800588c:	e7e9      	b.n	8005862 <_printf_float+0x372>
 800588e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005890:	002a      	movs	r2, r5
 8005892:	0038      	movs	r0, r7
 8005894:	9908      	ldr	r1, [sp, #32]
 8005896:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005898:	47b0      	blx	r6
 800589a:	1c43      	adds	r3, r0, #1
 800589c:	d1b9      	bne.n	8005812 <_printf_float+0x322>
 800589e:	e685      	b.n	80055ac <_printf_float+0xbc>
 80058a0:	0022      	movs	r2, r4
 80058a2:	2301      	movs	r3, #1
 80058a4:	0038      	movs	r0, r7
 80058a6:	9908      	ldr	r1, [sp, #32]
 80058a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80058aa:	321a      	adds	r2, #26
 80058ac:	47b0      	blx	r6
 80058ae:	1c43      	adds	r3, r0, #1
 80058b0:	d100      	bne.n	80058b4 <_printf_float+0x3c4>
 80058b2:	e67b      	b.n	80055ac <_printf_float+0xbc>
 80058b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058b6:	3301      	adds	r3, #1
 80058b8:	930e      	str	r3, [sp, #56]	; 0x38
 80058ba:	e7b0      	b.n	800581e <_printf_float+0x32e>
 80058bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058be:	0038      	movs	r0, r7
 80058c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058c2:	9908      	ldr	r1, [sp, #32]
 80058c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80058c6:	47b0      	blx	r6
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d1b9      	bne.n	8005840 <_printf_float+0x350>
 80058cc:	e66e      	b.n	80055ac <_printf_float+0xbc>
 80058ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058d0:	0038      	movs	r0, r7
 80058d2:	18ea      	adds	r2, r5, r3
 80058d4:	9908      	ldr	r1, [sp, #32]
 80058d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058da:	47a8      	blx	r5
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d1bb      	bne.n	8005858 <_printf_float+0x368>
 80058e0:	e664      	b.n	80055ac <_printf_float+0xbc>
 80058e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	dc02      	bgt.n	80058ee <_printf_float+0x3fe>
 80058e8:	2301      	movs	r3, #1
 80058ea:	421a      	tst	r2, r3
 80058ec:	d038      	beq.n	8005960 <_printf_float+0x470>
 80058ee:	2301      	movs	r3, #1
 80058f0:	002a      	movs	r2, r5
 80058f2:	0038      	movs	r0, r7
 80058f4:	9908      	ldr	r1, [sp, #32]
 80058f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80058f8:	47b0      	blx	r6
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	d100      	bne.n	8005900 <_printf_float+0x410>
 80058fe:	e655      	b.n	80055ac <_printf_float+0xbc>
 8005900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005902:	0038      	movs	r0, r7
 8005904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005906:	9908      	ldr	r1, [sp, #32]
 8005908:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800590a:	47b0      	blx	r6
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d100      	bne.n	8005912 <_printf_float+0x422>
 8005910:	e64c      	b.n	80055ac <_printf_float+0xbc>
 8005912:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005914:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005916:	2200      	movs	r2, #0
 8005918:	2300      	movs	r3, #0
 800591a:	f7fa fd97 	bl	800044c <__aeabi_dcmpeq>
 800591e:	2800      	cmp	r0, #0
 8005920:	d11c      	bne.n	800595c <_printf_float+0x46c>
 8005922:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005924:	1c6a      	adds	r2, r5, #1
 8005926:	3b01      	subs	r3, #1
 8005928:	0038      	movs	r0, r7
 800592a:	9908      	ldr	r1, [sp, #32]
 800592c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800592e:	47a8      	blx	r5
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d10f      	bne.n	8005954 <_printf_float+0x464>
 8005934:	e63a      	b.n	80055ac <_printf_float+0xbc>
 8005936:	0022      	movs	r2, r4
 8005938:	2301      	movs	r3, #1
 800593a:	0038      	movs	r0, r7
 800593c:	9908      	ldr	r1, [sp, #32]
 800593e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005940:	321a      	adds	r2, #26
 8005942:	47b0      	blx	r6
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d100      	bne.n	800594a <_printf_float+0x45a>
 8005948:	e630      	b.n	80055ac <_printf_float+0xbc>
 800594a:	3501      	adds	r5, #1
 800594c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800594e:	3b01      	subs	r3, #1
 8005950:	42ab      	cmp	r3, r5
 8005952:	dcf0      	bgt.n	8005936 <_printf_float+0x446>
 8005954:	0022      	movs	r2, r4
 8005956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005958:	3250      	adds	r2, #80	; 0x50
 800595a:	e6cb      	b.n	80056f4 <_printf_float+0x204>
 800595c:	2500      	movs	r5, #0
 800595e:	e7f5      	b.n	800594c <_printf_float+0x45c>
 8005960:	002a      	movs	r2, r5
 8005962:	e7e1      	b.n	8005928 <_printf_float+0x438>
 8005964:	0022      	movs	r2, r4
 8005966:	2301      	movs	r3, #1
 8005968:	0038      	movs	r0, r7
 800596a:	9908      	ldr	r1, [sp, #32]
 800596c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800596e:	3219      	adds	r2, #25
 8005970:	47b0      	blx	r6
 8005972:	1c43      	adds	r3, r0, #1
 8005974:	d100      	bne.n	8005978 <_printf_float+0x488>
 8005976:	e619      	b.n	80055ac <_printf_float+0xbc>
 8005978:	3501      	adds	r5, #1
 800597a:	68e3      	ldr	r3, [r4, #12]
 800597c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	42ab      	cmp	r3, r5
 8005982:	dcef      	bgt.n	8005964 <_printf_float+0x474>
 8005984:	e6ea      	b.n	800575c <_printf_float+0x26c>
 8005986:	2500      	movs	r5, #0
 8005988:	e7f7      	b.n	800597a <_printf_float+0x48a>
 800598a:	46c0      	nop			; (mov r8, r8)

0800598c <_printf_common>:
 800598c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800598e:	0015      	movs	r5, r2
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	688a      	ldr	r2, [r1, #8]
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	000c      	movs	r4, r1
 8005998:	9000      	str	r0, [sp, #0]
 800599a:	4293      	cmp	r3, r2
 800599c:	da00      	bge.n	80059a0 <_printf_common+0x14>
 800599e:	0013      	movs	r3, r2
 80059a0:	0022      	movs	r2, r4
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	3243      	adds	r2, #67	; 0x43
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	d001      	beq.n	80059b0 <_printf_common+0x24>
 80059ac:	3301      	adds	r3, #1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	069b      	lsls	r3, r3, #26
 80059b4:	d502      	bpl.n	80059bc <_printf_common+0x30>
 80059b6:	682b      	ldr	r3, [r5, #0]
 80059b8:	3302      	adds	r3, #2
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	2306      	movs	r3, #6
 80059c0:	0017      	movs	r7, r2
 80059c2:	401f      	ands	r7, r3
 80059c4:	421a      	tst	r2, r3
 80059c6:	d027      	beq.n	8005a18 <_printf_common+0x8c>
 80059c8:	0023      	movs	r3, r4
 80059ca:	3343      	adds	r3, #67	; 0x43
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	1e5a      	subs	r2, r3, #1
 80059d0:	4193      	sbcs	r3, r2
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	0692      	lsls	r2, r2, #26
 80059d6:	d430      	bmi.n	8005a3a <_printf_common+0xae>
 80059d8:	0022      	movs	r2, r4
 80059da:	9901      	ldr	r1, [sp, #4]
 80059dc:	9800      	ldr	r0, [sp, #0]
 80059de:	9e08      	ldr	r6, [sp, #32]
 80059e0:	3243      	adds	r2, #67	; 0x43
 80059e2:	47b0      	blx	r6
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d025      	beq.n	8005a34 <_printf_common+0xa8>
 80059e8:	2306      	movs	r3, #6
 80059ea:	6820      	ldr	r0, [r4, #0]
 80059ec:	682a      	ldr	r2, [r5, #0]
 80059ee:	68e1      	ldr	r1, [r4, #12]
 80059f0:	2500      	movs	r5, #0
 80059f2:	4003      	ands	r3, r0
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d103      	bne.n	8005a00 <_printf_common+0x74>
 80059f8:	1a8d      	subs	r5, r1, r2
 80059fa:	43eb      	mvns	r3, r5
 80059fc:	17db      	asrs	r3, r3, #31
 80059fe:	401d      	ands	r5, r3
 8005a00:	68a3      	ldr	r3, [r4, #8]
 8005a02:	6922      	ldr	r2, [r4, #16]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	dd01      	ble.n	8005a0c <_printf_common+0x80>
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	18ed      	adds	r5, r5, r3
 8005a0c:	2700      	movs	r7, #0
 8005a0e:	42bd      	cmp	r5, r7
 8005a10:	d120      	bne.n	8005a54 <_printf_common+0xc8>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e010      	b.n	8005a38 <_printf_common+0xac>
 8005a16:	3701      	adds	r7, #1
 8005a18:	68e3      	ldr	r3, [r4, #12]
 8005a1a:	682a      	ldr	r2, [r5, #0]
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	42bb      	cmp	r3, r7
 8005a20:	ddd2      	ble.n	80059c8 <_printf_common+0x3c>
 8005a22:	0022      	movs	r2, r4
 8005a24:	2301      	movs	r3, #1
 8005a26:	9901      	ldr	r1, [sp, #4]
 8005a28:	9800      	ldr	r0, [sp, #0]
 8005a2a:	9e08      	ldr	r6, [sp, #32]
 8005a2c:	3219      	adds	r2, #25
 8005a2e:	47b0      	blx	r6
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d1f0      	bne.n	8005a16 <_printf_common+0x8a>
 8005a34:	2001      	movs	r0, #1
 8005a36:	4240      	negs	r0, r0
 8005a38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a3a:	2030      	movs	r0, #48	; 0x30
 8005a3c:	18e1      	adds	r1, r4, r3
 8005a3e:	3143      	adds	r1, #67	; 0x43
 8005a40:	7008      	strb	r0, [r1, #0]
 8005a42:	0021      	movs	r1, r4
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	3145      	adds	r1, #69	; 0x45
 8005a48:	7809      	ldrb	r1, [r1, #0]
 8005a4a:	18a2      	adds	r2, r4, r2
 8005a4c:	3243      	adds	r2, #67	; 0x43
 8005a4e:	3302      	adds	r3, #2
 8005a50:	7011      	strb	r1, [r2, #0]
 8005a52:	e7c1      	b.n	80059d8 <_printf_common+0x4c>
 8005a54:	0022      	movs	r2, r4
 8005a56:	2301      	movs	r3, #1
 8005a58:	9901      	ldr	r1, [sp, #4]
 8005a5a:	9800      	ldr	r0, [sp, #0]
 8005a5c:	9e08      	ldr	r6, [sp, #32]
 8005a5e:	321a      	adds	r2, #26
 8005a60:	47b0      	blx	r6
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d0e6      	beq.n	8005a34 <_printf_common+0xa8>
 8005a66:	3701      	adds	r7, #1
 8005a68:	e7d1      	b.n	8005a0e <_printf_common+0x82>
	...

08005a6c <_printf_i>:
 8005a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a6e:	b08b      	sub	sp, #44	; 0x2c
 8005a70:	9206      	str	r2, [sp, #24]
 8005a72:	000a      	movs	r2, r1
 8005a74:	3243      	adds	r2, #67	; 0x43
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	9005      	str	r0, [sp, #20]
 8005a7a:	9204      	str	r2, [sp, #16]
 8005a7c:	7e0a      	ldrb	r2, [r1, #24]
 8005a7e:	000c      	movs	r4, r1
 8005a80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a82:	2a78      	cmp	r2, #120	; 0x78
 8005a84:	d806      	bhi.n	8005a94 <_printf_i+0x28>
 8005a86:	2a62      	cmp	r2, #98	; 0x62
 8005a88:	d808      	bhi.n	8005a9c <_printf_i+0x30>
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	d100      	bne.n	8005a90 <_printf_i+0x24>
 8005a8e:	e0c0      	b.n	8005c12 <_printf_i+0x1a6>
 8005a90:	2a58      	cmp	r2, #88	; 0x58
 8005a92:	d052      	beq.n	8005b3a <_printf_i+0xce>
 8005a94:	0026      	movs	r6, r4
 8005a96:	3642      	adds	r6, #66	; 0x42
 8005a98:	7032      	strb	r2, [r6, #0]
 8005a9a:	e022      	b.n	8005ae2 <_printf_i+0x76>
 8005a9c:	0010      	movs	r0, r2
 8005a9e:	3863      	subs	r0, #99	; 0x63
 8005aa0:	2815      	cmp	r0, #21
 8005aa2:	d8f7      	bhi.n	8005a94 <_printf_i+0x28>
 8005aa4:	f7fa fb42 	bl	800012c <__gnu_thumb1_case_shi>
 8005aa8:	001f0016 	.word	0x001f0016
 8005aac:	fff6fff6 	.word	0xfff6fff6
 8005ab0:	fff6fff6 	.word	0xfff6fff6
 8005ab4:	fff6001f 	.word	0xfff6001f
 8005ab8:	fff6fff6 	.word	0xfff6fff6
 8005abc:	00a8fff6 	.word	0x00a8fff6
 8005ac0:	009a0036 	.word	0x009a0036
 8005ac4:	fff6fff6 	.word	0xfff6fff6
 8005ac8:	fff600b9 	.word	0xfff600b9
 8005acc:	fff60036 	.word	0xfff60036
 8005ad0:	009efff6 	.word	0x009efff6
 8005ad4:	0026      	movs	r6, r4
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	3642      	adds	r6, #66	; 0x42
 8005ada:	1d11      	adds	r1, r2, #4
 8005adc:	6019      	str	r1, [r3, #0]
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	7033      	strb	r3, [r6, #0]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e0a7      	b.n	8005c36 <_printf_i+0x1ca>
 8005ae6:	6808      	ldr	r0, [r1, #0]
 8005ae8:	6819      	ldr	r1, [r3, #0]
 8005aea:	1d0a      	adds	r2, r1, #4
 8005aec:	0605      	lsls	r5, r0, #24
 8005aee:	d50b      	bpl.n	8005b08 <_printf_i+0x9c>
 8005af0:	680d      	ldr	r5, [r1, #0]
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	2d00      	cmp	r5, #0
 8005af6:	da03      	bge.n	8005b00 <_printf_i+0x94>
 8005af8:	232d      	movs	r3, #45	; 0x2d
 8005afa:	9a04      	ldr	r2, [sp, #16]
 8005afc:	426d      	negs	r5, r5
 8005afe:	7013      	strb	r3, [r2, #0]
 8005b00:	4b61      	ldr	r3, [pc, #388]	; (8005c88 <_printf_i+0x21c>)
 8005b02:	270a      	movs	r7, #10
 8005b04:	9303      	str	r3, [sp, #12]
 8005b06:	e032      	b.n	8005b6e <_printf_i+0x102>
 8005b08:	680d      	ldr	r5, [r1, #0]
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	0641      	lsls	r1, r0, #25
 8005b0e:	d5f1      	bpl.n	8005af4 <_printf_i+0x88>
 8005b10:	b22d      	sxth	r5, r5
 8005b12:	e7ef      	b.n	8005af4 <_printf_i+0x88>
 8005b14:	680d      	ldr	r5, [r1, #0]
 8005b16:	6819      	ldr	r1, [r3, #0]
 8005b18:	1d08      	adds	r0, r1, #4
 8005b1a:	6018      	str	r0, [r3, #0]
 8005b1c:	062e      	lsls	r6, r5, #24
 8005b1e:	d501      	bpl.n	8005b24 <_printf_i+0xb8>
 8005b20:	680d      	ldr	r5, [r1, #0]
 8005b22:	e003      	b.n	8005b2c <_printf_i+0xc0>
 8005b24:	066d      	lsls	r5, r5, #25
 8005b26:	d5fb      	bpl.n	8005b20 <_printf_i+0xb4>
 8005b28:	680d      	ldr	r5, [r1, #0]
 8005b2a:	b2ad      	uxth	r5, r5
 8005b2c:	4b56      	ldr	r3, [pc, #344]	; (8005c88 <_printf_i+0x21c>)
 8005b2e:	270a      	movs	r7, #10
 8005b30:	9303      	str	r3, [sp, #12]
 8005b32:	2a6f      	cmp	r2, #111	; 0x6f
 8005b34:	d117      	bne.n	8005b66 <_printf_i+0xfa>
 8005b36:	2708      	movs	r7, #8
 8005b38:	e015      	b.n	8005b66 <_printf_i+0xfa>
 8005b3a:	3145      	adds	r1, #69	; 0x45
 8005b3c:	700a      	strb	r2, [r1, #0]
 8005b3e:	4a52      	ldr	r2, [pc, #328]	; (8005c88 <_printf_i+0x21c>)
 8005b40:	9203      	str	r2, [sp, #12]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	6821      	ldr	r1, [r4, #0]
 8005b46:	ca20      	ldmia	r2!, {r5}
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	0608      	lsls	r0, r1, #24
 8005b4c:	d550      	bpl.n	8005bf0 <_printf_i+0x184>
 8005b4e:	07cb      	lsls	r3, r1, #31
 8005b50:	d502      	bpl.n	8005b58 <_printf_i+0xec>
 8005b52:	2320      	movs	r3, #32
 8005b54:	4319      	orrs	r1, r3
 8005b56:	6021      	str	r1, [r4, #0]
 8005b58:	2710      	movs	r7, #16
 8005b5a:	2d00      	cmp	r5, #0
 8005b5c:	d103      	bne.n	8005b66 <_printf_i+0xfa>
 8005b5e:	2320      	movs	r3, #32
 8005b60:	6822      	ldr	r2, [r4, #0]
 8005b62:	439a      	bics	r2, r3
 8005b64:	6022      	str	r2, [r4, #0]
 8005b66:	0023      	movs	r3, r4
 8005b68:	2200      	movs	r2, #0
 8005b6a:	3343      	adds	r3, #67	; 0x43
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	6863      	ldr	r3, [r4, #4]
 8005b70:	60a3      	str	r3, [r4, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	db03      	blt.n	8005b7e <_printf_i+0x112>
 8005b76:	2204      	movs	r2, #4
 8005b78:	6821      	ldr	r1, [r4, #0]
 8005b7a:	4391      	bics	r1, r2
 8005b7c:	6021      	str	r1, [r4, #0]
 8005b7e:	2d00      	cmp	r5, #0
 8005b80:	d102      	bne.n	8005b88 <_printf_i+0x11c>
 8005b82:	9e04      	ldr	r6, [sp, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00c      	beq.n	8005ba2 <_printf_i+0x136>
 8005b88:	9e04      	ldr	r6, [sp, #16]
 8005b8a:	0028      	movs	r0, r5
 8005b8c:	0039      	movs	r1, r7
 8005b8e:	f7fa fb5d 	bl	800024c <__aeabi_uidivmod>
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	3e01      	subs	r6, #1
 8005b96:	5c5b      	ldrb	r3, [r3, r1]
 8005b98:	7033      	strb	r3, [r6, #0]
 8005b9a:	002b      	movs	r3, r5
 8005b9c:	0005      	movs	r5, r0
 8005b9e:	429f      	cmp	r7, r3
 8005ba0:	d9f3      	bls.n	8005b8a <_printf_i+0x11e>
 8005ba2:	2f08      	cmp	r7, #8
 8005ba4:	d109      	bne.n	8005bba <_printf_i+0x14e>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	07db      	lsls	r3, r3, #31
 8005baa:	d506      	bpl.n	8005bba <_printf_i+0x14e>
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	6922      	ldr	r2, [r4, #16]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	dc02      	bgt.n	8005bba <_printf_i+0x14e>
 8005bb4:	2330      	movs	r3, #48	; 0x30
 8005bb6:	3e01      	subs	r6, #1
 8005bb8:	7033      	strb	r3, [r6, #0]
 8005bba:	9b04      	ldr	r3, [sp, #16]
 8005bbc:	1b9b      	subs	r3, r3, r6
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	9b07      	ldr	r3, [sp, #28]
 8005bc2:	0021      	movs	r1, r4
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	9805      	ldr	r0, [sp, #20]
 8005bc8:	9b06      	ldr	r3, [sp, #24]
 8005bca:	aa09      	add	r2, sp, #36	; 0x24
 8005bcc:	f7ff fede 	bl	800598c <_printf_common>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d135      	bne.n	8005c40 <_printf_i+0x1d4>
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	4240      	negs	r0, r0
 8005bd8:	b00b      	add	sp, #44	; 0x2c
 8005bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bdc:	2220      	movs	r2, #32
 8005bde:	6809      	ldr	r1, [r1, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	6022      	str	r2, [r4, #0]
 8005be4:	0022      	movs	r2, r4
 8005be6:	2178      	movs	r1, #120	; 0x78
 8005be8:	3245      	adds	r2, #69	; 0x45
 8005bea:	7011      	strb	r1, [r2, #0]
 8005bec:	4a27      	ldr	r2, [pc, #156]	; (8005c8c <_printf_i+0x220>)
 8005bee:	e7a7      	b.n	8005b40 <_printf_i+0xd4>
 8005bf0:	0648      	lsls	r0, r1, #25
 8005bf2:	d5ac      	bpl.n	8005b4e <_printf_i+0xe2>
 8005bf4:	b2ad      	uxth	r5, r5
 8005bf6:	e7aa      	b.n	8005b4e <_printf_i+0xe2>
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	680d      	ldr	r5, [r1, #0]
 8005bfc:	1d10      	adds	r0, r2, #4
 8005bfe:	6949      	ldr	r1, [r1, #20]
 8005c00:	6018      	str	r0, [r3, #0]
 8005c02:	6813      	ldr	r3, [r2, #0]
 8005c04:	062e      	lsls	r6, r5, #24
 8005c06:	d501      	bpl.n	8005c0c <_printf_i+0x1a0>
 8005c08:	6019      	str	r1, [r3, #0]
 8005c0a:	e002      	b.n	8005c12 <_printf_i+0x1a6>
 8005c0c:	066d      	lsls	r5, r5, #25
 8005c0e:	d5fb      	bpl.n	8005c08 <_printf_i+0x19c>
 8005c10:	8019      	strh	r1, [r3, #0]
 8005c12:	2300      	movs	r3, #0
 8005c14:	9e04      	ldr	r6, [sp, #16]
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	e7d2      	b.n	8005bc0 <_printf_i+0x154>
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	1d11      	adds	r1, r2, #4
 8005c1e:	6019      	str	r1, [r3, #0]
 8005c20:	6816      	ldr	r6, [r2, #0]
 8005c22:	2100      	movs	r1, #0
 8005c24:	0030      	movs	r0, r6
 8005c26:	6862      	ldr	r2, [r4, #4]
 8005c28:	f000 ff0a 	bl	8006a40 <memchr>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d001      	beq.n	8005c34 <_printf_i+0x1c8>
 8005c30:	1b80      	subs	r0, r0, r6
 8005c32:	6060      	str	r0, [r4, #4]
 8005c34:	6863      	ldr	r3, [r4, #4]
 8005c36:	6123      	str	r3, [r4, #16]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9a04      	ldr	r2, [sp, #16]
 8005c3c:	7013      	strb	r3, [r2, #0]
 8005c3e:	e7bf      	b.n	8005bc0 <_printf_i+0x154>
 8005c40:	6923      	ldr	r3, [r4, #16]
 8005c42:	0032      	movs	r2, r6
 8005c44:	9906      	ldr	r1, [sp, #24]
 8005c46:	9805      	ldr	r0, [sp, #20]
 8005c48:	9d07      	ldr	r5, [sp, #28]
 8005c4a:	47a8      	blx	r5
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d0c1      	beq.n	8005bd4 <_printf_i+0x168>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	079b      	lsls	r3, r3, #30
 8005c54:	d415      	bmi.n	8005c82 <_printf_i+0x216>
 8005c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c58:	68e0      	ldr	r0, [r4, #12]
 8005c5a:	4298      	cmp	r0, r3
 8005c5c:	dabc      	bge.n	8005bd8 <_printf_i+0x16c>
 8005c5e:	0018      	movs	r0, r3
 8005c60:	e7ba      	b.n	8005bd8 <_printf_i+0x16c>
 8005c62:	0022      	movs	r2, r4
 8005c64:	2301      	movs	r3, #1
 8005c66:	9906      	ldr	r1, [sp, #24]
 8005c68:	9805      	ldr	r0, [sp, #20]
 8005c6a:	9e07      	ldr	r6, [sp, #28]
 8005c6c:	3219      	adds	r2, #25
 8005c6e:	47b0      	blx	r6
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	d0af      	beq.n	8005bd4 <_printf_i+0x168>
 8005c74:	3501      	adds	r5, #1
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	42ab      	cmp	r3, r5
 8005c7e:	dcf0      	bgt.n	8005c62 <_printf_i+0x1f6>
 8005c80:	e7e9      	b.n	8005c56 <_printf_i+0x1ea>
 8005c82:	2500      	movs	r5, #0
 8005c84:	e7f7      	b.n	8005c76 <_printf_i+0x20a>
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	0800841e 	.word	0x0800841e
 8005c8c:	0800842f 	.word	0x0800842f

08005c90 <siprintf>:
 8005c90:	b40e      	push	{r1, r2, r3}
 8005c92:	b500      	push	{lr}
 8005c94:	490b      	ldr	r1, [pc, #44]	; (8005cc4 <siprintf+0x34>)
 8005c96:	b09c      	sub	sp, #112	; 0x70
 8005c98:	ab1d      	add	r3, sp, #116	; 0x74
 8005c9a:	9002      	str	r0, [sp, #8]
 8005c9c:	9006      	str	r0, [sp, #24]
 8005c9e:	9107      	str	r1, [sp, #28]
 8005ca0:	9104      	str	r1, [sp, #16]
 8005ca2:	4809      	ldr	r0, [pc, #36]	; (8005cc8 <siprintf+0x38>)
 8005ca4:	4909      	ldr	r1, [pc, #36]	; (8005ccc <siprintf+0x3c>)
 8005ca6:	cb04      	ldmia	r3!, {r2}
 8005ca8:	9105      	str	r1, [sp, #20]
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	a902      	add	r1, sp, #8
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	f001 fb90 	bl	80073d4 <_svfiprintf_r>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9a02      	ldr	r2, [sp, #8]
 8005cb8:	7013      	strb	r3, [r2, #0]
 8005cba:	b01c      	add	sp, #112	; 0x70
 8005cbc:	bc08      	pop	{r3}
 8005cbe:	b003      	add	sp, #12
 8005cc0:	4718      	bx	r3
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	7fffffff 	.word	0x7fffffff
 8005cc8:	2000000c 	.word	0x2000000c
 8005ccc:	ffff0208 	.word	0xffff0208

08005cd0 <quorem>:
 8005cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd2:	0006      	movs	r6, r0
 8005cd4:	690d      	ldr	r5, [r1, #16]
 8005cd6:	6933      	ldr	r3, [r6, #16]
 8005cd8:	b087      	sub	sp, #28
 8005cda:	2000      	movs	r0, #0
 8005cdc:	9102      	str	r1, [sp, #8]
 8005cde:	42ab      	cmp	r3, r5
 8005ce0:	db6b      	blt.n	8005dba <quorem+0xea>
 8005ce2:	000b      	movs	r3, r1
 8005ce4:	3d01      	subs	r5, #1
 8005ce6:	00ac      	lsls	r4, r5, #2
 8005ce8:	3314      	adds	r3, #20
 8005cea:	9305      	str	r3, [sp, #20]
 8005cec:	191b      	adds	r3, r3, r4
 8005cee:	9303      	str	r3, [sp, #12]
 8005cf0:	0033      	movs	r3, r6
 8005cf2:	3314      	adds	r3, #20
 8005cf4:	9301      	str	r3, [sp, #4]
 8005cf6:	191c      	adds	r4, r3, r4
 8005cf8:	9b03      	ldr	r3, [sp, #12]
 8005cfa:	6827      	ldr	r7, [r4, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	0038      	movs	r0, r7
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	0019      	movs	r1, r3
 8005d06:	9304      	str	r3, [sp, #16]
 8005d08:	f7fa fa1a 	bl	8000140 <__udivsi3>
 8005d0c:	9b04      	ldr	r3, [sp, #16]
 8005d0e:	9000      	str	r0, [sp, #0]
 8005d10:	429f      	cmp	r7, r3
 8005d12:	d329      	bcc.n	8005d68 <quorem+0x98>
 8005d14:	2300      	movs	r3, #0
 8005d16:	469c      	mov	ip, r3
 8005d18:	9801      	ldr	r0, [sp, #4]
 8005d1a:	9f05      	ldr	r7, [sp, #20]
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	cf08      	ldmia	r7!, {r3}
 8005d20:	9a00      	ldr	r2, [sp, #0]
 8005d22:	b299      	uxth	r1, r3
 8005d24:	4351      	muls	r1, r2
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	4353      	muls	r3, r2
 8005d2a:	4461      	add	r1, ip
 8005d2c:	0c0a      	lsrs	r2, r1, #16
 8005d2e:	189b      	adds	r3, r3, r2
 8005d30:	0c1a      	lsrs	r2, r3, #16
 8005d32:	9305      	str	r3, [sp, #20]
 8005d34:	6803      	ldr	r3, [r0, #0]
 8005d36:	4694      	mov	ip, r2
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	b289      	uxth	r1, r1
 8005d3e:	18d2      	adds	r2, r2, r3
 8005d40:	6803      	ldr	r3, [r0, #0]
 8005d42:	1a52      	subs	r2, r2, r1
 8005d44:	0c19      	lsrs	r1, r3, #16
 8005d46:	466b      	mov	r3, sp
 8005d48:	8a9b      	ldrh	r3, [r3, #20]
 8005d4a:	1acb      	subs	r3, r1, r3
 8005d4c:	1411      	asrs	r1, r2, #16
 8005d4e:	185b      	adds	r3, r3, r1
 8005d50:	1419      	asrs	r1, r3, #16
 8005d52:	b292      	uxth	r2, r2
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	431a      	orrs	r2, r3
 8005d58:	9b03      	ldr	r3, [sp, #12]
 8005d5a:	9104      	str	r1, [sp, #16]
 8005d5c:	c004      	stmia	r0!, {r2}
 8005d5e:	42bb      	cmp	r3, r7
 8005d60:	d2dd      	bcs.n	8005d1e <quorem+0x4e>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02e      	beq.n	8005dc6 <quorem+0xf6>
 8005d68:	0030      	movs	r0, r6
 8005d6a:	9902      	ldr	r1, [sp, #8]
 8005d6c:	f001 f902 	bl	8006f74 <__mcmp>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	db21      	blt.n	8005db8 <quorem+0xe8>
 8005d74:	0030      	movs	r0, r6
 8005d76:	2400      	movs	r4, #0
 8005d78:	9b00      	ldr	r3, [sp, #0]
 8005d7a:	9902      	ldr	r1, [sp, #8]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	3014      	adds	r0, #20
 8005d82:	3114      	adds	r1, #20
 8005d84:	6802      	ldr	r2, [r0, #0]
 8005d86:	c908      	ldmia	r1!, {r3}
 8005d88:	b292      	uxth	r2, r2
 8005d8a:	1914      	adds	r4, r2, r4
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	1aa2      	subs	r2, r4, r2
 8005d90:	6804      	ldr	r4, [r0, #0]
 8005d92:	0c1b      	lsrs	r3, r3, #16
 8005d94:	0c24      	lsrs	r4, r4, #16
 8005d96:	1ae3      	subs	r3, r4, r3
 8005d98:	1414      	asrs	r4, r2, #16
 8005d9a:	191b      	adds	r3, r3, r4
 8005d9c:	141c      	asrs	r4, r3, #16
 8005d9e:	b292      	uxth	r2, r2
 8005da0:	041b      	lsls	r3, r3, #16
 8005da2:	4313      	orrs	r3, r2
 8005da4:	c008      	stmia	r0!, {r3}
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	428b      	cmp	r3, r1
 8005daa:	d2eb      	bcs.n	8005d84 <quorem+0xb4>
 8005dac:	9a01      	ldr	r2, [sp, #4]
 8005dae:	00ab      	lsls	r3, r5, #2
 8005db0:	18d3      	adds	r3, r2, r3
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	d010      	beq.n	8005dda <quorem+0x10a>
 8005db8:	9800      	ldr	r0, [sp, #0]
 8005dba:	b007      	add	sp, #28
 8005dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <quorem+0xfe>
 8005dc4:	3d01      	subs	r5, #1
 8005dc6:	9b01      	ldr	r3, [sp, #4]
 8005dc8:	3c04      	subs	r4, #4
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	d3f7      	bcc.n	8005dbe <quorem+0xee>
 8005dce:	6135      	str	r5, [r6, #16]
 8005dd0:	e7ca      	b.n	8005d68 <quorem+0x98>
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	d104      	bne.n	8005de2 <quorem+0x112>
 8005dd8:	3d01      	subs	r5, #1
 8005dda:	9a01      	ldr	r2, [sp, #4]
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d3f7      	bcc.n	8005dd2 <quorem+0x102>
 8005de2:	6135      	str	r5, [r6, #16]
 8005de4:	e7e8      	b.n	8005db8 <quorem+0xe8>
	...

08005de8 <_dtoa_r>:
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dea:	b09d      	sub	sp, #116	; 0x74
 8005dec:	9202      	str	r2, [sp, #8]
 8005dee:	9303      	str	r3, [sp, #12]
 8005df0:	9b02      	ldr	r3, [sp, #8]
 8005df2:	9c03      	ldr	r4, [sp, #12]
 8005df4:	930a      	str	r3, [sp, #40]	; 0x28
 8005df6:	940b      	str	r4, [sp, #44]	; 0x2c
 8005df8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005dfa:	0007      	movs	r7, r0
 8005dfc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005dfe:	2c00      	cmp	r4, #0
 8005e00:	d10e      	bne.n	8005e20 <_dtoa_r+0x38>
 8005e02:	2010      	movs	r0, #16
 8005e04:	f000 fe12 	bl	8006a2c <malloc>
 8005e08:	1e02      	subs	r2, r0, #0
 8005e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e0c:	d104      	bne.n	8005e18 <_dtoa_r+0x30>
 8005e0e:	21ea      	movs	r1, #234	; 0xea
 8005e10:	4bc0      	ldr	r3, [pc, #768]	; (8006114 <_dtoa_r+0x32c>)
 8005e12:	48c1      	ldr	r0, [pc, #772]	; (8006118 <_dtoa_r+0x330>)
 8005e14:	f001 fbf0 	bl	80075f8 <__assert_func>
 8005e18:	6044      	str	r4, [r0, #4]
 8005e1a:	6084      	str	r4, [r0, #8]
 8005e1c:	6004      	str	r4, [r0, #0]
 8005e1e:	60c4      	str	r4, [r0, #12]
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	2900      	cmp	r1, #0
 8005e26:	d00a      	beq.n	8005e3e <_dtoa_r+0x56>
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4093      	lsls	r3, r2
 8005e2e:	604a      	str	r2, [r1, #4]
 8005e30:	608b      	str	r3, [r1, #8]
 8005e32:	0038      	movs	r0, r7
 8005e34:	f000 fe5c 	bl	8006af0 <_Bfree>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	da21      	bge.n	8005e88 <_dtoa_r+0xa0>
 8005e44:	2301      	movs	r3, #1
 8005e46:	602b      	str	r3, [r5, #0]
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005e52:	4bb2      	ldr	r3, [pc, #712]	; (800611c <_dtoa_r+0x334>)
 8005e54:	002a      	movs	r2, r5
 8005e56:	9318      	str	r3, [sp, #96]	; 0x60
 8005e58:	401a      	ands	r2, r3
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d117      	bne.n	8005e8e <_dtoa_r+0xa6>
 8005e5e:	4bb0      	ldr	r3, [pc, #704]	; (8006120 <_dtoa_r+0x338>)
 8005e60:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e62:	0328      	lsls	r0, r5, #12
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	9b02      	ldr	r3, [sp, #8]
 8005e68:	0b00      	lsrs	r0, r0, #12
 8005e6a:	4318      	orrs	r0, r3
 8005e6c:	d101      	bne.n	8005e72 <_dtoa_r+0x8a>
 8005e6e:	f000 fdc3 	bl	80069f8 <_dtoa_r+0xc10>
 8005e72:	48ac      	ldr	r0, [pc, #688]	; (8006124 <_dtoa_r+0x33c>)
 8005e74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e76:	9005      	str	r0, [sp, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <_dtoa_r+0x9a>
 8005e7c:	4baa      	ldr	r3, [pc, #680]	; (8006128 <_dtoa_r+0x340>)
 8005e7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	9805      	ldr	r0, [sp, #20]
 8005e84:	b01d      	add	sp, #116	; 0x74
 8005e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e88:	2300      	movs	r3, #0
 8005e8a:	602b      	str	r3, [r5, #0]
 8005e8c:	e7e0      	b.n	8005e50 <_dtoa_r+0x68>
 8005e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005e92:	9312      	str	r3, [sp, #72]	; 0x48
 8005e94:	9413      	str	r4, [sp, #76]	; 0x4c
 8005e96:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005e98:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f7fa fad5 	bl	800044c <__aeabi_dcmpeq>
 8005ea2:	1e04      	subs	r4, r0, #0
 8005ea4:	d00b      	beq.n	8005ebe <_dtoa_r+0xd6>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	4b9f      	ldr	r3, [pc, #636]	; (800612c <_dtoa_r+0x344>)
 8005eae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005eb0:	9305      	str	r3, [sp, #20]
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	d0e5      	beq.n	8005e82 <_dtoa_r+0x9a>
 8005eb6:	4a9e      	ldr	r2, [pc, #632]	; (8006130 <_dtoa_r+0x348>)
 8005eb8:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005eba:	600a      	str	r2, [r1, #0]
 8005ebc:	e7e1      	b.n	8005e82 <_dtoa_r+0x9a>
 8005ebe:	ab1a      	add	r3, sp, #104	; 0x68
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	ab1b      	add	r3, sp, #108	; 0x6c
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	0038      	movs	r0, r7
 8005ec8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005eca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ecc:	f001 f906 	bl	80070dc <__d2b>
 8005ed0:	006e      	lsls	r6, r5, #1
 8005ed2:	9004      	str	r0, [sp, #16]
 8005ed4:	0d76      	lsrs	r6, r6, #21
 8005ed6:	d100      	bne.n	8005eda <_dtoa_r+0xf2>
 8005ed8:	e07c      	b.n	8005fd4 <_dtoa_r+0x1ec>
 8005eda:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005edc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005ede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ee0:	4a94      	ldr	r2, [pc, #592]	; (8006134 <_dtoa_r+0x34c>)
 8005ee2:	031b      	lsls	r3, r3, #12
 8005ee4:	0b1b      	lsrs	r3, r3, #12
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	0011      	movs	r1, r2
 8005eea:	4b93      	ldr	r3, [pc, #588]	; (8006138 <_dtoa_r+0x350>)
 8005eec:	9416      	str	r4, [sp, #88]	; 0x58
 8005eee:	18f6      	adds	r6, r6, r3
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4b92      	ldr	r3, [pc, #584]	; (800613c <_dtoa_r+0x354>)
 8005ef4:	f7fb fe06 	bl	8001b04 <__aeabi_dsub>
 8005ef8:	4a91      	ldr	r2, [pc, #580]	; (8006140 <_dtoa_r+0x358>)
 8005efa:	4b92      	ldr	r3, [pc, #584]	; (8006144 <_dtoa_r+0x35c>)
 8005efc:	f7fb fb96 	bl	800162c <__aeabi_dmul>
 8005f00:	4a91      	ldr	r2, [pc, #580]	; (8006148 <_dtoa_r+0x360>)
 8005f02:	4b92      	ldr	r3, [pc, #584]	; (800614c <_dtoa_r+0x364>)
 8005f04:	f7fa fc22 	bl	800074c <__aeabi_dadd>
 8005f08:	0004      	movs	r4, r0
 8005f0a:	0030      	movs	r0, r6
 8005f0c:	000d      	movs	r5, r1
 8005f0e:	f7fc f9df 	bl	80022d0 <__aeabi_i2d>
 8005f12:	4a8f      	ldr	r2, [pc, #572]	; (8006150 <_dtoa_r+0x368>)
 8005f14:	4b8f      	ldr	r3, [pc, #572]	; (8006154 <_dtoa_r+0x36c>)
 8005f16:	f7fb fb89 	bl	800162c <__aeabi_dmul>
 8005f1a:	0002      	movs	r2, r0
 8005f1c:	000b      	movs	r3, r1
 8005f1e:	0020      	movs	r0, r4
 8005f20:	0029      	movs	r1, r5
 8005f22:	f7fa fc13 	bl	800074c <__aeabi_dadd>
 8005f26:	0004      	movs	r4, r0
 8005f28:	000d      	movs	r5, r1
 8005f2a:	f7fc f99b 	bl	8002264 <__aeabi_d2iz>
 8005f2e:	2200      	movs	r2, #0
 8005f30:	9002      	str	r0, [sp, #8]
 8005f32:	2300      	movs	r3, #0
 8005f34:	0020      	movs	r0, r4
 8005f36:	0029      	movs	r1, r5
 8005f38:	f7fa fa8e 	bl	8000458 <__aeabi_dcmplt>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d00b      	beq.n	8005f58 <_dtoa_r+0x170>
 8005f40:	9802      	ldr	r0, [sp, #8]
 8005f42:	f7fc f9c5 	bl	80022d0 <__aeabi_i2d>
 8005f46:	002b      	movs	r3, r5
 8005f48:	0022      	movs	r2, r4
 8005f4a:	f7fa fa7f 	bl	800044c <__aeabi_dcmpeq>
 8005f4e:	4243      	negs	r3, r0
 8005f50:	4158      	adcs	r0, r3
 8005f52:	9b02      	ldr	r3, [sp, #8]
 8005f54:	1a1b      	subs	r3, r3, r0
 8005f56:	9302      	str	r3, [sp, #8]
 8005f58:	2301      	movs	r3, #1
 8005f5a:	9315      	str	r3, [sp, #84]	; 0x54
 8005f5c:	9b02      	ldr	r3, [sp, #8]
 8005f5e:	2b16      	cmp	r3, #22
 8005f60:	d80f      	bhi.n	8005f82 <_dtoa_r+0x19a>
 8005f62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005f64:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005f66:	00da      	lsls	r2, r3, #3
 8005f68:	4b7b      	ldr	r3, [pc, #492]	; (8006158 <_dtoa_r+0x370>)
 8005f6a:	189b      	adds	r3, r3, r2
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f7fa fa72 	bl	8000458 <__aeabi_dcmplt>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d049      	beq.n	800600c <_dtoa_r+0x224>
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	9302      	str	r3, [sp, #8]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9315      	str	r3, [sp, #84]	; 0x54
 8005f82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005f84:	1b9e      	subs	r6, r3, r6
 8005f86:	2300      	movs	r3, #0
 8005f88:	9308      	str	r3, [sp, #32]
 8005f8a:	0033      	movs	r3, r6
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	930d      	str	r3, [sp, #52]	; 0x34
 8005f90:	d504      	bpl.n	8005f9c <_dtoa_r+0x1b4>
 8005f92:	2301      	movs	r3, #1
 8005f94:	1b9b      	subs	r3, r3, r6
 8005f96:	9308      	str	r3, [sp, #32]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	db36      	blt.n	8006010 <_dtoa_r+0x228>
 8005fa2:	9a02      	ldr	r2, [sp, #8]
 8005fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa6:	4694      	mov	ip, r2
 8005fa8:	4463      	add	r3, ip
 8005faa:	930d      	str	r3, [sp, #52]	; 0x34
 8005fac:	2300      	movs	r3, #0
 8005fae:	9214      	str	r2, [sp, #80]	; 0x50
 8005fb0:	930e      	str	r3, [sp, #56]	; 0x38
 8005fb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fb4:	2401      	movs	r4, #1
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	d862      	bhi.n	8006080 <_dtoa_r+0x298>
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	dd02      	ble.n	8005fc4 <_dtoa_r+0x1dc>
 8005fbe:	2400      	movs	r4, #0
 8005fc0:	3b04      	subs	r3, #4
 8005fc2:	9322      	str	r3, [sp, #136]	; 0x88
 8005fc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fc6:	1e98      	subs	r0, r3, #2
 8005fc8:	2803      	cmp	r0, #3
 8005fca:	d862      	bhi.n	8006092 <_dtoa_r+0x2aa>
 8005fcc:	f7fa f8a4 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005fd0:	56343629 	.word	0x56343629
 8005fd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005fd6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005fd8:	189e      	adds	r6, r3, r2
 8005fda:	4b60      	ldr	r3, [pc, #384]	; (800615c <_dtoa_r+0x374>)
 8005fdc:	18f2      	adds	r2, r6, r3
 8005fde:	2a20      	cmp	r2, #32
 8005fe0:	dd0f      	ble.n	8006002 <_dtoa_r+0x21a>
 8005fe2:	2340      	movs	r3, #64	; 0x40
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	409d      	lsls	r5, r3
 8005fe8:	4b5d      	ldr	r3, [pc, #372]	; (8006160 <_dtoa_r+0x378>)
 8005fea:	9802      	ldr	r0, [sp, #8]
 8005fec:	18f3      	adds	r3, r6, r3
 8005fee:	40d8      	lsrs	r0, r3
 8005ff0:	4328      	orrs	r0, r5
 8005ff2:	f7fc f99d 	bl	8002330 <__aeabi_ui2d>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4c5a      	ldr	r4, [pc, #360]	; (8006164 <_dtoa_r+0x37c>)
 8005ffa:	3e01      	subs	r6, #1
 8005ffc:	1909      	adds	r1, r1, r4
 8005ffe:	9316      	str	r3, [sp, #88]	; 0x58
 8006000:	e776      	b.n	8005ef0 <_dtoa_r+0x108>
 8006002:	2320      	movs	r3, #32
 8006004:	9802      	ldr	r0, [sp, #8]
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	4098      	lsls	r0, r3
 800600a:	e7f2      	b.n	8005ff2 <_dtoa_r+0x20a>
 800600c:	9015      	str	r0, [sp, #84]	; 0x54
 800600e:	e7b8      	b.n	8005f82 <_dtoa_r+0x19a>
 8006010:	9b08      	ldr	r3, [sp, #32]
 8006012:	9a02      	ldr	r2, [sp, #8]
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	9308      	str	r3, [sp, #32]
 8006018:	4253      	negs	r3, r2
 800601a:	930e      	str	r3, [sp, #56]	; 0x38
 800601c:	2300      	movs	r3, #0
 800601e:	9314      	str	r3, [sp, #80]	; 0x50
 8006020:	e7c7      	b.n	8005fb2 <_dtoa_r+0x1ca>
 8006022:	2300      	movs	r3, #0
 8006024:	930f      	str	r3, [sp, #60]	; 0x3c
 8006026:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006028:	2b00      	cmp	r3, #0
 800602a:	dc36      	bgt.n	800609a <_dtoa_r+0x2b2>
 800602c:	2301      	movs	r3, #1
 800602e:	001a      	movs	r2, r3
 8006030:	930c      	str	r3, [sp, #48]	; 0x30
 8006032:	9306      	str	r3, [sp, #24]
 8006034:	9223      	str	r2, [sp, #140]	; 0x8c
 8006036:	e00d      	b.n	8006054 <_dtoa_r+0x26c>
 8006038:	2301      	movs	r3, #1
 800603a:	e7f3      	b.n	8006024 <_dtoa_r+0x23c>
 800603c:	2300      	movs	r3, #0
 800603e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006040:	930f      	str	r3, [sp, #60]	; 0x3c
 8006042:	4694      	mov	ip, r2
 8006044:	9b02      	ldr	r3, [sp, #8]
 8006046:	4463      	add	r3, ip
 8006048:	930c      	str	r3, [sp, #48]	; 0x30
 800604a:	3301      	adds	r3, #1
 800604c:	9306      	str	r3, [sp, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	dc00      	bgt.n	8006054 <_dtoa_r+0x26c>
 8006052:	2301      	movs	r3, #1
 8006054:	2200      	movs	r2, #0
 8006056:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006058:	6042      	str	r2, [r0, #4]
 800605a:	3204      	adds	r2, #4
 800605c:	0015      	movs	r5, r2
 800605e:	3514      	adds	r5, #20
 8006060:	6841      	ldr	r1, [r0, #4]
 8006062:	429d      	cmp	r5, r3
 8006064:	d91d      	bls.n	80060a2 <_dtoa_r+0x2ba>
 8006066:	0038      	movs	r0, r7
 8006068:	f000 fcfe 	bl	8006a68 <_Balloc>
 800606c:	9005      	str	r0, [sp, #20]
 800606e:	2800      	cmp	r0, #0
 8006070:	d11b      	bne.n	80060aa <_dtoa_r+0x2c2>
 8006072:	21d5      	movs	r1, #213	; 0xd5
 8006074:	0002      	movs	r2, r0
 8006076:	4b3c      	ldr	r3, [pc, #240]	; (8006168 <_dtoa_r+0x380>)
 8006078:	0049      	lsls	r1, r1, #1
 800607a:	e6ca      	b.n	8005e12 <_dtoa_r+0x2a>
 800607c:	2301      	movs	r3, #1
 800607e:	e7de      	b.n	800603e <_dtoa_r+0x256>
 8006080:	2300      	movs	r3, #0
 8006082:	940f      	str	r4, [sp, #60]	; 0x3c
 8006084:	9322      	str	r3, [sp, #136]	; 0x88
 8006086:	3b01      	subs	r3, #1
 8006088:	930c      	str	r3, [sp, #48]	; 0x30
 800608a:	9306      	str	r3, [sp, #24]
 800608c:	2200      	movs	r2, #0
 800608e:	3313      	adds	r3, #19
 8006090:	e7d0      	b.n	8006034 <_dtoa_r+0x24c>
 8006092:	2301      	movs	r3, #1
 8006094:	930f      	str	r3, [sp, #60]	; 0x3c
 8006096:	3b02      	subs	r3, #2
 8006098:	e7f6      	b.n	8006088 <_dtoa_r+0x2a0>
 800609a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800609c:	930c      	str	r3, [sp, #48]	; 0x30
 800609e:	9306      	str	r3, [sp, #24]
 80060a0:	e7d8      	b.n	8006054 <_dtoa_r+0x26c>
 80060a2:	3101      	adds	r1, #1
 80060a4:	6041      	str	r1, [r0, #4]
 80060a6:	0052      	lsls	r2, r2, #1
 80060a8:	e7d8      	b.n	800605c <_dtoa_r+0x274>
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	9a05      	ldr	r2, [sp, #20]
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	9b06      	ldr	r3, [sp, #24]
 80060b2:	2b0e      	cmp	r3, #14
 80060b4:	d900      	bls.n	80060b8 <_dtoa_r+0x2d0>
 80060b6:	e0eb      	b.n	8006290 <_dtoa_r+0x4a8>
 80060b8:	2c00      	cmp	r4, #0
 80060ba:	d100      	bne.n	80060be <_dtoa_r+0x2d6>
 80060bc:	e0e8      	b.n	8006290 <_dtoa_r+0x4a8>
 80060be:	9b02      	ldr	r3, [sp, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	dd68      	ble.n	8006196 <_dtoa_r+0x3ae>
 80060c4:	001a      	movs	r2, r3
 80060c6:	210f      	movs	r1, #15
 80060c8:	4b23      	ldr	r3, [pc, #140]	; (8006158 <_dtoa_r+0x370>)
 80060ca:	400a      	ands	r2, r1
 80060cc:	00d2      	lsls	r2, r2, #3
 80060ce:	189b      	adds	r3, r3, r2
 80060d0:	681d      	ldr	r5, [r3, #0]
 80060d2:	685e      	ldr	r6, [r3, #4]
 80060d4:	9b02      	ldr	r3, [sp, #8]
 80060d6:	111c      	asrs	r4, r3, #4
 80060d8:	2302      	movs	r3, #2
 80060da:	9310      	str	r3, [sp, #64]	; 0x40
 80060dc:	9b02      	ldr	r3, [sp, #8]
 80060de:	05db      	lsls	r3, r3, #23
 80060e0:	d50b      	bpl.n	80060fa <_dtoa_r+0x312>
 80060e2:	4b22      	ldr	r3, [pc, #136]	; (800616c <_dtoa_r+0x384>)
 80060e4:	400c      	ands	r4, r1
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80060ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80060ee:	f7fa fe97 	bl	8000e20 <__aeabi_ddiv>
 80060f2:	2303      	movs	r3, #3
 80060f4:	900a      	str	r0, [sp, #40]	; 0x28
 80060f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80060f8:	9310      	str	r3, [sp, #64]	; 0x40
 80060fa:	4b1c      	ldr	r3, [pc, #112]	; (800616c <_dtoa_r+0x384>)
 80060fc:	9307      	str	r3, [sp, #28]
 80060fe:	2c00      	cmp	r4, #0
 8006100:	d136      	bne.n	8006170 <_dtoa_r+0x388>
 8006102:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006106:	002a      	movs	r2, r5
 8006108:	0033      	movs	r3, r6
 800610a:	f7fa fe89 	bl	8000e20 <__aeabi_ddiv>
 800610e:	900a      	str	r0, [sp, #40]	; 0x28
 8006110:	910b      	str	r1, [sp, #44]	; 0x2c
 8006112:	e05c      	b.n	80061ce <_dtoa_r+0x3e6>
 8006114:	0800844d 	.word	0x0800844d
 8006118:	08008464 	.word	0x08008464
 800611c:	7ff00000 	.word	0x7ff00000
 8006120:	0000270f 	.word	0x0000270f
 8006124:	08008449 	.word	0x08008449
 8006128:	0800844c 	.word	0x0800844c
 800612c:	0800841c 	.word	0x0800841c
 8006130:	0800841d 	.word	0x0800841d
 8006134:	3ff00000 	.word	0x3ff00000
 8006138:	fffffc01 	.word	0xfffffc01
 800613c:	3ff80000 	.word	0x3ff80000
 8006140:	636f4361 	.word	0x636f4361
 8006144:	3fd287a7 	.word	0x3fd287a7
 8006148:	8b60c8b3 	.word	0x8b60c8b3
 800614c:	3fc68a28 	.word	0x3fc68a28
 8006150:	509f79fb 	.word	0x509f79fb
 8006154:	3fd34413 	.word	0x3fd34413
 8006158:	08008560 	.word	0x08008560
 800615c:	00000432 	.word	0x00000432
 8006160:	00000412 	.word	0x00000412
 8006164:	fe100000 	.word	0xfe100000
 8006168:	080084c3 	.word	0x080084c3
 800616c:	08008538 	.word	0x08008538
 8006170:	2301      	movs	r3, #1
 8006172:	421c      	tst	r4, r3
 8006174:	d00b      	beq.n	800618e <_dtoa_r+0x3a6>
 8006176:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006178:	0028      	movs	r0, r5
 800617a:	3301      	adds	r3, #1
 800617c:	9310      	str	r3, [sp, #64]	; 0x40
 800617e:	9b07      	ldr	r3, [sp, #28]
 8006180:	0031      	movs	r1, r6
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f7fb fa51 	bl	800162c <__aeabi_dmul>
 800618a:	0005      	movs	r5, r0
 800618c:	000e      	movs	r6, r1
 800618e:	9b07      	ldr	r3, [sp, #28]
 8006190:	1064      	asrs	r4, r4, #1
 8006192:	3308      	adds	r3, #8
 8006194:	e7b2      	b.n	80060fc <_dtoa_r+0x314>
 8006196:	2302      	movs	r3, #2
 8006198:	9310      	str	r3, [sp, #64]	; 0x40
 800619a:	9b02      	ldr	r3, [sp, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d016      	beq.n	80061ce <_dtoa_r+0x3e6>
 80061a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80061a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80061a4:	425c      	negs	r4, r3
 80061a6:	230f      	movs	r3, #15
 80061a8:	4ab5      	ldr	r2, [pc, #724]	; (8006480 <_dtoa_r+0x698>)
 80061aa:	4023      	ands	r3, r4
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	18d3      	adds	r3, r2, r3
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f7fb fa3a 	bl	800162c <__aeabi_dmul>
 80061b8:	2601      	movs	r6, #1
 80061ba:	2300      	movs	r3, #0
 80061bc:	900a      	str	r0, [sp, #40]	; 0x28
 80061be:	910b      	str	r1, [sp, #44]	; 0x2c
 80061c0:	4db0      	ldr	r5, [pc, #704]	; (8006484 <_dtoa_r+0x69c>)
 80061c2:	1124      	asrs	r4, r4, #4
 80061c4:	2c00      	cmp	r4, #0
 80061c6:	d000      	beq.n	80061ca <_dtoa_r+0x3e2>
 80061c8:	e094      	b.n	80062f4 <_dtoa_r+0x50c>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d19f      	bne.n	800610e <_dtoa_r+0x326>
 80061ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d100      	bne.n	80061d6 <_dtoa_r+0x3ee>
 80061d4:	e09b      	b.n	800630e <_dtoa_r+0x526>
 80061d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80061da:	2200      	movs	r2, #0
 80061dc:	0020      	movs	r0, r4
 80061de:	0029      	movs	r1, r5
 80061e0:	4ba9      	ldr	r3, [pc, #676]	; (8006488 <_dtoa_r+0x6a0>)
 80061e2:	f7fa f939 	bl	8000458 <__aeabi_dcmplt>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d100      	bne.n	80061ec <_dtoa_r+0x404>
 80061ea:	e090      	b.n	800630e <_dtoa_r+0x526>
 80061ec:	9b06      	ldr	r3, [sp, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d100      	bne.n	80061f4 <_dtoa_r+0x40c>
 80061f2:	e08c      	b.n	800630e <_dtoa_r+0x526>
 80061f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dd46      	ble.n	8006288 <_dtoa_r+0x4a0>
 80061fa:	9b02      	ldr	r3, [sp, #8]
 80061fc:	2200      	movs	r2, #0
 80061fe:	0020      	movs	r0, r4
 8006200:	0029      	movs	r1, r5
 8006202:	1e5e      	subs	r6, r3, #1
 8006204:	4ba1      	ldr	r3, [pc, #644]	; (800648c <_dtoa_r+0x6a4>)
 8006206:	f7fb fa11 	bl	800162c <__aeabi_dmul>
 800620a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800620c:	900a      	str	r0, [sp, #40]	; 0x28
 800620e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006210:	3301      	adds	r3, #1
 8006212:	9310      	str	r3, [sp, #64]	; 0x40
 8006214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006216:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006218:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800621a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800621c:	9307      	str	r3, [sp, #28]
 800621e:	f7fc f857 	bl	80022d0 <__aeabi_i2d>
 8006222:	0022      	movs	r2, r4
 8006224:	002b      	movs	r3, r5
 8006226:	f7fb fa01 	bl	800162c <__aeabi_dmul>
 800622a:	2200      	movs	r2, #0
 800622c:	4b98      	ldr	r3, [pc, #608]	; (8006490 <_dtoa_r+0x6a8>)
 800622e:	f7fa fa8d 	bl	800074c <__aeabi_dadd>
 8006232:	9010      	str	r0, [sp, #64]	; 0x40
 8006234:	9111      	str	r1, [sp, #68]	; 0x44
 8006236:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800623a:	920a      	str	r2, [sp, #40]	; 0x28
 800623c:	930b      	str	r3, [sp, #44]	; 0x2c
 800623e:	4a95      	ldr	r2, [pc, #596]	; (8006494 <_dtoa_r+0x6ac>)
 8006240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006242:	4694      	mov	ip, r2
 8006244:	4463      	add	r3, ip
 8006246:	9317      	str	r3, [sp, #92]	; 0x5c
 8006248:	930b      	str	r3, [sp, #44]	; 0x2c
 800624a:	9b07      	ldr	r3, [sp, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d161      	bne.n	8006314 <_dtoa_r+0x52c>
 8006250:	2200      	movs	r2, #0
 8006252:	0020      	movs	r0, r4
 8006254:	0029      	movs	r1, r5
 8006256:	4b90      	ldr	r3, [pc, #576]	; (8006498 <_dtoa_r+0x6b0>)
 8006258:	f7fb fc54 	bl	8001b04 <__aeabi_dsub>
 800625c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800625e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006260:	0004      	movs	r4, r0
 8006262:	000d      	movs	r5, r1
 8006264:	f7fa f90c 	bl	8000480 <__aeabi_dcmpgt>
 8006268:	2800      	cmp	r0, #0
 800626a:	d000      	beq.n	800626e <_dtoa_r+0x486>
 800626c:	e2b5      	b.n	80067da <_dtoa_r+0x9f2>
 800626e:	488b      	ldr	r0, [pc, #556]	; (800649c <_dtoa_r+0x6b4>)
 8006270:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006272:	4684      	mov	ip, r0
 8006274:	4461      	add	r1, ip
 8006276:	000b      	movs	r3, r1
 8006278:	0020      	movs	r0, r4
 800627a:	0029      	movs	r1, r5
 800627c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800627e:	f7fa f8eb 	bl	8000458 <__aeabi_dcmplt>
 8006282:	2800      	cmp	r0, #0
 8006284:	d000      	beq.n	8006288 <_dtoa_r+0x4a0>
 8006286:	e2a5      	b.n	80067d4 <_dtoa_r+0x9ec>
 8006288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800628a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800628c:	930a      	str	r3, [sp, #40]	; 0x28
 800628e:	940b      	str	r4, [sp, #44]	; 0x2c
 8006290:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006292:	2b00      	cmp	r3, #0
 8006294:	da00      	bge.n	8006298 <_dtoa_r+0x4b0>
 8006296:	e171      	b.n	800657c <_dtoa_r+0x794>
 8006298:	9a02      	ldr	r2, [sp, #8]
 800629a:	2a0e      	cmp	r2, #14
 800629c:	dd00      	ble.n	80062a0 <_dtoa_r+0x4b8>
 800629e:	e16d      	b.n	800657c <_dtoa_r+0x794>
 80062a0:	4b77      	ldr	r3, [pc, #476]	; (8006480 <_dtoa_r+0x698>)
 80062a2:	00d2      	lsls	r2, r2, #3
 80062a4:	189b      	adds	r3, r3, r2
 80062a6:	685c      	ldr	r4, [r3, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	9308      	str	r3, [sp, #32]
 80062ac:	9409      	str	r4, [sp, #36]	; 0x24
 80062ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	db00      	blt.n	80062b6 <_dtoa_r+0x4ce>
 80062b4:	e0f6      	b.n	80064a4 <_dtoa_r+0x6bc>
 80062b6:	9b06      	ldr	r3, [sp, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	dd00      	ble.n	80062be <_dtoa_r+0x4d6>
 80062bc:	e0f2      	b.n	80064a4 <_dtoa_r+0x6bc>
 80062be:	d000      	beq.n	80062c2 <_dtoa_r+0x4da>
 80062c0:	e288      	b.n	80067d4 <_dtoa_r+0x9ec>
 80062c2:	9808      	ldr	r0, [sp, #32]
 80062c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062c6:	2200      	movs	r2, #0
 80062c8:	4b73      	ldr	r3, [pc, #460]	; (8006498 <_dtoa_r+0x6b0>)
 80062ca:	f7fb f9af 	bl	800162c <__aeabi_dmul>
 80062ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d2:	f7fa f8df 	bl	8000494 <__aeabi_dcmpge>
 80062d6:	9e06      	ldr	r6, [sp, #24]
 80062d8:	0035      	movs	r5, r6
 80062da:	2800      	cmp	r0, #0
 80062dc:	d000      	beq.n	80062e0 <_dtoa_r+0x4f8>
 80062de:	e25f      	b.n	80067a0 <_dtoa_r+0x9b8>
 80062e0:	9b05      	ldr	r3, [sp, #20]
 80062e2:	9a05      	ldr	r2, [sp, #20]
 80062e4:	3301      	adds	r3, #1
 80062e6:	9307      	str	r3, [sp, #28]
 80062e8:	2331      	movs	r3, #49	; 0x31
 80062ea:	7013      	strb	r3, [r2, #0]
 80062ec:	9b02      	ldr	r3, [sp, #8]
 80062ee:	3301      	adds	r3, #1
 80062f0:	9302      	str	r3, [sp, #8]
 80062f2:	e25a      	b.n	80067aa <_dtoa_r+0x9c2>
 80062f4:	4234      	tst	r4, r6
 80062f6:	d007      	beq.n	8006308 <_dtoa_r+0x520>
 80062f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062fa:	3301      	adds	r3, #1
 80062fc:	9310      	str	r3, [sp, #64]	; 0x40
 80062fe:	682a      	ldr	r2, [r5, #0]
 8006300:	686b      	ldr	r3, [r5, #4]
 8006302:	f7fb f993 	bl	800162c <__aeabi_dmul>
 8006306:	0033      	movs	r3, r6
 8006308:	1064      	asrs	r4, r4, #1
 800630a:	3508      	adds	r5, #8
 800630c:	e75a      	b.n	80061c4 <_dtoa_r+0x3dc>
 800630e:	9e02      	ldr	r6, [sp, #8]
 8006310:	9b06      	ldr	r3, [sp, #24]
 8006312:	e780      	b.n	8006216 <_dtoa_r+0x42e>
 8006314:	9b07      	ldr	r3, [sp, #28]
 8006316:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006318:	1e5a      	subs	r2, r3, #1
 800631a:	4b59      	ldr	r3, [pc, #356]	; (8006480 <_dtoa_r+0x698>)
 800631c:	00d2      	lsls	r2, r2, #3
 800631e:	189b      	adds	r3, r3, r2
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2900      	cmp	r1, #0
 8006326:	d051      	beq.n	80063cc <_dtoa_r+0x5e4>
 8006328:	2000      	movs	r0, #0
 800632a:	495d      	ldr	r1, [pc, #372]	; (80064a0 <_dtoa_r+0x6b8>)
 800632c:	f7fa fd78 	bl	8000e20 <__aeabi_ddiv>
 8006330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006334:	f7fb fbe6 	bl	8001b04 <__aeabi_dsub>
 8006338:	9a05      	ldr	r2, [sp, #20]
 800633a:	9b05      	ldr	r3, [sp, #20]
 800633c:	4694      	mov	ip, r2
 800633e:	9310      	str	r3, [sp, #64]	; 0x40
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	900a      	str	r0, [sp, #40]	; 0x28
 8006344:	910b      	str	r1, [sp, #44]	; 0x2c
 8006346:	4463      	add	r3, ip
 8006348:	9319      	str	r3, [sp, #100]	; 0x64
 800634a:	0029      	movs	r1, r5
 800634c:	0020      	movs	r0, r4
 800634e:	f7fb ff89 	bl	8002264 <__aeabi_d2iz>
 8006352:	9017      	str	r0, [sp, #92]	; 0x5c
 8006354:	f7fb ffbc 	bl	80022d0 <__aeabi_i2d>
 8006358:	0002      	movs	r2, r0
 800635a:	000b      	movs	r3, r1
 800635c:	0020      	movs	r0, r4
 800635e:	0029      	movs	r1, r5
 8006360:	f7fb fbd0 	bl	8001b04 <__aeabi_dsub>
 8006364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006366:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006368:	3301      	adds	r3, #1
 800636a:	9307      	str	r3, [sp, #28]
 800636c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800636e:	0004      	movs	r4, r0
 8006370:	3330      	adds	r3, #48	; 0x30
 8006372:	7013      	strb	r3, [r2, #0]
 8006374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006378:	000d      	movs	r5, r1
 800637a:	f7fa f86d 	bl	8000458 <__aeabi_dcmplt>
 800637e:	2800      	cmp	r0, #0
 8006380:	d175      	bne.n	800646e <_dtoa_r+0x686>
 8006382:	0022      	movs	r2, r4
 8006384:	002b      	movs	r3, r5
 8006386:	2000      	movs	r0, #0
 8006388:	493f      	ldr	r1, [pc, #252]	; (8006488 <_dtoa_r+0x6a0>)
 800638a:	f7fb fbbb 	bl	8001b04 <__aeabi_dsub>
 800638e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006392:	f7fa f861 	bl	8000458 <__aeabi_dcmplt>
 8006396:	2800      	cmp	r0, #0
 8006398:	d000      	beq.n	800639c <_dtoa_r+0x5b4>
 800639a:	e0d1      	b.n	8006540 <_dtoa_r+0x758>
 800639c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800639e:	9a07      	ldr	r2, [sp, #28]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d100      	bne.n	80063a6 <_dtoa_r+0x5be>
 80063a4:	e770      	b.n	8006288 <_dtoa_r+0x4a0>
 80063a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80063a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063aa:	2200      	movs	r2, #0
 80063ac:	4b37      	ldr	r3, [pc, #220]	; (800648c <_dtoa_r+0x6a4>)
 80063ae:	f7fb f93d 	bl	800162c <__aeabi_dmul>
 80063b2:	4b36      	ldr	r3, [pc, #216]	; (800648c <_dtoa_r+0x6a4>)
 80063b4:	900a      	str	r0, [sp, #40]	; 0x28
 80063b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80063b8:	2200      	movs	r2, #0
 80063ba:	0020      	movs	r0, r4
 80063bc:	0029      	movs	r1, r5
 80063be:	f7fb f935 	bl	800162c <__aeabi_dmul>
 80063c2:	9b07      	ldr	r3, [sp, #28]
 80063c4:	0004      	movs	r4, r0
 80063c6:	000d      	movs	r5, r1
 80063c8:	9310      	str	r3, [sp, #64]	; 0x40
 80063ca:	e7be      	b.n	800634a <_dtoa_r+0x562>
 80063cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80063ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063d0:	f7fb f92c 	bl	800162c <__aeabi_dmul>
 80063d4:	9a05      	ldr	r2, [sp, #20]
 80063d6:	9b05      	ldr	r3, [sp, #20]
 80063d8:	4694      	mov	ip, r2
 80063da:	930a      	str	r3, [sp, #40]	; 0x28
 80063dc:	9b07      	ldr	r3, [sp, #28]
 80063de:	9010      	str	r0, [sp, #64]	; 0x40
 80063e0:	9111      	str	r1, [sp, #68]	; 0x44
 80063e2:	4463      	add	r3, ip
 80063e4:	9319      	str	r3, [sp, #100]	; 0x64
 80063e6:	0029      	movs	r1, r5
 80063e8:	0020      	movs	r0, r4
 80063ea:	f7fb ff3b 	bl	8002264 <__aeabi_d2iz>
 80063ee:	9017      	str	r0, [sp, #92]	; 0x5c
 80063f0:	f7fb ff6e 	bl	80022d0 <__aeabi_i2d>
 80063f4:	0002      	movs	r2, r0
 80063f6:	000b      	movs	r3, r1
 80063f8:	0020      	movs	r0, r4
 80063fa:	0029      	movs	r1, r5
 80063fc:	f7fb fb82 	bl	8001b04 <__aeabi_dsub>
 8006400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006404:	3330      	adds	r3, #48	; 0x30
 8006406:	7013      	strb	r3, [r2, #0]
 8006408:	0013      	movs	r3, r2
 800640a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800640c:	3301      	adds	r3, #1
 800640e:	0004      	movs	r4, r0
 8006410:	000d      	movs	r5, r1
 8006412:	930a      	str	r3, [sp, #40]	; 0x28
 8006414:	4293      	cmp	r3, r2
 8006416:	d12c      	bne.n	8006472 <_dtoa_r+0x68a>
 8006418:	9810      	ldr	r0, [sp, #64]	; 0x40
 800641a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800641c:	9a05      	ldr	r2, [sp, #20]
 800641e:	9b07      	ldr	r3, [sp, #28]
 8006420:	4694      	mov	ip, r2
 8006422:	4463      	add	r3, ip
 8006424:	2200      	movs	r2, #0
 8006426:	9307      	str	r3, [sp, #28]
 8006428:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <_dtoa_r+0x6b8>)
 800642a:	f7fa f98f 	bl	800074c <__aeabi_dadd>
 800642e:	0002      	movs	r2, r0
 8006430:	000b      	movs	r3, r1
 8006432:	0020      	movs	r0, r4
 8006434:	0029      	movs	r1, r5
 8006436:	f7fa f823 	bl	8000480 <__aeabi_dcmpgt>
 800643a:	2800      	cmp	r0, #0
 800643c:	d000      	beq.n	8006440 <_dtoa_r+0x658>
 800643e:	e07f      	b.n	8006540 <_dtoa_r+0x758>
 8006440:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006444:	2000      	movs	r0, #0
 8006446:	4916      	ldr	r1, [pc, #88]	; (80064a0 <_dtoa_r+0x6b8>)
 8006448:	f7fb fb5c 	bl	8001b04 <__aeabi_dsub>
 800644c:	0002      	movs	r2, r0
 800644e:	000b      	movs	r3, r1
 8006450:	0020      	movs	r0, r4
 8006452:	0029      	movs	r1, r5
 8006454:	f7fa f800 	bl	8000458 <__aeabi_dcmplt>
 8006458:	2800      	cmp	r0, #0
 800645a:	d100      	bne.n	800645e <_dtoa_r+0x676>
 800645c:	e714      	b.n	8006288 <_dtoa_r+0x4a0>
 800645e:	9b07      	ldr	r3, [sp, #28]
 8006460:	001a      	movs	r2, r3
 8006462:	3a01      	subs	r2, #1
 8006464:	9207      	str	r2, [sp, #28]
 8006466:	7812      	ldrb	r2, [r2, #0]
 8006468:	2a30      	cmp	r2, #48	; 0x30
 800646a:	d0f8      	beq.n	800645e <_dtoa_r+0x676>
 800646c:	9307      	str	r3, [sp, #28]
 800646e:	9602      	str	r6, [sp, #8]
 8006470:	e054      	b.n	800651c <_dtoa_r+0x734>
 8006472:	2200      	movs	r2, #0
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <_dtoa_r+0x6a4>)
 8006476:	f7fb f8d9 	bl	800162c <__aeabi_dmul>
 800647a:	0004      	movs	r4, r0
 800647c:	000d      	movs	r5, r1
 800647e:	e7b2      	b.n	80063e6 <_dtoa_r+0x5fe>
 8006480:	08008560 	.word	0x08008560
 8006484:	08008538 	.word	0x08008538
 8006488:	3ff00000 	.word	0x3ff00000
 800648c:	40240000 	.word	0x40240000
 8006490:	401c0000 	.word	0x401c0000
 8006494:	fcc00000 	.word	0xfcc00000
 8006498:	40140000 	.word	0x40140000
 800649c:	7cc00000 	.word	0x7cc00000
 80064a0:	3fe00000 	.word	0x3fe00000
 80064a4:	9b06      	ldr	r3, [sp, #24]
 80064a6:	9e05      	ldr	r6, [sp, #20]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	199b      	adds	r3, r3, r6
 80064ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80064b0:	930a      	str	r3, [sp, #40]	; 0x28
 80064b2:	9a08      	ldr	r2, [sp, #32]
 80064b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b6:	0020      	movs	r0, r4
 80064b8:	0029      	movs	r1, r5
 80064ba:	f7fa fcb1 	bl	8000e20 <__aeabi_ddiv>
 80064be:	f7fb fed1 	bl	8002264 <__aeabi_d2iz>
 80064c2:	9006      	str	r0, [sp, #24]
 80064c4:	f7fb ff04 	bl	80022d0 <__aeabi_i2d>
 80064c8:	9a08      	ldr	r2, [sp, #32]
 80064ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064cc:	f7fb f8ae 	bl	800162c <__aeabi_dmul>
 80064d0:	0002      	movs	r2, r0
 80064d2:	000b      	movs	r3, r1
 80064d4:	0020      	movs	r0, r4
 80064d6:	0029      	movs	r1, r5
 80064d8:	f7fb fb14 	bl	8001b04 <__aeabi_dsub>
 80064dc:	0033      	movs	r3, r6
 80064de:	9a06      	ldr	r2, [sp, #24]
 80064e0:	3601      	adds	r6, #1
 80064e2:	3230      	adds	r2, #48	; 0x30
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064e8:	9607      	str	r6, [sp, #28]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d139      	bne.n	8006562 <_dtoa_r+0x77a>
 80064ee:	0002      	movs	r2, r0
 80064f0:	000b      	movs	r3, r1
 80064f2:	f7fa f92b 	bl	800074c <__aeabi_dadd>
 80064f6:	9a08      	ldr	r2, [sp, #32]
 80064f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fa:	0004      	movs	r4, r0
 80064fc:	000d      	movs	r5, r1
 80064fe:	f7f9 ffbf 	bl	8000480 <__aeabi_dcmpgt>
 8006502:	2800      	cmp	r0, #0
 8006504:	d11b      	bne.n	800653e <_dtoa_r+0x756>
 8006506:	9a08      	ldr	r2, [sp, #32]
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	0020      	movs	r0, r4
 800650c:	0029      	movs	r1, r5
 800650e:	f7f9 ff9d 	bl	800044c <__aeabi_dcmpeq>
 8006512:	2800      	cmp	r0, #0
 8006514:	d002      	beq.n	800651c <_dtoa_r+0x734>
 8006516:	9b06      	ldr	r3, [sp, #24]
 8006518:	07db      	lsls	r3, r3, #31
 800651a:	d410      	bmi.n	800653e <_dtoa_r+0x756>
 800651c:	0038      	movs	r0, r7
 800651e:	9904      	ldr	r1, [sp, #16]
 8006520:	f000 fae6 	bl	8006af0 <_Bfree>
 8006524:	2300      	movs	r3, #0
 8006526:	9a07      	ldr	r2, [sp, #28]
 8006528:	9802      	ldr	r0, [sp, #8]
 800652a:	7013      	strb	r3, [r2, #0]
 800652c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800652e:	3001      	adds	r0, #1
 8006530:	6018      	str	r0, [r3, #0]
 8006532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006534:	2b00      	cmp	r3, #0
 8006536:	d100      	bne.n	800653a <_dtoa_r+0x752>
 8006538:	e4a3      	b.n	8005e82 <_dtoa_r+0x9a>
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	e4a1      	b.n	8005e82 <_dtoa_r+0x9a>
 800653e:	9e02      	ldr	r6, [sp, #8]
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	9307      	str	r3, [sp, #28]
 8006544:	3b01      	subs	r3, #1
 8006546:	781a      	ldrb	r2, [r3, #0]
 8006548:	2a39      	cmp	r2, #57	; 0x39
 800654a:	d106      	bne.n	800655a <_dtoa_r+0x772>
 800654c:	9a05      	ldr	r2, [sp, #20]
 800654e:	429a      	cmp	r2, r3
 8006550:	d1f7      	bne.n	8006542 <_dtoa_r+0x75a>
 8006552:	2230      	movs	r2, #48	; 0x30
 8006554:	9905      	ldr	r1, [sp, #20]
 8006556:	3601      	adds	r6, #1
 8006558:	700a      	strb	r2, [r1, #0]
 800655a:	781a      	ldrb	r2, [r3, #0]
 800655c:	3201      	adds	r2, #1
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	e785      	b.n	800646e <_dtoa_r+0x686>
 8006562:	2200      	movs	r2, #0
 8006564:	4bad      	ldr	r3, [pc, #692]	; (800681c <_dtoa_r+0xa34>)
 8006566:	f7fb f861 	bl	800162c <__aeabi_dmul>
 800656a:	2200      	movs	r2, #0
 800656c:	2300      	movs	r3, #0
 800656e:	0004      	movs	r4, r0
 8006570:	000d      	movs	r5, r1
 8006572:	f7f9 ff6b 	bl	800044c <__aeabi_dcmpeq>
 8006576:	2800      	cmp	r0, #0
 8006578:	d09b      	beq.n	80064b2 <_dtoa_r+0x6ca>
 800657a:	e7cf      	b.n	800651c <_dtoa_r+0x734>
 800657c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800657e:	2a00      	cmp	r2, #0
 8006580:	d100      	bne.n	8006584 <_dtoa_r+0x79c>
 8006582:	e082      	b.n	800668a <_dtoa_r+0x8a2>
 8006584:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006586:	2a01      	cmp	r2, #1
 8006588:	dc66      	bgt.n	8006658 <_dtoa_r+0x870>
 800658a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800658c:	2a00      	cmp	r2, #0
 800658e:	d05f      	beq.n	8006650 <_dtoa_r+0x868>
 8006590:	4aa3      	ldr	r2, [pc, #652]	; (8006820 <_dtoa_r+0xa38>)
 8006592:	189b      	adds	r3, r3, r2
 8006594:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006596:	9c08      	ldr	r4, [sp, #32]
 8006598:	9a08      	ldr	r2, [sp, #32]
 800659a:	2101      	movs	r1, #1
 800659c:	18d2      	adds	r2, r2, r3
 800659e:	9208      	str	r2, [sp, #32]
 80065a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065a2:	0038      	movs	r0, r7
 80065a4:	18d3      	adds	r3, r2, r3
 80065a6:	930d      	str	r3, [sp, #52]	; 0x34
 80065a8:	f000 fb52 	bl	8006c50 <__i2b>
 80065ac:	0005      	movs	r5, r0
 80065ae:	2c00      	cmp	r4, #0
 80065b0:	dd0e      	ble.n	80065d0 <_dtoa_r+0x7e8>
 80065b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	dd0b      	ble.n	80065d0 <_dtoa_r+0x7e8>
 80065b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065ba:	0023      	movs	r3, r4
 80065bc:	4294      	cmp	r4, r2
 80065be:	dd00      	ble.n	80065c2 <_dtoa_r+0x7da>
 80065c0:	0013      	movs	r3, r2
 80065c2:	9a08      	ldr	r2, [sp, #32]
 80065c4:	1ae4      	subs	r4, r4, r3
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	9208      	str	r2, [sp, #32]
 80065ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	930d      	str	r3, [sp, #52]	; 0x34
 80065d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01f      	beq.n	8006616 <_dtoa_r+0x82e>
 80065d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d05a      	beq.n	8006692 <_dtoa_r+0x8aa>
 80065dc:	2e00      	cmp	r6, #0
 80065de:	dd11      	ble.n	8006604 <_dtoa_r+0x81c>
 80065e0:	0029      	movs	r1, r5
 80065e2:	0032      	movs	r2, r6
 80065e4:	0038      	movs	r0, r7
 80065e6:	f000 fbf9 	bl	8006ddc <__pow5mult>
 80065ea:	9a04      	ldr	r2, [sp, #16]
 80065ec:	0001      	movs	r1, r0
 80065ee:	0005      	movs	r5, r0
 80065f0:	0038      	movs	r0, r7
 80065f2:	f000 fb43 	bl	8006c7c <__multiply>
 80065f6:	9904      	ldr	r1, [sp, #16]
 80065f8:	9007      	str	r0, [sp, #28]
 80065fa:	0038      	movs	r0, r7
 80065fc:	f000 fa78 	bl	8006af0 <_Bfree>
 8006600:	9b07      	ldr	r3, [sp, #28]
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006606:	1b9a      	subs	r2, r3, r6
 8006608:	42b3      	cmp	r3, r6
 800660a:	d004      	beq.n	8006616 <_dtoa_r+0x82e>
 800660c:	0038      	movs	r0, r7
 800660e:	9904      	ldr	r1, [sp, #16]
 8006610:	f000 fbe4 	bl	8006ddc <__pow5mult>
 8006614:	9004      	str	r0, [sp, #16]
 8006616:	2101      	movs	r1, #1
 8006618:	0038      	movs	r0, r7
 800661a:	f000 fb19 	bl	8006c50 <__i2b>
 800661e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006620:	0006      	movs	r6, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	dd37      	ble.n	8006696 <_dtoa_r+0x8ae>
 8006626:	001a      	movs	r2, r3
 8006628:	0001      	movs	r1, r0
 800662a:	0038      	movs	r0, r7
 800662c:	f000 fbd6 	bl	8006ddc <__pow5mult>
 8006630:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006632:	0006      	movs	r6, r0
 8006634:	2b01      	cmp	r3, #1
 8006636:	dd33      	ble.n	80066a0 <_dtoa_r+0x8b8>
 8006638:	2300      	movs	r3, #0
 800663a:	9307      	str	r3, [sp, #28]
 800663c:	6933      	ldr	r3, [r6, #16]
 800663e:	3303      	adds	r3, #3
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	18f3      	adds	r3, r6, r3
 8006644:	6858      	ldr	r0, [r3, #4]
 8006646:	f000 fabb 	bl	8006bc0 <__hi0bits>
 800664a:	2320      	movs	r3, #32
 800664c:	1a18      	subs	r0, r3, r0
 800664e:	e03f      	b.n	80066d0 <_dtoa_r+0x8e8>
 8006650:	2336      	movs	r3, #54	; 0x36
 8006652:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	e79d      	b.n	8006594 <_dtoa_r+0x7ac>
 8006658:	9b06      	ldr	r3, [sp, #24]
 800665a:	1e5e      	subs	r6, r3, #1
 800665c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665e:	42b3      	cmp	r3, r6
 8006660:	db08      	blt.n	8006674 <_dtoa_r+0x88c>
 8006662:	1b9e      	subs	r6, r3, r6
 8006664:	9b06      	ldr	r3, [sp, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	da0c      	bge.n	8006684 <_dtoa_r+0x89c>
 800666a:	9b08      	ldr	r3, [sp, #32]
 800666c:	9a06      	ldr	r2, [sp, #24]
 800666e:	1a9c      	subs	r4, r3, r2
 8006670:	2300      	movs	r3, #0
 8006672:	e791      	b.n	8006598 <_dtoa_r+0x7b0>
 8006674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006676:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006678:	1af3      	subs	r3, r6, r3
 800667a:	18d3      	adds	r3, r2, r3
 800667c:	960e      	str	r6, [sp, #56]	; 0x38
 800667e:	9314      	str	r3, [sp, #80]	; 0x50
 8006680:	2600      	movs	r6, #0
 8006682:	e7ef      	b.n	8006664 <_dtoa_r+0x87c>
 8006684:	9c08      	ldr	r4, [sp, #32]
 8006686:	9b06      	ldr	r3, [sp, #24]
 8006688:	e786      	b.n	8006598 <_dtoa_r+0x7b0>
 800668a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800668c:	9c08      	ldr	r4, [sp, #32]
 800668e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006690:	e78d      	b.n	80065ae <_dtoa_r+0x7c6>
 8006692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006694:	e7ba      	b.n	800660c <_dtoa_r+0x824>
 8006696:	2300      	movs	r3, #0
 8006698:	9307      	str	r3, [sp, #28]
 800669a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800669c:	2b01      	cmp	r3, #1
 800669e:	dc13      	bgt.n	80066c8 <_dtoa_r+0x8e0>
 80066a0:	2300      	movs	r3, #0
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10e      	bne.n	80066c8 <_dtoa_r+0x8e0>
 80066aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ac:	031b      	lsls	r3, r3, #12
 80066ae:	d10b      	bne.n	80066c8 <_dtoa_r+0x8e0>
 80066b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80066b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066b4:	4213      	tst	r3, r2
 80066b6:	d007      	beq.n	80066c8 <_dtoa_r+0x8e0>
 80066b8:	9b08      	ldr	r3, [sp, #32]
 80066ba:	3301      	adds	r3, #1
 80066bc:	9308      	str	r3, [sp, #32]
 80066be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066c0:	3301      	adds	r3, #1
 80066c2:	930d      	str	r3, [sp, #52]	; 0x34
 80066c4:	2301      	movs	r3, #1
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066ca:	2001      	movs	r0, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1b5      	bne.n	800663c <_dtoa_r+0x854>
 80066d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066d2:	221f      	movs	r2, #31
 80066d4:	1818      	adds	r0, r3, r0
 80066d6:	0003      	movs	r3, r0
 80066d8:	4013      	ands	r3, r2
 80066da:	4210      	tst	r0, r2
 80066dc:	d046      	beq.n	800676c <_dtoa_r+0x984>
 80066de:	3201      	adds	r2, #1
 80066e0:	1ad2      	subs	r2, r2, r3
 80066e2:	2a04      	cmp	r2, #4
 80066e4:	dd3f      	ble.n	8006766 <_dtoa_r+0x97e>
 80066e6:	221c      	movs	r2, #28
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	9a08      	ldr	r2, [sp, #32]
 80066ec:	18e4      	adds	r4, r4, r3
 80066ee:	18d2      	adds	r2, r2, r3
 80066f0:	9208      	str	r2, [sp, #32]
 80066f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066f4:	18d3      	adds	r3, r2, r3
 80066f6:	930d      	str	r3, [sp, #52]	; 0x34
 80066f8:	9b08      	ldr	r3, [sp, #32]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dd05      	ble.n	800670a <_dtoa_r+0x922>
 80066fe:	001a      	movs	r2, r3
 8006700:	0038      	movs	r0, r7
 8006702:	9904      	ldr	r1, [sp, #16]
 8006704:	f000 fbc6 	bl	8006e94 <__lshift>
 8006708:	9004      	str	r0, [sp, #16]
 800670a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd05      	ble.n	800671c <_dtoa_r+0x934>
 8006710:	0031      	movs	r1, r6
 8006712:	001a      	movs	r2, r3
 8006714:	0038      	movs	r0, r7
 8006716:	f000 fbbd 	bl	8006e94 <__lshift>
 800671a:	0006      	movs	r6, r0
 800671c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800671e:	2b00      	cmp	r3, #0
 8006720:	d026      	beq.n	8006770 <_dtoa_r+0x988>
 8006722:	0031      	movs	r1, r6
 8006724:	9804      	ldr	r0, [sp, #16]
 8006726:	f000 fc25 	bl	8006f74 <__mcmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	da20      	bge.n	8006770 <_dtoa_r+0x988>
 800672e:	9b02      	ldr	r3, [sp, #8]
 8006730:	220a      	movs	r2, #10
 8006732:	3b01      	subs	r3, #1
 8006734:	9302      	str	r3, [sp, #8]
 8006736:	0038      	movs	r0, r7
 8006738:	2300      	movs	r3, #0
 800673a:	9904      	ldr	r1, [sp, #16]
 800673c:	f000 f9fc 	bl	8006b38 <__multadd>
 8006740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006742:	9004      	str	r0, [sp, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d100      	bne.n	800674a <_dtoa_r+0x962>
 8006748:	e160      	b.n	8006a0c <_dtoa_r+0xc24>
 800674a:	2300      	movs	r3, #0
 800674c:	0029      	movs	r1, r5
 800674e:	220a      	movs	r2, #10
 8006750:	0038      	movs	r0, r7
 8006752:	f000 f9f1 	bl	8006b38 <__multadd>
 8006756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006758:	0005      	movs	r5, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	dc47      	bgt.n	80067ee <_dtoa_r+0xa06>
 800675e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006760:	2b02      	cmp	r3, #2
 8006762:	dc0d      	bgt.n	8006780 <_dtoa_r+0x998>
 8006764:	e043      	b.n	80067ee <_dtoa_r+0xa06>
 8006766:	2a04      	cmp	r2, #4
 8006768:	d0c6      	beq.n	80066f8 <_dtoa_r+0x910>
 800676a:	0013      	movs	r3, r2
 800676c:	331c      	adds	r3, #28
 800676e:	e7bc      	b.n	80066ea <_dtoa_r+0x902>
 8006770:	9b06      	ldr	r3, [sp, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	dc35      	bgt.n	80067e2 <_dtoa_r+0x9fa>
 8006776:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006778:	2b02      	cmp	r3, #2
 800677a:	dd32      	ble.n	80067e2 <_dtoa_r+0x9fa>
 800677c:	9b06      	ldr	r3, [sp, #24]
 800677e:	930c      	str	r3, [sp, #48]	; 0x30
 8006780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10c      	bne.n	80067a0 <_dtoa_r+0x9b8>
 8006786:	0031      	movs	r1, r6
 8006788:	2205      	movs	r2, #5
 800678a:	0038      	movs	r0, r7
 800678c:	f000 f9d4 	bl	8006b38 <__multadd>
 8006790:	0006      	movs	r6, r0
 8006792:	0001      	movs	r1, r0
 8006794:	9804      	ldr	r0, [sp, #16]
 8006796:	f000 fbed 	bl	8006f74 <__mcmp>
 800679a:	2800      	cmp	r0, #0
 800679c:	dd00      	ble.n	80067a0 <_dtoa_r+0x9b8>
 800679e:	e59f      	b.n	80062e0 <_dtoa_r+0x4f8>
 80067a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067a2:	43db      	mvns	r3, r3
 80067a4:	9302      	str	r3, [sp, #8]
 80067a6:	9b05      	ldr	r3, [sp, #20]
 80067a8:	9307      	str	r3, [sp, #28]
 80067aa:	2400      	movs	r4, #0
 80067ac:	0031      	movs	r1, r6
 80067ae:	0038      	movs	r0, r7
 80067b0:	f000 f99e 	bl	8006af0 <_Bfree>
 80067b4:	2d00      	cmp	r5, #0
 80067b6:	d100      	bne.n	80067ba <_dtoa_r+0x9d2>
 80067b8:	e6b0      	b.n	800651c <_dtoa_r+0x734>
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	d005      	beq.n	80067ca <_dtoa_r+0x9e2>
 80067be:	42ac      	cmp	r4, r5
 80067c0:	d003      	beq.n	80067ca <_dtoa_r+0x9e2>
 80067c2:	0021      	movs	r1, r4
 80067c4:	0038      	movs	r0, r7
 80067c6:	f000 f993 	bl	8006af0 <_Bfree>
 80067ca:	0029      	movs	r1, r5
 80067cc:	0038      	movs	r0, r7
 80067ce:	f000 f98f 	bl	8006af0 <_Bfree>
 80067d2:	e6a3      	b.n	800651c <_dtoa_r+0x734>
 80067d4:	2600      	movs	r6, #0
 80067d6:	0035      	movs	r5, r6
 80067d8:	e7e2      	b.n	80067a0 <_dtoa_r+0x9b8>
 80067da:	9602      	str	r6, [sp, #8]
 80067dc:	9e07      	ldr	r6, [sp, #28]
 80067de:	0035      	movs	r5, r6
 80067e0:	e57e      	b.n	80062e0 <_dtoa_r+0x4f8>
 80067e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d100      	bne.n	80067ea <_dtoa_r+0xa02>
 80067e8:	e0c8      	b.n	800697c <_dtoa_r+0xb94>
 80067ea:	9b06      	ldr	r3, [sp, #24]
 80067ec:	930c      	str	r3, [sp, #48]	; 0x30
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	dd05      	ble.n	80067fe <_dtoa_r+0xa16>
 80067f2:	0029      	movs	r1, r5
 80067f4:	0022      	movs	r2, r4
 80067f6:	0038      	movs	r0, r7
 80067f8:	f000 fb4c 	bl	8006e94 <__lshift>
 80067fc:	0005      	movs	r5, r0
 80067fe:	9b07      	ldr	r3, [sp, #28]
 8006800:	0028      	movs	r0, r5
 8006802:	2b00      	cmp	r3, #0
 8006804:	d01f      	beq.n	8006846 <_dtoa_r+0xa5e>
 8006806:	0038      	movs	r0, r7
 8006808:	6869      	ldr	r1, [r5, #4]
 800680a:	f000 f92d 	bl	8006a68 <_Balloc>
 800680e:	1e04      	subs	r4, r0, #0
 8006810:	d10c      	bne.n	800682c <_dtoa_r+0xa44>
 8006812:	0002      	movs	r2, r0
 8006814:	4b03      	ldr	r3, [pc, #12]	; (8006824 <_dtoa_r+0xa3c>)
 8006816:	4904      	ldr	r1, [pc, #16]	; (8006828 <_dtoa_r+0xa40>)
 8006818:	f7ff fafb 	bl	8005e12 <_dtoa_r+0x2a>
 800681c:	40240000 	.word	0x40240000
 8006820:	00000433 	.word	0x00000433
 8006824:	080084c3 	.word	0x080084c3
 8006828:	000002ea 	.word	0x000002ea
 800682c:	0029      	movs	r1, r5
 800682e:	692b      	ldr	r3, [r5, #16]
 8006830:	310c      	adds	r1, #12
 8006832:	1c9a      	adds	r2, r3, #2
 8006834:	0092      	lsls	r2, r2, #2
 8006836:	300c      	adds	r0, #12
 8006838:	f000 f90d 	bl	8006a56 <memcpy>
 800683c:	2201      	movs	r2, #1
 800683e:	0021      	movs	r1, r4
 8006840:	0038      	movs	r0, r7
 8006842:	f000 fb27 	bl	8006e94 <__lshift>
 8006846:	002c      	movs	r4, r5
 8006848:	0005      	movs	r5, r0
 800684a:	9b05      	ldr	r3, [sp, #20]
 800684c:	9308      	str	r3, [sp, #32]
 800684e:	0031      	movs	r1, r6
 8006850:	9804      	ldr	r0, [sp, #16]
 8006852:	f7ff fa3d 	bl	8005cd0 <quorem>
 8006856:	0003      	movs	r3, r0
 8006858:	0021      	movs	r1, r4
 800685a:	3330      	adds	r3, #48	; 0x30
 800685c:	900e      	str	r0, [sp, #56]	; 0x38
 800685e:	9804      	ldr	r0, [sp, #16]
 8006860:	9306      	str	r3, [sp, #24]
 8006862:	f000 fb87 	bl	8006f74 <__mcmp>
 8006866:	002a      	movs	r2, r5
 8006868:	900f      	str	r0, [sp, #60]	; 0x3c
 800686a:	0031      	movs	r1, r6
 800686c:	0038      	movs	r0, r7
 800686e:	f000 fb9d 	bl	8006fac <__mdiff>
 8006872:	68c3      	ldr	r3, [r0, #12]
 8006874:	9007      	str	r0, [sp, #28]
 8006876:	9310      	str	r3, [sp, #64]	; 0x40
 8006878:	2301      	movs	r3, #1
 800687a:	930d      	str	r3, [sp, #52]	; 0x34
 800687c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d104      	bne.n	800688c <_dtoa_r+0xaa4>
 8006882:	0001      	movs	r1, r0
 8006884:	9804      	ldr	r0, [sp, #16]
 8006886:	f000 fb75 	bl	8006f74 <__mcmp>
 800688a:	900d      	str	r0, [sp, #52]	; 0x34
 800688c:	0038      	movs	r0, r7
 800688e:	9907      	ldr	r1, [sp, #28]
 8006890:	f000 f92e 	bl	8006af0 <_Bfree>
 8006894:	2301      	movs	r3, #1
 8006896:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800689a:	4018      	ands	r0, r3
 800689c:	9b08      	ldr	r3, [sp, #32]
 800689e:	3301      	adds	r3, #1
 80068a0:	9307      	str	r3, [sp, #28]
 80068a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068a4:	4313      	orrs	r3, r2
 80068a6:	4303      	orrs	r3, r0
 80068a8:	d10c      	bne.n	80068c4 <_dtoa_r+0xadc>
 80068aa:	9b06      	ldr	r3, [sp, #24]
 80068ac:	2b39      	cmp	r3, #57	; 0x39
 80068ae:	d025      	beq.n	80068fc <_dtoa_r+0xb14>
 80068b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dd02      	ble.n	80068bc <_dtoa_r+0xad4>
 80068b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b8:	3331      	adds	r3, #49	; 0x31
 80068ba:	9306      	str	r3, [sp, #24]
 80068bc:	9b08      	ldr	r3, [sp, #32]
 80068be:	9a06      	ldr	r2, [sp, #24]
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e773      	b.n	80067ac <_dtoa_r+0x9c4>
 80068c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	db03      	blt.n	80068d2 <_dtoa_r+0xaea>
 80068ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068cc:	4313      	orrs	r3, r2
 80068ce:	4303      	orrs	r3, r0
 80068d0:	d11f      	bne.n	8006912 <_dtoa_r+0xb2a>
 80068d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	ddf1      	ble.n	80068bc <_dtoa_r+0xad4>
 80068d8:	9904      	ldr	r1, [sp, #16]
 80068da:	2201      	movs	r2, #1
 80068dc:	0038      	movs	r0, r7
 80068de:	f000 fad9 	bl	8006e94 <__lshift>
 80068e2:	0031      	movs	r1, r6
 80068e4:	9004      	str	r0, [sp, #16]
 80068e6:	f000 fb45 	bl	8006f74 <__mcmp>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	dc03      	bgt.n	80068f6 <_dtoa_r+0xb0e>
 80068ee:	d1e5      	bne.n	80068bc <_dtoa_r+0xad4>
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	07db      	lsls	r3, r3, #31
 80068f4:	d5e2      	bpl.n	80068bc <_dtoa_r+0xad4>
 80068f6:	9b06      	ldr	r3, [sp, #24]
 80068f8:	2b39      	cmp	r3, #57	; 0x39
 80068fa:	d1dc      	bne.n	80068b6 <_dtoa_r+0xace>
 80068fc:	2339      	movs	r3, #57	; 0x39
 80068fe:	9a08      	ldr	r2, [sp, #32]
 8006900:	7013      	strb	r3, [r2, #0]
 8006902:	9b07      	ldr	r3, [sp, #28]
 8006904:	9307      	str	r3, [sp, #28]
 8006906:	3b01      	subs	r3, #1
 8006908:	781a      	ldrb	r2, [r3, #0]
 800690a:	2a39      	cmp	r2, #57	; 0x39
 800690c:	d06c      	beq.n	80069e8 <_dtoa_r+0xc00>
 800690e:	3201      	adds	r2, #1
 8006910:	e7d6      	b.n	80068c0 <_dtoa_r+0xad8>
 8006912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	dd07      	ble.n	8006928 <_dtoa_r+0xb40>
 8006918:	9b06      	ldr	r3, [sp, #24]
 800691a:	2b39      	cmp	r3, #57	; 0x39
 800691c:	d0ee      	beq.n	80068fc <_dtoa_r+0xb14>
 800691e:	9b06      	ldr	r3, [sp, #24]
 8006920:	9a08      	ldr	r2, [sp, #32]
 8006922:	3301      	adds	r3, #1
 8006924:	7013      	strb	r3, [r2, #0]
 8006926:	e741      	b.n	80067ac <_dtoa_r+0x9c4>
 8006928:	9b08      	ldr	r3, [sp, #32]
 800692a:	9a06      	ldr	r2, [sp, #24]
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	2301      	movs	r3, #1
 8006930:	9a05      	ldr	r2, [sp, #20]
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	9a08      	ldr	r2, [sp, #32]
 8006936:	189b      	adds	r3, r3, r2
 8006938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800693a:	429a      	cmp	r2, r3
 800693c:	d03e      	beq.n	80069bc <_dtoa_r+0xbd4>
 800693e:	2300      	movs	r3, #0
 8006940:	220a      	movs	r2, #10
 8006942:	9904      	ldr	r1, [sp, #16]
 8006944:	0038      	movs	r0, r7
 8006946:	f000 f8f7 	bl	8006b38 <__multadd>
 800694a:	2300      	movs	r3, #0
 800694c:	9004      	str	r0, [sp, #16]
 800694e:	220a      	movs	r2, #10
 8006950:	0021      	movs	r1, r4
 8006952:	0038      	movs	r0, r7
 8006954:	42ac      	cmp	r4, r5
 8006956:	d106      	bne.n	8006966 <_dtoa_r+0xb7e>
 8006958:	f000 f8ee 	bl	8006b38 <__multadd>
 800695c:	0004      	movs	r4, r0
 800695e:	0005      	movs	r5, r0
 8006960:	9b07      	ldr	r3, [sp, #28]
 8006962:	9308      	str	r3, [sp, #32]
 8006964:	e773      	b.n	800684e <_dtoa_r+0xa66>
 8006966:	f000 f8e7 	bl	8006b38 <__multadd>
 800696a:	0029      	movs	r1, r5
 800696c:	0004      	movs	r4, r0
 800696e:	2300      	movs	r3, #0
 8006970:	220a      	movs	r2, #10
 8006972:	0038      	movs	r0, r7
 8006974:	f000 f8e0 	bl	8006b38 <__multadd>
 8006978:	0005      	movs	r5, r0
 800697a:	e7f1      	b.n	8006960 <_dtoa_r+0xb78>
 800697c:	9b06      	ldr	r3, [sp, #24]
 800697e:	930c      	str	r3, [sp, #48]	; 0x30
 8006980:	2400      	movs	r4, #0
 8006982:	0031      	movs	r1, r6
 8006984:	9804      	ldr	r0, [sp, #16]
 8006986:	f7ff f9a3 	bl	8005cd0 <quorem>
 800698a:	9b05      	ldr	r3, [sp, #20]
 800698c:	3030      	adds	r0, #48	; 0x30
 800698e:	5518      	strb	r0, [r3, r4]
 8006990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006992:	3401      	adds	r4, #1
 8006994:	9006      	str	r0, [sp, #24]
 8006996:	42a3      	cmp	r3, r4
 8006998:	dd07      	ble.n	80069aa <_dtoa_r+0xbc2>
 800699a:	2300      	movs	r3, #0
 800699c:	220a      	movs	r2, #10
 800699e:	0038      	movs	r0, r7
 80069a0:	9904      	ldr	r1, [sp, #16]
 80069a2:	f000 f8c9 	bl	8006b38 <__multadd>
 80069a6:	9004      	str	r0, [sp, #16]
 80069a8:	e7eb      	b.n	8006982 <_dtoa_r+0xb9a>
 80069aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ac:	2001      	movs	r0, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dd00      	ble.n	80069b4 <_dtoa_r+0xbcc>
 80069b2:	0018      	movs	r0, r3
 80069b4:	2400      	movs	r4, #0
 80069b6:	9b05      	ldr	r3, [sp, #20]
 80069b8:	181b      	adds	r3, r3, r0
 80069ba:	9307      	str	r3, [sp, #28]
 80069bc:	9904      	ldr	r1, [sp, #16]
 80069be:	2201      	movs	r2, #1
 80069c0:	0038      	movs	r0, r7
 80069c2:	f000 fa67 	bl	8006e94 <__lshift>
 80069c6:	0031      	movs	r1, r6
 80069c8:	9004      	str	r0, [sp, #16]
 80069ca:	f000 fad3 	bl	8006f74 <__mcmp>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	dc97      	bgt.n	8006902 <_dtoa_r+0xb1a>
 80069d2:	d102      	bne.n	80069da <_dtoa_r+0xbf2>
 80069d4:	9b06      	ldr	r3, [sp, #24]
 80069d6:	07db      	lsls	r3, r3, #31
 80069d8:	d493      	bmi.n	8006902 <_dtoa_r+0xb1a>
 80069da:	9b07      	ldr	r3, [sp, #28]
 80069dc:	9307      	str	r3, [sp, #28]
 80069de:	3b01      	subs	r3, #1
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	2a30      	cmp	r2, #48	; 0x30
 80069e4:	d0fa      	beq.n	80069dc <_dtoa_r+0xbf4>
 80069e6:	e6e1      	b.n	80067ac <_dtoa_r+0x9c4>
 80069e8:	9a05      	ldr	r2, [sp, #20]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d18a      	bne.n	8006904 <_dtoa_r+0xb1c>
 80069ee:	9b02      	ldr	r3, [sp, #8]
 80069f0:	3301      	adds	r3, #1
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	2331      	movs	r3, #49	; 0x31
 80069f6:	e795      	b.n	8006924 <_dtoa_r+0xb3c>
 80069f8:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <_dtoa_r+0xc34>)
 80069fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <_dtoa_r+0xc38>)
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d001      	beq.n	8006a08 <_dtoa_r+0xc20>
 8006a04:	f7ff fa3b 	bl	8005e7e <_dtoa_r+0x96>
 8006a08:	f7ff fa3b 	bl	8005e82 <_dtoa_r+0x9a>
 8006a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dcb6      	bgt.n	8006980 <_dtoa_r+0xb98>
 8006a12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	dd00      	ble.n	8006a1a <_dtoa_r+0xc32>
 8006a18:	e6b2      	b.n	8006780 <_dtoa_r+0x998>
 8006a1a:	e7b1      	b.n	8006980 <_dtoa_r+0xb98>
 8006a1c:	08008440 	.word	0x08008440
 8006a20:	08008448 	.word	0x08008448

08006a24 <_localeconv_r>:
 8006a24:	4800      	ldr	r0, [pc, #0]	; (8006a28 <_localeconv_r+0x4>)
 8006a26:	4770      	bx	lr
 8006a28:	20000160 	.word	0x20000160

08006a2c <malloc>:
 8006a2c:	b510      	push	{r4, lr}
 8006a2e:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <malloc+0x10>)
 8006a30:	0001      	movs	r1, r0
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	f000 fc0e 	bl	8007254 <_malloc_r>
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	2000000c 	.word	0x2000000c

08006a40 <memchr>:
 8006a40:	b2c9      	uxtb	r1, r1
 8006a42:	1882      	adds	r2, r0, r2
 8006a44:	4290      	cmp	r0, r2
 8006a46:	d101      	bne.n	8006a4c <memchr+0xc>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	4770      	bx	lr
 8006a4c:	7803      	ldrb	r3, [r0, #0]
 8006a4e:	428b      	cmp	r3, r1
 8006a50:	d0fb      	beq.n	8006a4a <memchr+0xa>
 8006a52:	3001      	adds	r0, #1
 8006a54:	e7f6      	b.n	8006a44 <memchr+0x4>

08006a56 <memcpy>:
 8006a56:	2300      	movs	r3, #0
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d100      	bne.n	8006a60 <memcpy+0xa>
 8006a5e:	bd10      	pop	{r4, pc}
 8006a60:	5ccc      	ldrb	r4, [r1, r3]
 8006a62:	54c4      	strb	r4, [r0, r3]
 8006a64:	3301      	adds	r3, #1
 8006a66:	e7f8      	b.n	8006a5a <memcpy+0x4>

08006a68 <_Balloc>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a6c:	0006      	movs	r6, r0
 8006a6e:	000c      	movs	r4, r1
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	d10e      	bne.n	8006a92 <_Balloc+0x2a>
 8006a74:	2010      	movs	r0, #16
 8006a76:	f7ff ffd9 	bl	8006a2c <malloc>
 8006a7a:	1e02      	subs	r2, r0, #0
 8006a7c:	6270      	str	r0, [r6, #36]	; 0x24
 8006a7e:	d104      	bne.n	8006a8a <_Balloc+0x22>
 8006a80:	2166      	movs	r1, #102	; 0x66
 8006a82:	4b19      	ldr	r3, [pc, #100]	; (8006ae8 <_Balloc+0x80>)
 8006a84:	4819      	ldr	r0, [pc, #100]	; (8006aec <_Balloc+0x84>)
 8006a86:	f000 fdb7 	bl	80075f8 <__assert_func>
 8006a8a:	6045      	str	r5, [r0, #4]
 8006a8c:	6085      	str	r5, [r0, #8]
 8006a8e:	6005      	str	r5, [r0, #0]
 8006a90:	60c5      	str	r5, [r0, #12]
 8006a92:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006a94:	68eb      	ldr	r3, [r5, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d013      	beq.n	8006ac2 <_Balloc+0x5a>
 8006a9a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a9c:	00a2      	lsls	r2, r4, #2
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	189b      	adds	r3, r3, r2
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d118      	bne.n	8006ada <_Balloc+0x72>
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	000d      	movs	r5, r1
 8006aac:	40a5      	lsls	r5, r4
 8006aae:	1d6a      	adds	r2, r5, #5
 8006ab0:	0030      	movs	r0, r6
 8006ab2:	0092      	lsls	r2, r2, #2
 8006ab4:	f000 fb76 	bl	80071a4 <_calloc_r>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d00c      	beq.n	8006ad6 <_Balloc+0x6e>
 8006abc:	6044      	str	r4, [r0, #4]
 8006abe:	6085      	str	r5, [r0, #8]
 8006ac0:	e00d      	b.n	8006ade <_Balloc+0x76>
 8006ac2:	2221      	movs	r2, #33	; 0x21
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	0030      	movs	r0, r6
 8006ac8:	f000 fb6c 	bl	80071a4 <_calloc_r>
 8006acc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ace:	60e8      	str	r0, [r5, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e1      	bne.n	8006a9a <_Balloc+0x32>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	6802      	ldr	r2, [r0, #0]
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6103      	str	r3, [r0, #16]
 8006ae2:	60c3      	str	r3, [r0, #12]
 8006ae4:	e7f8      	b.n	8006ad8 <_Balloc+0x70>
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	0800844d 	.word	0x0800844d
 8006aec:	080084d4 	.word	0x080084d4

08006af0 <_Bfree>:
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006af4:	0005      	movs	r5, r0
 8006af6:	000c      	movs	r4, r1
 8006af8:	2e00      	cmp	r6, #0
 8006afa:	d10e      	bne.n	8006b1a <_Bfree+0x2a>
 8006afc:	2010      	movs	r0, #16
 8006afe:	f7ff ff95 	bl	8006a2c <malloc>
 8006b02:	1e02      	subs	r2, r0, #0
 8006b04:	6268      	str	r0, [r5, #36]	; 0x24
 8006b06:	d104      	bne.n	8006b12 <_Bfree+0x22>
 8006b08:	218a      	movs	r1, #138	; 0x8a
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <_Bfree+0x40>)
 8006b0c:	4809      	ldr	r0, [pc, #36]	; (8006b34 <_Bfree+0x44>)
 8006b0e:	f000 fd73 	bl	80075f8 <__assert_func>
 8006b12:	6046      	str	r6, [r0, #4]
 8006b14:	6086      	str	r6, [r0, #8]
 8006b16:	6006      	str	r6, [r0, #0]
 8006b18:	60c6      	str	r6, [r0, #12]
 8006b1a:	2c00      	cmp	r4, #0
 8006b1c:	d007      	beq.n	8006b2e <_Bfree+0x3e>
 8006b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b20:	6862      	ldr	r2, [r4, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	0092      	lsls	r2, r2, #2
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	6022      	str	r2, [r4, #0]
 8006b2c:	601c      	str	r4, [r3, #0]
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	0800844d 	.word	0x0800844d
 8006b34:	080084d4 	.word	0x080084d4

08006b38 <__multadd>:
 8006b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b3a:	000e      	movs	r6, r1
 8006b3c:	9001      	str	r0, [sp, #4]
 8006b3e:	000c      	movs	r4, r1
 8006b40:	001d      	movs	r5, r3
 8006b42:	2000      	movs	r0, #0
 8006b44:	690f      	ldr	r7, [r1, #16]
 8006b46:	3614      	adds	r6, #20
 8006b48:	6833      	ldr	r3, [r6, #0]
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	b299      	uxth	r1, r3
 8006b4e:	4351      	muls	r1, r2
 8006b50:	0c1b      	lsrs	r3, r3, #16
 8006b52:	4353      	muls	r3, r2
 8006b54:	1949      	adds	r1, r1, r5
 8006b56:	0c0d      	lsrs	r5, r1, #16
 8006b58:	195b      	adds	r3, r3, r5
 8006b5a:	0c1d      	lsrs	r5, r3, #16
 8006b5c:	b289      	uxth	r1, r1
 8006b5e:	041b      	lsls	r3, r3, #16
 8006b60:	185b      	adds	r3, r3, r1
 8006b62:	c608      	stmia	r6!, {r3}
 8006b64:	4287      	cmp	r7, r0
 8006b66:	dcef      	bgt.n	8006b48 <__multadd+0x10>
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	d022      	beq.n	8006bb2 <__multadd+0x7a>
 8006b6c:	68a3      	ldr	r3, [r4, #8]
 8006b6e:	42bb      	cmp	r3, r7
 8006b70:	dc19      	bgt.n	8006ba6 <__multadd+0x6e>
 8006b72:	6863      	ldr	r3, [r4, #4]
 8006b74:	9801      	ldr	r0, [sp, #4]
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	f7ff ff76 	bl	8006a68 <_Balloc>
 8006b7c:	1e06      	subs	r6, r0, #0
 8006b7e:	d105      	bne.n	8006b8c <__multadd+0x54>
 8006b80:	0002      	movs	r2, r0
 8006b82:	21b5      	movs	r1, #181	; 0xb5
 8006b84:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <__multadd+0x80>)
 8006b86:	480d      	ldr	r0, [pc, #52]	; (8006bbc <__multadd+0x84>)
 8006b88:	f000 fd36 	bl	80075f8 <__assert_func>
 8006b8c:	0021      	movs	r1, r4
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	310c      	adds	r1, #12
 8006b92:	1c9a      	adds	r2, r3, #2
 8006b94:	0092      	lsls	r2, r2, #2
 8006b96:	300c      	adds	r0, #12
 8006b98:	f7ff ff5d 	bl	8006a56 <memcpy>
 8006b9c:	0021      	movs	r1, r4
 8006b9e:	9801      	ldr	r0, [sp, #4]
 8006ba0:	f7ff ffa6 	bl	8006af0 <_Bfree>
 8006ba4:	0034      	movs	r4, r6
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	18e3      	adds	r3, r4, r3
 8006bac:	605d      	str	r5, [r3, #4]
 8006bae:	1c7b      	adds	r3, r7, #1
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	0020      	movs	r0, r4
 8006bb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	080084c3 	.word	0x080084c3
 8006bbc:	080084d4 	.word	0x080084d4

08006bc0 <__hi0bits>:
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	0c02      	lsrs	r2, r0, #16
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	4282      	cmp	r2, r0
 8006bc8:	d101      	bne.n	8006bce <__hi0bits+0xe>
 8006bca:	041b      	lsls	r3, r3, #16
 8006bcc:	3010      	adds	r0, #16
 8006bce:	0e1a      	lsrs	r2, r3, #24
 8006bd0:	d101      	bne.n	8006bd6 <__hi0bits+0x16>
 8006bd2:	3008      	adds	r0, #8
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	0f1a      	lsrs	r2, r3, #28
 8006bd8:	d101      	bne.n	8006bde <__hi0bits+0x1e>
 8006bda:	3004      	adds	r0, #4
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	0f9a      	lsrs	r2, r3, #30
 8006be0:	d101      	bne.n	8006be6 <__hi0bits+0x26>
 8006be2:	3002      	adds	r0, #2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	db03      	blt.n	8006bf2 <__hi0bits+0x32>
 8006bea:	3001      	adds	r0, #1
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	d400      	bmi.n	8006bf2 <__hi0bits+0x32>
 8006bf0:	2020      	movs	r0, #32
 8006bf2:	4770      	bx	lr

08006bf4 <__lo0bits>:
 8006bf4:	6803      	ldr	r3, [r0, #0]
 8006bf6:	0002      	movs	r2, r0
 8006bf8:	2107      	movs	r1, #7
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	4008      	ands	r0, r1
 8006bfe:	420b      	tst	r3, r1
 8006c00:	d00d      	beq.n	8006c1e <__lo0bits+0x2a>
 8006c02:	3906      	subs	r1, #6
 8006c04:	2000      	movs	r0, #0
 8006c06:	420b      	tst	r3, r1
 8006c08:	d105      	bne.n	8006c16 <__lo0bits+0x22>
 8006c0a:	3002      	adds	r0, #2
 8006c0c:	4203      	tst	r3, r0
 8006c0e:	d003      	beq.n	8006c18 <__lo0bits+0x24>
 8006c10:	40cb      	lsrs	r3, r1
 8006c12:	0008      	movs	r0, r1
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	4770      	bx	lr
 8006c18:	089b      	lsrs	r3, r3, #2
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	e7fb      	b.n	8006c16 <__lo0bits+0x22>
 8006c1e:	b299      	uxth	r1, r3
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d101      	bne.n	8006c28 <__lo0bits+0x34>
 8006c24:	2010      	movs	r0, #16
 8006c26:	0c1b      	lsrs	r3, r3, #16
 8006c28:	b2d9      	uxtb	r1, r3
 8006c2a:	2900      	cmp	r1, #0
 8006c2c:	d101      	bne.n	8006c32 <__lo0bits+0x3e>
 8006c2e:	3008      	adds	r0, #8
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	0719      	lsls	r1, r3, #28
 8006c34:	d101      	bne.n	8006c3a <__lo0bits+0x46>
 8006c36:	3004      	adds	r0, #4
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	0799      	lsls	r1, r3, #30
 8006c3c:	d101      	bne.n	8006c42 <__lo0bits+0x4e>
 8006c3e:	3002      	adds	r0, #2
 8006c40:	089b      	lsrs	r3, r3, #2
 8006c42:	07d9      	lsls	r1, r3, #31
 8006c44:	d4e9      	bmi.n	8006c1a <__lo0bits+0x26>
 8006c46:	3001      	adds	r0, #1
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	d1e6      	bne.n	8006c1a <__lo0bits+0x26>
 8006c4c:	2020      	movs	r0, #32
 8006c4e:	e7e2      	b.n	8006c16 <__lo0bits+0x22>

08006c50 <__i2b>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	000c      	movs	r4, r1
 8006c54:	2101      	movs	r1, #1
 8006c56:	f7ff ff07 	bl	8006a68 <_Balloc>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d106      	bne.n	8006c6c <__i2b+0x1c>
 8006c5e:	21a0      	movs	r1, #160	; 0xa0
 8006c60:	0002      	movs	r2, r0
 8006c62:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <__i2b+0x24>)
 8006c64:	4804      	ldr	r0, [pc, #16]	; (8006c78 <__i2b+0x28>)
 8006c66:	0049      	lsls	r1, r1, #1
 8006c68:	f000 fcc6 	bl	80075f8 <__assert_func>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	6144      	str	r4, [r0, #20]
 8006c70:	6103      	str	r3, [r0, #16]
 8006c72:	bd10      	pop	{r4, pc}
 8006c74:	080084c3 	.word	0x080084c3
 8006c78:	080084d4 	.word	0x080084d4

08006c7c <__multiply>:
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	690b      	ldr	r3, [r1, #16]
 8006c80:	0014      	movs	r4, r2
 8006c82:	6912      	ldr	r2, [r2, #16]
 8006c84:	000d      	movs	r5, r1
 8006c86:	b089      	sub	sp, #36	; 0x24
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	da01      	bge.n	8006c90 <__multiply+0x14>
 8006c8c:	0025      	movs	r5, r4
 8006c8e:	000c      	movs	r4, r1
 8006c90:	692f      	ldr	r7, [r5, #16]
 8006c92:	6926      	ldr	r6, [r4, #16]
 8006c94:	6869      	ldr	r1, [r5, #4]
 8006c96:	19bb      	adds	r3, r7, r6
 8006c98:	9302      	str	r3, [sp, #8]
 8006c9a:	68ab      	ldr	r3, [r5, #8]
 8006c9c:	19ba      	adds	r2, r7, r6
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	da00      	bge.n	8006ca4 <__multiply+0x28>
 8006ca2:	3101      	adds	r1, #1
 8006ca4:	f7ff fee0 	bl	8006a68 <_Balloc>
 8006ca8:	9001      	str	r0, [sp, #4]
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d106      	bne.n	8006cbc <__multiply+0x40>
 8006cae:	215e      	movs	r1, #94	; 0x5e
 8006cb0:	0002      	movs	r2, r0
 8006cb2:	4b48      	ldr	r3, [pc, #288]	; (8006dd4 <__multiply+0x158>)
 8006cb4:	4848      	ldr	r0, [pc, #288]	; (8006dd8 <__multiply+0x15c>)
 8006cb6:	31ff      	adds	r1, #255	; 0xff
 8006cb8:	f000 fc9e 	bl	80075f8 <__assert_func>
 8006cbc:	9b01      	ldr	r3, [sp, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	3314      	adds	r3, #20
 8006cc2:	469c      	mov	ip, r3
 8006cc4:	19bb      	adds	r3, r7, r6
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4463      	add	r3, ip
 8006cca:	9303      	str	r3, [sp, #12]
 8006ccc:	4663      	mov	r3, ip
 8006cce:	9903      	ldr	r1, [sp, #12]
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	d32c      	bcc.n	8006d2e <__multiply+0xb2>
 8006cd4:	002b      	movs	r3, r5
 8006cd6:	0022      	movs	r2, r4
 8006cd8:	3314      	adds	r3, #20
 8006cda:	00bf      	lsls	r7, r7, #2
 8006cdc:	3214      	adds	r2, #20
 8006cde:	9306      	str	r3, [sp, #24]
 8006ce0:	00b6      	lsls	r6, r6, #2
 8006ce2:	19db      	adds	r3, r3, r7
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	1993      	adds	r3, r2, r6
 8006ce8:	9307      	str	r3, [sp, #28]
 8006cea:	2304      	movs	r3, #4
 8006cec:	9305      	str	r3, [sp, #20]
 8006cee:	002b      	movs	r3, r5
 8006cf0:	9904      	ldr	r1, [sp, #16]
 8006cf2:	3315      	adds	r3, #21
 8006cf4:	9200      	str	r2, [sp, #0]
 8006cf6:	4299      	cmp	r1, r3
 8006cf8:	d305      	bcc.n	8006d06 <__multiply+0x8a>
 8006cfa:	1b4b      	subs	r3, r1, r5
 8006cfc:	3b15      	subs	r3, #21
 8006cfe:	089b      	lsrs	r3, r3, #2
 8006d00:	3301      	adds	r3, #1
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	9305      	str	r3, [sp, #20]
 8006d06:	9b07      	ldr	r3, [sp, #28]
 8006d08:	9a00      	ldr	r2, [sp, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d311      	bcc.n	8006d32 <__multiply+0xb6>
 8006d0e:	9b02      	ldr	r3, [sp, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	dd06      	ble.n	8006d22 <__multiply+0xa6>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	3b04      	subs	r3, #4
 8006d18:	9303      	str	r3, [sp, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d054      	beq.n	8006dcc <__multiply+0x150>
 8006d22:	9b01      	ldr	r3, [sp, #4]
 8006d24:	9a02      	ldr	r2, [sp, #8]
 8006d26:	0018      	movs	r0, r3
 8006d28:	611a      	str	r2, [r3, #16]
 8006d2a:	b009      	add	sp, #36	; 0x24
 8006d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2e:	c304      	stmia	r3!, {r2}
 8006d30:	e7cd      	b.n	8006cce <__multiply+0x52>
 8006d32:	9b00      	ldr	r3, [sp, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	b298      	uxth	r0, r3
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d01c      	beq.n	8006d76 <__multiply+0xfa>
 8006d3c:	4667      	mov	r7, ip
 8006d3e:	2400      	movs	r4, #0
 8006d40:	9e06      	ldr	r6, [sp, #24]
 8006d42:	ce02      	ldmia	r6!, {r1}
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	b28b      	uxth	r3, r1
 8006d48:	4343      	muls	r3, r0
 8006d4a:	0c09      	lsrs	r1, r1, #16
 8006d4c:	4341      	muls	r1, r0
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	189b      	adds	r3, r3, r2
 8006d52:	191b      	adds	r3, r3, r4
 8006d54:	000c      	movs	r4, r1
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	0c11      	lsrs	r1, r2, #16
 8006d5a:	1861      	adds	r1, r4, r1
 8006d5c:	0c1c      	lsrs	r4, r3, #16
 8006d5e:	1909      	adds	r1, r1, r4
 8006d60:	0c0c      	lsrs	r4, r1, #16
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	0409      	lsls	r1, r1, #16
 8006d66:	430b      	orrs	r3, r1
 8006d68:	c708      	stmia	r7!, {r3}
 8006d6a:	9b04      	ldr	r3, [sp, #16]
 8006d6c:	42b3      	cmp	r3, r6
 8006d6e:	d8e8      	bhi.n	8006d42 <__multiply+0xc6>
 8006d70:	4663      	mov	r3, ip
 8006d72:	9a05      	ldr	r2, [sp, #20]
 8006d74:	509c      	str	r4, [r3, r2]
 8006d76:	9b00      	ldr	r3, [sp, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	0c1e      	lsrs	r6, r3, #16
 8006d7c:	d020      	beq.n	8006dc0 <__multiply+0x144>
 8006d7e:	4663      	mov	r3, ip
 8006d80:	002c      	movs	r4, r5
 8006d82:	4660      	mov	r0, ip
 8006d84:	2700      	movs	r7, #0
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3414      	adds	r4, #20
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	b291      	uxth	r1, r2
 8006d90:	4371      	muls	r1, r6
 8006d92:	6802      	ldr	r2, [r0, #0]
 8006d94:	0c12      	lsrs	r2, r2, #16
 8006d96:	1889      	adds	r1, r1, r2
 8006d98:	19cf      	adds	r7, r1, r7
 8006d9a:	0439      	lsls	r1, r7, #16
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	6003      	str	r3, [r0, #0]
 8006da0:	cc02      	ldmia	r4!, {r1}
 8006da2:	6843      	ldr	r3, [r0, #4]
 8006da4:	0c09      	lsrs	r1, r1, #16
 8006da6:	4371      	muls	r1, r6
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	0c3f      	lsrs	r7, r7, #16
 8006dac:	18cb      	adds	r3, r1, r3
 8006dae:	9a04      	ldr	r2, [sp, #16]
 8006db0:	19db      	adds	r3, r3, r7
 8006db2:	0c1f      	lsrs	r7, r3, #16
 8006db4:	3004      	adds	r0, #4
 8006db6:	42a2      	cmp	r2, r4
 8006db8:	d8e7      	bhi.n	8006d8a <__multiply+0x10e>
 8006dba:	4662      	mov	r2, ip
 8006dbc:	9905      	ldr	r1, [sp, #20]
 8006dbe:	5053      	str	r3, [r2, r1]
 8006dc0:	9b00      	ldr	r3, [sp, #0]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	449c      	add	ip, r3
 8006dca:	e79c      	b.n	8006d06 <__multiply+0x8a>
 8006dcc:	9b02      	ldr	r3, [sp, #8]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	9302      	str	r3, [sp, #8]
 8006dd2:	e79c      	b.n	8006d0e <__multiply+0x92>
 8006dd4:	080084c3 	.word	0x080084c3
 8006dd8:	080084d4 	.word	0x080084d4

08006ddc <__pow5mult>:
 8006ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dde:	2303      	movs	r3, #3
 8006de0:	0015      	movs	r5, r2
 8006de2:	0007      	movs	r7, r0
 8006de4:	000e      	movs	r6, r1
 8006de6:	401a      	ands	r2, r3
 8006de8:	421d      	tst	r5, r3
 8006dea:	d008      	beq.n	8006dfe <__pow5mult+0x22>
 8006dec:	4925      	ldr	r1, [pc, #148]	; (8006e84 <__pow5mult+0xa8>)
 8006dee:	3a01      	subs	r2, #1
 8006df0:	0092      	lsls	r2, r2, #2
 8006df2:	5852      	ldr	r2, [r2, r1]
 8006df4:	2300      	movs	r3, #0
 8006df6:	0031      	movs	r1, r6
 8006df8:	f7ff fe9e 	bl	8006b38 <__multadd>
 8006dfc:	0006      	movs	r6, r0
 8006dfe:	10ad      	asrs	r5, r5, #2
 8006e00:	d03d      	beq.n	8006e7e <__pow5mult+0xa2>
 8006e02:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006e04:	2c00      	cmp	r4, #0
 8006e06:	d10f      	bne.n	8006e28 <__pow5mult+0x4c>
 8006e08:	2010      	movs	r0, #16
 8006e0a:	f7ff fe0f 	bl	8006a2c <malloc>
 8006e0e:	1e02      	subs	r2, r0, #0
 8006e10:	6278      	str	r0, [r7, #36]	; 0x24
 8006e12:	d105      	bne.n	8006e20 <__pow5mult+0x44>
 8006e14:	21d7      	movs	r1, #215	; 0xd7
 8006e16:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <__pow5mult+0xac>)
 8006e18:	481c      	ldr	r0, [pc, #112]	; (8006e8c <__pow5mult+0xb0>)
 8006e1a:	0049      	lsls	r1, r1, #1
 8006e1c:	f000 fbec 	bl	80075f8 <__assert_func>
 8006e20:	6044      	str	r4, [r0, #4]
 8006e22:	6084      	str	r4, [r0, #8]
 8006e24:	6004      	str	r4, [r0, #0]
 8006e26:	60c4      	str	r4, [r0, #12]
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	689c      	ldr	r4, [r3, #8]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	2c00      	cmp	r4, #0
 8006e30:	d108      	bne.n	8006e44 <__pow5mult+0x68>
 8006e32:	0038      	movs	r0, r7
 8006e34:	4916      	ldr	r1, [pc, #88]	; (8006e90 <__pow5mult+0xb4>)
 8006e36:	f7ff ff0b 	bl	8006c50 <__i2b>
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	0004      	movs	r4, r0
 8006e3e:	6098      	str	r0, [r3, #8]
 8006e40:	2300      	movs	r3, #0
 8006e42:	6003      	str	r3, [r0, #0]
 8006e44:	2301      	movs	r3, #1
 8006e46:	421d      	tst	r5, r3
 8006e48:	d00a      	beq.n	8006e60 <__pow5mult+0x84>
 8006e4a:	0031      	movs	r1, r6
 8006e4c:	0022      	movs	r2, r4
 8006e4e:	0038      	movs	r0, r7
 8006e50:	f7ff ff14 	bl	8006c7c <__multiply>
 8006e54:	0031      	movs	r1, r6
 8006e56:	9001      	str	r0, [sp, #4]
 8006e58:	0038      	movs	r0, r7
 8006e5a:	f7ff fe49 	bl	8006af0 <_Bfree>
 8006e5e:	9e01      	ldr	r6, [sp, #4]
 8006e60:	106d      	asrs	r5, r5, #1
 8006e62:	d00c      	beq.n	8006e7e <__pow5mult+0xa2>
 8006e64:	6820      	ldr	r0, [r4, #0]
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d107      	bne.n	8006e7a <__pow5mult+0x9e>
 8006e6a:	0022      	movs	r2, r4
 8006e6c:	0021      	movs	r1, r4
 8006e6e:	0038      	movs	r0, r7
 8006e70:	f7ff ff04 	bl	8006c7c <__multiply>
 8006e74:	2300      	movs	r3, #0
 8006e76:	6020      	str	r0, [r4, #0]
 8006e78:	6003      	str	r3, [r0, #0]
 8006e7a:	0004      	movs	r4, r0
 8006e7c:	e7e2      	b.n	8006e44 <__pow5mult+0x68>
 8006e7e:	0030      	movs	r0, r6
 8006e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	08008628 	.word	0x08008628
 8006e88:	0800844d 	.word	0x0800844d
 8006e8c:	080084d4 	.word	0x080084d4
 8006e90:	00000271 	.word	0x00000271

08006e94 <__lshift>:
 8006e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e96:	000c      	movs	r4, r1
 8006e98:	0017      	movs	r7, r2
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	1155      	asrs	r5, r2, #5
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	18eb      	adds	r3, r5, r3
 8006ea2:	9302      	str	r3, [sp, #8]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	6849      	ldr	r1, [r1, #4]
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	9004      	str	r0, [sp, #16]
 8006eae:	9a01      	ldr	r2, [sp, #4]
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	db11      	blt.n	8006ed8 <__lshift+0x44>
 8006eb4:	9804      	ldr	r0, [sp, #16]
 8006eb6:	f7ff fdd7 	bl	8006a68 <_Balloc>
 8006eba:	0002      	movs	r2, r0
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	3214      	adds	r2, #20
 8006ec0:	0006      	movs	r6, r0
 8006ec2:	0011      	movs	r1, r2
 8006ec4:	9203      	str	r2, [sp, #12]
 8006ec6:	4298      	cmp	r0, r3
 8006ec8:	d10d      	bne.n	8006ee6 <__lshift+0x52>
 8006eca:	21da      	movs	r1, #218	; 0xda
 8006ecc:	0002      	movs	r2, r0
 8006ece:	4b27      	ldr	r3, [pc, #156]	; (8006f6c <__lshift+0xd8>)
 8006ed0:	4827      	ldr	r0, [pc, #156]	; (8006f70 <__lshift+0xdc>)
 8006ed2:	31ff      	adds	r1, #255	; 0xff
 8006ed4:	f000 fb90 	bl	80075f8 <__assert_func>
 8006ed8:	3101      	adds	r1, #1
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	e7e7      	b.n	8006eae <__lshift+0x1a>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	0098      	lsls	r0, r3, #2
 8006ee2:	500a      	str	r2, [r1, r0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	42ab      	cmp	r3, r5
 8006ee8:	dbf9      	blt.n	8006ede <__lshift+0x4a>
 8006eea:	43eb      	mvns	r3, r5
 8006eec:	17db      	asrs	r3, r3, #31
 8006eee:	401d      	ands	r5, r3
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	00ad      	lsls	r5, r5, #2
 8006ef4:	211f      	movs	r1, #31
 8006ef6:	0038      	movs	r0, r7
 8006ef8:	195d      	adds	r5, r3, r5
 8006efa:	0023      	movs	r3, r4
 8006efc:	6922      	ldr	r2, [r4, #16]
 8006efe:	3314      	adds	r3, #20
 8006f00:	0092      	lsls	r2, r2, #2
 8006f02:	4008      	ands	r0, r1
 8006f04:	4684      	mov	ip, r0
 8006f06:	189a      	adds	r2, r3, r2
 8006f08:	420f      	tst	r7, r1
 8006f0a:	d02a      	beq.n	8006f62 <__lshift+0xce>
 8006f0c:	3101      	adds	r1, #1
 8006f0e:	1a09      	subs	r1, r1, r0
 8006f10:	9105      	str	r1, [sp, #20]
 8006f12:	2100      	movs	r1, #0
 8006f14:	9503      	str	r5, [sp, #12]
 8006f16:	4667      	mov	r7, ip
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	40b8      	lsls	r0, r7
 8006f1c:	4301      	orrs	r1, r0
 8006f1e:	9803      	ldr	r0, [sp, #12]
 8006f20:	c002      	stmia	r0!, {r1}
 8006f22:	cb02      	ldmia	r3!, {r1}
 8006f24:	9003      	str	r0, [sp, #12]
 8006f26:	9805      	ldr	r0, [sp, #20]
 8006f28:	40c1      	lsrs	r1, r0
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d8f3      	bhi.n	8006f16 <__lshift+0x82>
 8006f2e:	0020      	movs	r0, r4
 8006f30:	3015      	adds	r0, #21
 8006f32:	2304      	movs	r3, #4
 8006f34:	4282      	cmp	r2, r0
 8006f36:	d304      	bcc.n	8006f42 <__lshift+0xae>
 8006f38:	1b13      	subs	r3, r2, r4
 8006f3a:	3b15      	subs	r3, #21
 8006f3c:	089b      	lsrs	r3, r3, #2
 8006f3e:	3301      	adds	r3, #1
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	50e9      	str	r1, [r5, r3]
 8006f44:	2900      	cmp	r1, #0
 8006f46:	d002      	beq.n	8006f4e <__lshift+0xba>
 8006f48:	9b02      	ldr	r3, [sp, #8]
 8006f4a:	3302      	adds	r3, #2
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	9804      	ldr	r0, [sp, #16]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	0021      	movs	r1, r4
 8006f56:	6133      	str	r3, [r6, #16]
 8006f58:	f7ff fdca 	bl	8006af0 <_Bfree>
 8006f5c:	0030      	movs	r0, r6
 8006f5e:	b007      	add	sp, #28
 8006f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f62:	cb02      	ldmia	r3!, {r1}
 8006f64:	c502      	stmia	r5!, {r1}
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d8fb      	bhi.n	8006f62 <__lshift+0xce>
 8006f6a:	e7f0      	b.n	8006f4e <__lshift+0xba>
 8006f6c:	080084c3 	.word	0x080084c3
 8006f70:	080084d4 	.word	0x080084d4

08006f74 <__mcmp>:
 8006f74:	6902      	ldr	r2, [r0, #16]
 8006f76:	690b      	ldr	r3, [r1, #16]
 8006f78:	b530      	push	{r4, r5, lr}
 8006f7a:	0004      	movs	r4, r0
 8006f7c:	1ad0      	subs	r0, r2, r3
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d10d      	bne.n	8006f9e <__mcmp+0x2a>
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	3414      	adds	r4, #20
 8006f86:	3114      	adds	r1, #20
 8006f88:	18e2      	adds	r2, r4, r3
 8006f8a:	18c9      	adds	r1, r1, r3
 8006f8c:	3a04      	subs	r2, #4
 8006f8e:	3904      	subs	r1, #4
 8006f90:	6815      	ldr	r5, [r2, #0]
 8006f92:	680b      	ldr	r3, [r1, #0]
 8006f94:	429d      	cmp	r5, r3
 8006f96:	d003      	beq.n	8006fa0 <__mcmp+0x2c>
 8006f98:	2001      	movs	r0, #1
 8006f9a:	429d      	cmp	r5, r3
 8006f9c:	d303      	bcc.n	8006fa6 <__mcmp+0x32>
 8006f9e:	bd30      	pop	{r4, r5, pc}
 8006fa0:	4294      	cmp	r4, r2
 8006fa2:	d3f3      	bcc.n	8006f8c <__mcmp+0x18>
 8006fa4:	e7fb      	b.n	8006f9e <__mcmp+0x2a>
 8006fa6:	4240      	negs	r0, r0
 8006fa8:	e7f9      	b.n	8006f9e <__mcmp+0x2a>
	...

08006fac <__mdiff>:
 8006fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fae:	000e      	movs	r6, r1
 8006fb0:	0007      	movs	r7, r0
 8006fb2:	0011      	movs	r1, r2
 8006fb4:	0030      	movs	r0, r6
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	0014      	movs	r4, r2
 8006fba:	f7ff ffdb 	bl	8006f74 <__mcmp>
 8006fbe:	1e05      	subs	r5, r0, #0
 8006fc0:	d110      	bne.n	8006fe4 <__mdiff+0x38>
 8006fc2:	0001      	movs	r1, r0
 8006fc4:	0038      	movs	r0, r7
 8006fc6:	f7ff fd4f 	bl	8006a68 <_Balloc>
 8006fca:	1e02      	subs	r2, r0, #0
 8006fcc:	d104      	bne.n	8006fd8 <__mdiff+0x2c>
 8006fce:	4b40      	ldr	r3, [pc, #256]	; (80070d0 <__mdiff+0x124>)
 8006fd0:	4940      	ldr	r1, [pc, #256]	; (80070d4 <__mdiff+0x128>)
 8006fd2:	4841      	ldr	r0, [pc, #260]	; (80070d8 <__mdiff+0x12c>)
 8006fd4:	f000 fb10 	bl	80075f8 <__assert_func>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	6145      	str	r5, [r0, #20]
 8006fdc:	6103      	str	r3, [r0, #16]
 8006fde:	0010      	movs	r0, r2
 8006fe0:	b007      	add	sp, #28
 8006fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	db04      	blt.n	8006ff6 <__mdiff+0x4a>
 8006fec:	0023      	movs	r3, r4
 8006fee:	0034      	movs	r4, r6
 8006ff0:	001e      	movs	r6, r3
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	0038      	movs	r0, r7
 8006ff8:	6861      	ldr	r1, [r4, #4]
 8006ffa:	f7ff fd35 	bl	8006a68 <_Balloc>
 8006ffe:	1e02      	subs	r2, r0, #0
 8007000:	d103      	bne.n	800700a <__mdiff+0x5e>
 8007002:	2190      	movs	r1, #144	; 0x90
 8007004:	4b32      	ldr	r3, [pc, #200]	; (80070d0 <__mdiff+0x124>)
 8007006:	0089      	lsls	r1, r1, #2
 8007008:	e7e3      	b.n	8006fd2 <__mdiff+0x26>
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	2700      	movs	r7, #0
 800700e:	60c3      	str	r3, [r0, #12]
 8007010:	6920      	ldr	r0, [r4, #16]
 8007012:	3414      	adds	r4, #20
 8007014:	9401      	str	r4, [sp, #4]
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	0084      	lsls	r4, r0, #2
 800701a:	191b      	adds	r3, r3, r4
 800701c:	0034      	movs	r4, r6
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	6933      	ldr	r3, [r6, #16]
 8007022:	3414      	adds	r4, #20
 8007024:	0099      	lsls	r1, r3, #2
 8007026:	1863      	adds	r3, r4, r1
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	0013      	movs	r3, r2
 800702c:	3314      	adds	r3, #20
 800702e:	469c      	mov	ip, r3
 8007030:	9305      	str	r3, [sp, #20]
 8007032:	9b01      	ldr	r3, [sp, #4]
 8007034:	9304      	str	r3, [sp, #16]
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	cc02      	ldmia	r4!, {r1}
 800703a:	cb20      	ldmia	r3!, {r5}
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	b2ab      	uxth	r3, r5
 8007040:	19df      	adds	r7, r3, r7
 8007042:	b28b      	uxth	r3, r1
 8007044:	1afb      	subs	r3, r7, r3
 8007046:	0c2d      	lsrs	r5, r5, #16
 8007048:	0c09      	lsrs	r1, r1, #16
 800704a:	1a69      	subs	r1, r5, r1
 800704c:	141d      	asrs	r5, r3, #16
 800704e:	1949      	adds	r1, r1, r5
 8007050:	140f      	asrs	r7, r1, #16
 8007052:	b29b      	uxth	r3, r3
 8007054:	0409      	lsls	r1, r1, #16
 8007056:	430b      	orrs	r3, r1
 8007058:	4661      	mov	r1, ip
 800705a:	c108      	stmia	r1!, {r3}
 800705c:	9b03      	ldr	r3, [sp, #12]
 800705e:	468c      	mov	ip, r1
 8007060:	42a3      	cmp	r3, r4
 8007062:	d8e8      	bhi.n	8007036 <__mdiff+0x8a>
 8007064:	0031      	movs	r1, r6
 8007066:	9c03      	ldr	r4, [sp, #12]
 8007068:	3115      	adds	r1, #21
 800706a:	2304      	movs	r3, #4
 800706c:	428c      	cmp	r4, r1
 800706e:	d304      	bcc.n	800707a <__mdiff+0xce>
 8007070:	1ba3      	subs	r3, r4, r6
 8007072:	3b15      	subs	r3, #21
 8007074:	089b      	lsrs	r3, r3, #2
 8007076:	3301      	adds	r3, #1
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	9901      	ldr	r1, [sp, #4]
 800707c:	18cc      	adds	r4, r1, r3
 800707e:	9905      	ldr	r1, [sp, #20]
 8007080:	0026      	movs	r6, r4
 8007082:	18cb      	adds	r3, r1, r3
 8007084:	469c      	mov	ip, r3
 8007086:	9902      	ldr	r1, [sp, #8]
 8007088:	428e      	cmp	r6, r1
 800708a:	d310      	bcc.n	80070ae <__mdiff+0x102>
 800708c:	9e02      	ldr	r6, [sp, #8]
 800708e:	1ee5      	subs	r5, r4, #3
 8007090:	2100      	movs	r1, #0
 8007092:	42ae      	cmp	r6, r5
 8007094:	d304      	bcc.n	80070a0 <__mdiff+0xf4>
 8007096:	0031      	movs	r1, r6
 8007098:	3103      	adds	r1, #3
 800709a:	1b09      	subs	r1, r1, r4
 800709c:	0889      	lsrs	r1, r1, #2
 800709e:	0089      	lsls	r1, r1, #2
 80070a0:	185b      	adds	r3, r3, r1
 80070a2:	3b04      	subs	r3, #4
 80070a4:	6819      	ldr	r1, [r3, #0]
 80070a6:	2900      	cmp	r1, #0
 80070a8:	d00f      	beq.n	80070ca <__mdiff+0x11e>
 80070aa:	6110      	str	r0, [r2, #16]
 80070ac:	e797      	b.n	8006fde <__mdiff+0x32>
 80070ae:	ce02      	ldmia	r6!, {r1}
 80070b0:	b28d      	uxth	r5, r1
 80070b2:	19ed      	adds	r5, r5, r7
 80070b4:	0c0f      	lsrs	r7, r1, #16
 80070b6:	1429      	asrs	r1, r5, #16
 80070b8:	1879      	adds	r1, r7, r1
 80070ba:	140f      	asrs	r7, r1, #16
 80070bc:	b2ad      	uxth	r5, r5
 80070be:	0409      	lsls	r1, r1, #16
 80070c0:	430d      	orrs	r5, r1
 80070c2:	4661      	mov	r1, ip
 80070c4:	c120      	stmia	r1!, {r5}
 80070c6:	468c      	mov	ip, r1
 80070c8:	e7dd      	b.n	8007086 <__mdiff+0xda>
 80070ca:	3801      	subs	r0, #1
 80070cc:	e7e9      	b.n	80070a2 <__mdiff+0xf6>
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	080084c3 	.word	0x080084c3
 80070d4:	00000232 	.word	0x00000232
 80070d8:	080084d4 	.word	0x080084d4

080070dc <__d2b>:
 80070dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070de:	2101      	movs	r1, #1
 80070e0:	0014      	movs	r4, r2
 80070e2:	001e      	movs	r6, r3
 80070e4:	9f08      	ldr	r7, [sp, #32]
 80070e6:	f7ff fcbf 	bl	8006a68 <_Balloc>
 80070ea:	1e05      	subs	r5, r0, #0
 80070ec:	d105      	bne.n	80070fa <__d2b+0x1e>
 80070ee:	0002      	movs	r2, r0
 80070f0:	4b26      	ldr	r3, [pc, #152]	; (800718c <__d2b+0xb0>)
 80070f2:	4927      	ldr	r1, [pc, #156]	; (8007190 <__d2b+0xb4>)
 80070f4:	4827      	ldr	r0, [pc, #156]	; (8007194 <__d2b+0xb8>)
 80070f6:	f000 fa7f 	bl	80075f8 <__assert_func>
 80070fa:	0333      	lsls	r3, r6, #12
 80070fc:	0076      	lsls	r6, r6, #1
 80070fe:	0b1b      	lsrs	r3, r3, #12
 8007100:	0d76      	lsrs	r6, r6, #21
 8007102:	d124      	bne.n	800714e <__d2b+0x72>
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	2c00      	cmp	r4, #0
 8007108:	d027      	beq.n	800715a <__d2b+0x7e>
 800710a:	4668      	mov	r0, sp
 800710c:	9400      	str	r4, [sp, #0]
 800710e:	f7ff fd71 	bl	8006bf4 <__lo0bits>
 8007112:	9c00      	ldr	r4, [sp, #0]
 8007114:	2800      	cmp	r0, #0
 8007116:	d01e      	beq.n	8007156 <__d2b+0x7a>
 8007118:	9b01      	ldr	r3, [sp, #4]
 800711a:	2120      	movs	r1, #32
 800711c:	001a      	movs	r2, r3
 800711e:	1a09      	subs	r1, r1, r0
 8007120:	408a      	lsls	r2, r1
 8007122:	40c3      	lsrs	r3, r0
 8007124:	4322      	orrs	r2, r4
 8007126:	616a      	str	r2, [r5, #20]
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	9c01      	ldr	r4, [sp, #4]
 800712c:	61ac      	str	r4, [r5, #24]
 800712e:	1e63      	subs	r3, r4, #1
 8007130:	419c      	sbcs	r4, r3
 8007132:	3401      	adds	r4, #1
 8007134:	612c      	str	r4, [r5, #16]
 8007136:	2e00      	cmp	r6, #0
 8007138:	d018      	beq.n	800716c <__d2b+0x90>
 800713a:	4b17      	ldr	r3, [pc, #92]	; (8007198 <__d2b+0xbc>)
 800713c:	18f6      	adds	r6, r6, r3
 800713e:	2335      	movs	r3, #53	; 0x35
 8007140:	1836      	adds	r6, r6, r0
 8007142:	1a18      	subs	r0, r3, r0
 8007144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007146:	603e      	str	r6, [r7, #0]
 8007148:	6018      	str	r0, [r3, #0]
 800714a:	0028      	movs	r0, r5
 800714c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800714e:	2280      	movs	r2, #128	; 0x80
 8007150:	0352      	lsls	r2, r2, #13
 8007152:	4313      	orrs	r3, r2
 8007154:	e7d6      	b.n	8007104 <__d2b+0x28>
 8007156:	616c      	str	r4, [r5, #20]
 8007158:	e7e7      	b.n	800712a <__d2b+0x4e>
 800715a:	a801      	add	r0, sp, #4
 800715c:	f7ff fd4a 	bl	8006bf4 <__lo0bits>
 8007160:	2401      	movs	r4, #1
 8007162:	9b01      	ldr	r3, [sp, #4]
 8007164:	612c      	str	r4, [r5, #16]
 8007166:	616b      	str	r3, [r5, #20]
 8007168:	3020      	adds	r0, #32
 800716a:	e7e4      	b.n	8007136 <__d2b+0x5a>
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <__d2b+0xc0>)
 800716e:	18c0      	adds	r0, r0, r3
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <__d2b+0xc4>)
 8007172:	6038      	str	r0, [r7, #0]
 8007174:	18e3      	adds	r3, r4, r3
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	18eb      	adds	r3, r5, r3
 800717a:	6958      	ldr	r0, [r3, #20]
 800717c:	f7ff fd20 	bl	8006bc0 <__hi0bits>
 8007180:	0164      	lsls	r4, r4, #5
 8007182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007184:	1a24      	subs	r4, r4, r0
 8007186:	601c      	str	r4, [r3, #0]
 8007188:	e7df      	b.n	800714a <__d2b+0x6e>
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	080084c3 	.word	0x080084c3
 8007190:	0000030a 	.word	0x0000030a
 8007194:	080084d4 	.word	0x080084d4
 8007198:	fffffbcd 	.word	0xfffffbcd
 800719c:	fffffbce 	.word	0xfffffbce
 80071a0:	3fffffff 	.word	0x3fffffff

080071a4 <_calloc_r>:
 80071a4:	434a      	muls	r2, r1
 80071a6:	b570      	push	{r4, r5, r6, lr}
 80071a8:	0011      	movs	r1, r2
 80071aa:	0015      	movs	r5, r2
 80071ac:	f000 f852 	bl	8007254 <_malloc_r>
 80071b0:	1e04      	subs	r4, r0, #0
 80071b2:	d003      	beq.n	80071bc <_calloc_r+0x18>
 80071b4:	002a      	movs	r2, r5
 80071b6:	2100      	movs	r1, #0
 80071b8:	f7fe f8e8 	bl	800538c <memset>
 80071bc:	0020      	movs	r0, r4
 80071be:	bd70      	pop	{r4, r5, r6, pc}

080071c0 <_free_r>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	0005      	movs	r5, r0
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d010      	beq.n	80071ea <_free_r+0x2a>
 80071c8:	1f0c      	subs	r4, r1, #4
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	da00      	bge.n	80071d2 <_free_r+0x12>
 80071d0:	18e4      	adds	r4, r4, r3
 80071d2:	0028      	movs	r0, r5
 80071d4:	f000 fa64 	bl	80076a0 <__malloc_lock>
 80071d8:	4a1d      	ldr	r2, [pc, #116]	; (8007250 <_free_r+0x90>)
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <_free_r+0x2c>
 80071e0:	6063      	str	r3, [r4, #4]
 80071e2:	6014      	str	r4, [r2, #0]
 80071e4:	0028      	movs	r0, r5
 80071e6:	f000 fa63 	bl	80076b0 <__malloc_unlock>
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d908      	bls.n	8007202 <_free_r+0x42>
 80071f0:	6821      	ldr	r1, [r4, #0]
 80071f2:	1860      	adds	r0, r4, r1
 80071f4:	4283      	cmp	r3, r0
 80071f6:	d1f3      	bne.n	80071e0 <_free_r+0x20>
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	1841      	adds	r1, r0, r1
 80071fe:	6021      	str	r1, [r4, #0]
 8007200:	e7ee      	b.n	80071e0 <_free_r+0x20>
 8007202:	001a      	movs	r2, r3
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <_free_r+0x4e>
 800720a:	42a3      	cmp	r3, r4
 800720c:	d9f9      	bls.n	8007202 <_free_r+0x42>
 800720e:	6811      	ldr	r1, [r2, #0]
 8007210:	1850      	adds	r0, r2, r1
 8007212:	42a0      	cmp	r0, r4
 8007214:	d10b      	bne.n	800722e <_free_r+0x6e>
 8007216:	6820      	ldr	r0, [r4, #0]
 8007218:	1809      	adds	r1, r1, r0
 800721a:	1850      	adds	r0, r2, r1
 800721c:	6011      	str	r1, [r2, #0]
 800721e:	4283      	cmp	r3, r0
 8007220:	d1e0      	bne.n	80071e4 <_free_r+0x24>
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	1841      	adds	r1, r0, r1
 8007228:	6011      	str	r1, [r2, #0]
 800722a:	6053      	str	r3, [r2, #4]
 800722c:	e7da      	b.n	80071e4 <_free_r+0x24>
 800722e:	42a0      	cmp	r0, r4
 8007230:	d902      	bls.n	8007238 <_free_r+0x78>
 8007232:	230c      	movs	r3, #12
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	e7d5      	b.n	80071e4 <_free_r+0x24>
 8007238:	6821      	ldr	r1, [r4, #0]
 800723a:	1860      	adds	r0, r4, r1
 800723c:	4283      	cmp	r3, r0
 800723e:	d103      	bne.n	8007248 <_free_r+0x88>
 8007240:	6818      	ldr	r0, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	1841      	adds	r1, r0, r1
 8007246:	6021      	str	r1, [r4, #0]
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	6054      	str	r4, [r2, #4]
 800724c:	e7ca      	b.n	80071e4 <_free_r+0x24>
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	20000200 	.word	0x20000200

08007254 <_malloc_r>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	2303      	movs	r3, #3
 8007258:	1ccd      	adds	r5, r1, #3
 800725a:	439d      	bics	r5, r3
 800725c:	3508      	adds	r5, #8
 800725e:	0006      	movs	r6, r0
 8007260:	2d0c      	cmp	r5, #12
 8007262:	d21f      	bcs.n	80072a4 <_malloc_r+0x50>
 8007264:	250c      	movs	r5, #12
 8007266:	42a9      	cmp	r1, r5
 8007268:	d81e      	bhi.n	80072a8 <_malloc_r+0x54>
 800726a:	0030      	movs	r0, r6
 800726c:	f000 fa18 	bl	80076a0 <__malloc_lock>
 8007270:	4925      	ldr	r1, [pc, #148]	; (8007308 <_malloc_r+0xb4>)
 8007272:	680a      	ldr	r2, [r1, #0]
 8007274:	0014      	movs	r4, r2
 8007276:	2c00      	cmp	r4, #0
 8007278:	d11a      	bne.n	80072b0 <_malloc_r+0x5c>
 800727a:	4f24      	ldr	r7, [pc, #144]	; (800730c <_malloc_r+0xb8>)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d104      	bne.n	800728c <_malloc_r+0x38>
 8007282:	0021      	movs	r1, r4
 8007284:	0030      	movs	r0, r6
 8007286:	f000 f9a5 	bl	80075d4 <_sbrk_r>
 800728a:	6038      	str	r0, [r7, #0]
 800728c:	0029      	movs	r1, r5
 800728e:	0030      	movs	r0, r6
 8007290:	f000 f9a0 	bl	80075d4 <_sbrk_r>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d12b      	bne.n	80072f0 <_malloc_r+0x9c>
 8007298:	230c      	movs	r3, #12
 800729a:	0030      	movs	r0, r6
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	f000 fa07 	bl	80076b0 <__malloc_unlock>
 80072a2:	e003      	b.n	80072ac <_malloc_r+0x58>
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	dade      	bge.n	8007266 <_malloc_r+0x12>
 80072a8:	230c      	movs	r3, #12
 80072aa:	6033      	str	r3, [r6, #0]
 80072ac:	2000      	movs	r0, #0
 80072ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	1b5b      	subs	r3, r3, r5
 80072b4:	d419      	bmi.n	80072ea <_malloc_r+0x96>
 80072b6:	2b0b      	cmp	r3, #11
 80072b8:	d903      	bls.n	80072c2 <_malloc_r+0x6e>
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	18e4      	adds	r4, r4, r3
 80072be:	6025      	str	r5, [r4, #0]
 80072c0:	e003      	b.n	80072ca <_malloc_r+0x76>
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	42a2      	cmp	r2, r4
 80072c6:	d10e      	bne.n	80072e6 <_malloc_r+0x92>
 80072c8:	600b      	str	r3, [r1, #0]
 80072ca:	0030      	movs	r0, r6
 80072cc:	f000 f9f0 	bl	80076b0 <__malloc_unlock>
 80072d0:	0020      	movs	r0, r4
 80072d2:	2207      	movs	r2, #7
 80072d4:	300b      	adds	r0, #11
 80072d6:	1d23      	adds	r3, r4, #4
 80072d8:	4390      	bics	r0, r2
 80072da:	1ac2      	subs	r2, r0, r3
 80072dc:	4298      	cmp	r0, r3
 80072de:	d0e6      	beq.n	80072ae <_malloc_r+0x5a>
 80072e0:	1a1b      	subs	r3, r3, r0
 80072e2:	50a3      	str	r3, [r4, r2]
 80072e4:	e7e3      	b.n	80072ae <_malloc_r+0x5a>
 80072e6:	6053      	str	r3, [r2, #4]
 80072e8:	e7ef      	b.n	80072ca <_malloc_r+0x76>
 80072ea:	0022      	movs	r2, r4
 80072ec:	6864      	ldr	r4, [r4, #4]
 80072ee:	e7c2      	b.n	8007276 <_malloc_r+0x22>
 80072f0:	2303      	movs	r3, #3
 80072f2:	1cc4      	adds	r4, r0, #3
 80072f4:	439c      	bics	r4, r3
 80072f6:	42a0      	cmp	r0, r4
 80072f8:	d0e1      	beq.n	80072be <_malloc_r+0x6a>
 80072fa:	1a21      	subs	r1, r4, r0
 80072fc:	0030      	movs	r0, r6
 80072fe:	f000 f969 	bl	80075d4 <_sbrk_r>
 8007302:	1c43      	adds	r3, r0, #1
 8007304:	d1db      	bne.n	80072be <_malloc_r+0x6a>
 8007306:	e7c7      	b.n	8007298 <_malloc_r+0x44>
 8007308:	20000200 	.word	0x20000200
 800730c:	20000204 	.word	0x20000204

08007310 <__ssputs_r>:
 8007310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007312:	688e      	ldr	r6, [r1, #8]
 8007314:	b085      	sub	sp, #20
 8007316:	0007      	movs	r7, r0
 8007318:	000c      	movs	r4, r1
 800731a:	9203      	str	r2, [sp, #12]
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	429e      	cmp	r6, r3
 8007320:	d83c      	bhi.n	800739c <__ssputs_r+0x8c>
 8007322:	2390      	movs	r3, #144	; 0x90
 8007324:	898a      	ldrh	r2, [r1, #12]
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	421a      	tst	r2, r3
 800732a:	d034      	beq.n	8007396 <__ssputs_r+0x86>
 800732c:	2503      	movs	r5, #3
 800732e:	6909      	ldr	r1, [r1, #16]
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	1a5b      	subs	r3, r3, r1
 8007334:	9302      	str	r3, [sp, #8]
 8007336:	6963      	ldr	r3, [r4, #20]
 8007338:	9802      	ldr	r0, [sp, #8]
 800733a:	435d      	muls	r5, r3
 800733c:	0feb      	lsrs	r3, r5, #31
 800733e:	195d      	adds	r5, r3, r5
 8007340:	9b01      	ldr	r3, [sp, #4]
 8007342:	106d      	asrs	r5, r5, #1
 8007344:	3301      	adds	r3, #1
 8007346:	181b      	adds	r3, r3, r0
 8007348:	42ab      	cmp	r3, r5
 800734a:	d900      	bls.n	800734e <__ssputs_r+0x3e>
 800734c:	001d      	movs	r5, r3
 800734e:	0553      	lsls	r3, r2, #21
 8007350:	d532      	bpl.n	80073b8 <__ssputs_r+0xa8>
 8007352:	0029      	movs	r1, r5
 8007354:	0038      	movs	r0, r7
 8007356:	f7ff ff7d 	bl	8007254 <_malloc_r>
 800735a:	1e06      	subs	r6, r0, #0
 800735c:	d109      	bne.n	8007372 <__ssputs_r+0x62>
 800735e:	230c      	movs	r3, #12
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	2340      	movs	r3, #64	; 0x40
 8007364:	2001      	movs	r0, #1
 8007366:	89a2      	ldrh	r2, [r4, #12]
 8007368:	4240      	negs	r0, r0
 800736a:	4313      	orrs	r3, r2
 800736c:	81a3      	strh	r3, [r4, #12]
 800736e:	b005      	add	sp, #20
 8007370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007372:	9a02      	ldr	r2, [sp, #8]
 8007374:	6921      	ldr	r1, [r4, #16]
 8007376:	f7ff fb6e 	bl	8006a56 <memcpy>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	4a14      	ldr	r2, [pc, #80]	; (80073d0 <__ssputs_r+0xc0>)
 800737e:	401a      	ands	r2, r3
 8007380:	2380      	movs	r3, #128	; 0x80
 8007382:	4313      	orrs	r3, r2
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	9b02      	ldr	r3, [sp, #8]
 8007388:	6126      	str	r6, [r4, #16]
 800738a:	18f6      	adds	r6, r6, r3
 800738c:	6026      	str	r6, [r4, #0]
 800738e:	6165      	str	r5, [r4, #20]
 8007390:	9e01      	ldr	r6, [sp, #4]
 8007392:	1aed      	subs	r5, r5, r3
 8007394:	60a5      	str	r5, [r4, #8]
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	429e      	cmp	r6, r3
 800739a:	d900      	bls.n	800739e <__ssputs_r+0x8e>
 800739c:	9e01      	ldr	r6, [sp, #4]
 800739e:	0032      	movs	r2, r6
 80073a0:	9903      	ldr	r1, [sp, #12]
 80073a2:	6820      	ldr	r0, [r4, #0]
 80073a4:	f000 f968 	bl	8007678 <memmove>
 80073a8:	68a3      	ldr	r3, [r4, #8]
 80073aa:	2000      	movs	r0, #0
 80073ac:	1b9b      	subs	r3, r3, r6
 80073ae:	60a3      	str	r3, [r4, #8]
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	199e      	adds	r6, r3, r6
 80073b4:	6026      	str	r6, [r4, #0]
 80073b6:	e7da      	b.n	800736e <__ssputs_r+0x5e>
 80073b8:	002a      	movs	r2, r5
 80073ba:	0038      	movs	r0, r7
 80073bc:	f000 f980 	bl	80076c0 <_realloc_r>
 80073c0:	1e06      	subs	r6, r0, #0
 80073c2:	d1e0      	bne.n	8007386 <__ssputs_r+0x76>
 80073c4:	0038      	movs	r0, r7
 80073c6:	6921      	ldr	r1, [r4, #16]
 80073c8:	f7ff fefa 	bl	80071c0 <_free_r>
 80073cc:	e7c7      	b.n	800735e <__ssputs_r+0x4e>
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	fffffb7f 	.word	0xfffffb7f

080073d4 <_svfiprintf_r>:
 80073d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d6:	b0a1      	sub	sp, #132	; 0x84
 80073d8:	9003      	str	r0, [sp, #12]
 80073da:	001d      	movs	r5, r3
 80073dc:	898b      	ldrh	r3, [r1, #12]
 80073de:	000f      	movs	r7, r1
 80073e0:	0016      	movs	r6, r2
 80073e2:	061b      	lsls	r3, r3, #24
 80073e4:	d511      	bpl.n	800740a <_svfiprintf_r+0x36>
 80073e6:	690b      	ldr	r3, [r1, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10e      	bne.n	800740a <_svfiprintf_r+0x36>
 80073ec:	2140      	movs	r1, #64	; 0x40
 80073ee:	f7ff ff31 	bl	8007254 <_malloc_r>
 80073f2:	6038      	str	r0, [r7, #0]
 80073f4:	6138      	str	r0, [r7, #16]
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d105      	bne.n	8007406 <_svfiprintf_r+0x32>
 80073fa:	230c      	movs	r3, #12
 80073fc:	9a03      	ldr	r2, [sp, #12]
 80073fe:	3801      	subs	r0, #1
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	b021      	add	sp, #132	; 0x84
 8007404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007406:	2340      	movs	r3, #64	; 0x40
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	2300      	movs	r3, #0
 800740c:	ac08      	add	r4, sp, #32
 800740e:	6163      	str	r3, [r4, #20]
 8007410:	3320      	adds	r3, #32
 8007412:	7663      	strb	r3, [r4, #25]
 8007414:	3310      	adds	r3, #16
 8007416:	76a3      	strb	r3, [r4, #26]
 8007418:	9507      	str	r5, [sp, #28]
 800741a:	0035      	movs	r5, r6
 800741c:	782b      	ldrb	r3, [r5, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <_svfiprintf_r+0x52>
 8007422:	2b25      	cmp	r3, #37	; 0x25
 8007424:	d147      	bne.n	80074b6 <_svfiprintf_r+0xe2>
 8007426:	1bab      	subs	r3, r5, r6
 8007428:	9305      	str	r3, [sp, #20]
 800742a:	42b5      	cmp	r5, r6
 800742c:	d00c      	beq.n	8007448 <_svfiprintf_r+0x74>
 800742e:	0032      	movs	r2, r6
 8007430:	0039      	movs	r1, r7
 8007432:	9803      	ldr	r0, [sp, #12]
 8007434:	f7ff ff6c 	bl	8007310 <__ssputs_r>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d100      	bne.n	800743e <_svfiprintf_r+0x6a>
 800743c:	e0ae      	b.n	800759c <_svfiprintf_r+0x1c8>
 800743e:	6962      	ldr	r2, [r4, #20]
 8007440:	9b05      	ldr	r3, [sp, #20]
 8007442:	4694      	mov	ip, r2
 8007444:	4463      	add	r3, ip
 8007446:	6163      	str	r3, [r4, #20]
 8007448:	782b      	ldrb	r3, [r5, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d100      	bne.n	8007450 <_svfiprintf_r+0x7c>
 800744e:	e0a5      	b.n	800759c <_svfiprintf_r+0x1c8>
 8007450:	2201      	movs	r2, #1
 8007452:	2300      	movs	r3, #0
 8007454:	4252      	negs	r2, r2
 8007456:	6062      	str	r2, [r4, #4]
 8007458:	a904      	add	r1, sp, #16
 800745a:	3254      	adds	r2, #84	; 0x54
 800745c:	1852      	adds	r2, r2, r1
 800745e:	1c6e      	adds	r6, r5, #1
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	60e3      	str	r3, [r4, #12]
 8007464:	60a3      	str	r3, [r4, #8]
 8007466:	7013      	strb	r3, [r2, #0]
 8007468:	65a3      	str	r3, [r4, #88]	; 0x58
 800746a:	2205      	movs	r2, #5
 800746c:	7831      	ldrb	r1, [r6, #0]
 800746e:	4854      	ldr	r0, [pc, #336]	; (80075c0 <_svfiprintf_r+0x1ec>)
 8007470:	f7ff fae6 	bl	8006a40 <memchr>
 8007474:	1c75      	adds	r5, r6, #1
 8007476:	2800      	cmp	r0, #0
 8007478:	d11f      	bne.n	80074ba <_svfiprintf_r+0xe6>
 800747a:	6822      	ldr	r2, [r4, #0]
 800747c:	06d3      	lsls	r3, r2, #27
 800747e:	d504      	bpl.n	800748a <_svfiprintf_r+0xb6>
 8007480:	2353      	movs	r3, #83	; 0x53
 8007482:	a904      	add	r1, sp, #16
 8007484:	185b      	adds	r3, r3, r1
 8007486:	2120      	movs	r1, #32
 8007488:	7019      	strb	r1, [r3, #0]
 800748a:	0713      	lsls	r3, r2, #28
 800748c:	d504      	bpl.n	8007498 <_svfiprintf_r+0xc4>
 800748e:	2353      	movs	r3, #83	; 0x53
 8007490:	a904      	add	r1, sp, #16
 8007492:	185b      	adds	r3, r3, r1
 8007494:	212b      	movs	r1, #43	; 0x2b
 8007496:	7019      	strb	r1, [r3, #0]
 8007498:	7833      	ldrb	r3, [r6, #0]
 800749a:	2b2a      	cmp	r3, #42	; 0x2a
 800749c:	d016      	beq.n	80074cc <_svfiprintf_r+0xf8>
 800749e:	0035      	movs	r5, r6
 80074a0:	2100      	movs	r1, #0
 80074a2:	200a      	movs	r0, #10
 80074a4:	68e3      	ldr	r3, [r4, #12]
 80074a6:	782a      	ldrb	r2, [r5, #0]
 80074a8:	1c6e      	adds	r6, r5, #1
 80074aa:	3a30      	subs	r2, #48	; 0x30
 80074ac:	2a09      	cmp	r2, #9
 80074ae:	d94e      	bls.n	800754e <_svfiprintf_r+0x17a>
 80074b0:	2900      	cmp	r1, #0
 80074b2:	d111      	bne.n	80074d8 <_svfiprintf_r+0x104>
 80074b4:	e017      	b.n	80074e6 <_svfiprintf_r+0x112>
 80074b6:	3501      	adds	r5, #1
 80074b8:	e7b0      	b.n	800741c <_svfiprintf_r+0x48>
 80074ba:	4b41      	ldr	r3, [pc, #260]	; (80075c0 <_svfiprintf_r+0x1ec>)
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	1ac0      	subs	r0, r0, r3
 80074c0:	2301      	movs	r3, #1
 80074c2:	4083      	lsls	r3, r0
 80074c4:	4313      	orrs	r3, r2
 80074c6:	002e      	movs	r6, r5
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	e7ce      	b.n	800746a <_svfiprintf_r+0x96>
 80074cc:	9b07      	ldr	r3, [sp, #28]
 80074ce:	1d19      	adds	r1, r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	9107      	str	r1, [sp, #28]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	db01      	blt.n	80074dc <_svfiprintf_r+0x108>
 80074d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074da:	e004      	b.n	80074e6 <_svfiprintf_r+0x112>
 80074dc:	425b      	negs	r3, r3
 80074de:	60e3      	str	r3, [r4, #12]
 80074e0:	2302      	movs	r3, #2
 80074e2:	4313      	orrs	r3, r2
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	782b      	ldrb	r3, [r5, #0]
 80074e8:	2b2e      	cmp	r3, #46	; 0x2e
 80074ea:	d10a      	bne.n	8007502 <_svfiprintf_r+0x12e>
 80074ec:	786b      	ldrb	r3, [r5, #1]
 80074ee:	2b2a      	cmp	r3, #42	; 0x2a
 80074f0:	d135      	bne.n	800755e <_svfiprintf_r+0x18a>
 80074f2:	9b07      	ldr	r3, [sp, #28]
 80074f4:	3502      	adds	r5, #2
 80074f6:	1d1a      	adds	r2, r3, #4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	9207      	str	r2, [sp, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	db2b      	blt.n	8007558 <_svfiprintf_r+0x184>
 8007500:	9309      	str	r3, [sp, #36]	; 0x24
 8007502:	4e30      	ldr	r6, [pc, #192]	; (80075c4 <_svfiprintf_r+0x1f0>)
 8007504:	2203      	movs	r2, #3
 8007506:	0030      	movs	r0, r6
 8007508:	7829      	ldrb	r1, [r5, #0]
 800750a:	f7ff fa99 	bl	8006a40 <memchr>
 800750e:	2800      	cmp	r0, #0
 8007510:	d006      	beq.n	8007520 <_svfiprintf_r+0x14c>
 8007512:	2340      	movs	r3, #64	; 0x40
 8007514:	1b80      	subs	r0, r0, r6
 8007516:	4083      	lsls	r3, r0
 8007518:	6822      	ldr	r2, [r4, #0]
 800751a:	3501      	adds	r5, #1
 800751c:	4313      	orrs	r3, r2
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	7829      	ldrb	r1, [r5, #0]
 8007522:	2206      	movs	r2, #6
 8007524:	4828      	ldr	r0, [pc, #160]	; (80075c8 <_svfiprintf_r+0x1f4>)
 8007526:	1c6e      	adds	r6, r5, #1
 8007528:	7621      	strb	r1, [r4, #24]
 800752a:	f7ff fa89 	bl	8006a40 <memchr>
 800752e:	2800      	cmp	r0, #0
 8007530:	d03c      	beq.n	80075ac <_svfiprintf_r+0x1d8>
 8007532:	4b26      	ldr	r3, [pc, #152]	; (80075cc <_svfiprintf_r+0x1f8>)
 8007534:	2b00      	cmp	r3, #0
 8007536:	d125      	bne.n	8007584 <_svfiprintf_r+0x1b0>
 8007538:	2207      	movs	r2, #7
 800753a:	9b07      	ldr	r3, [sp, #28]
 800753c:	3307      	adds	r3, #7
 800753e:	4393      	bics	r3, r2
 8007540:	3308      	adds	r3, #8
 8007542:	9307      	str	r3, [sp, #28]
 8007544:	6963      	ldr	r3, [r4, #20]
 8007546:	9a04      	ldr	r2, [sp, #16]
 8007548:	189b      	adds	r3, r3, r2
 800754a:	6163      	str	r3, [r4, #20]
 800754c:	e765      	b.n	800741a <_svfiprintf_r+0x46>
 800754e:	4343      	muls	r3, r0
 8007550:	0035      	movs	r5, r6
 8007552:	2101      	movs	r1, #1
 8007554:	189b      	adds	r3, r3, r2
 8007556:	e7a6      	b.n	80074a6 <_svfiprintf_r+0xd2>
 8007558:	2301      	movs	r3, #1
 800755a:	425b      	negs	r3, r3
 800755c:	e7d0      	b.n	8007500 <_svfiprintf_r+0x12c>
 800755e:	2300      	movs	r3, #0
 8007560:	200a      	movs	r0, #10
 8007562:	001a      	movs	r2, r3
 8007564:	3501      	adds	r5, #1
 8007566:	6063      	str	r3, [r4, #4]
 8007568:	7829      	ldrb	r1, [r5, #0]
 800756a:	1c6e      	adds	r6, r5, #1
 800756c:	3930      	subs	r1, #48	; 0x30
 800756e:	2909      	cmp	r1, #9
 8007570:	d903      	bls.n	800757a <_svfiprintf_r+0x1a6>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0c5      	beq.n	8007502 <_svfiprintf_r+0x12e>
 8007576:	9209      	str	r2, [sp, #36]	; 0x24
 8007578:	e7c3      	b.n	8007502 <_svfiprintf_r+0x12e>
 800757a:	4342      	muls	r2, r0
 800757c:	0035      	movs	r5, r6
 800757e:	2301      	movs	r3, #1
 8007580:	1852      	adds	r2, r2, r1
 8007582:	e7f1      	b.n	8007568 <_svfiprintf_r+0x194>
 8007584:	ab07      	add	r3, sp, #28
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	003a      	movs	r2, r7
 800758a:	0021      	movs	r1, r4
 800758c:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <_svfiprintf_r+0x1fc>)
 800758e:	9803      	ldr	r0, [sp, #12]
 8007590:	f7fd ffae 	bl	80054f0 <_printf_float>
 8007594:	9004      	str	r0, [sp, #16]
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	3301      	adds	r3, #1
 800759a:	d1d3      	bne.n	8007544 <_svfiprintf_r+0x170>
 800759c:	89bb      	ldrh	r3, [r7, #12]
 800759e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80075a0:	065b      	lsls	r3, r3, #25
 80075a2:	d400      	bmi.n	80075a6 <_svfiprintf_r+0x1d2>
 80075a4:	e72d      	b.n	8007402 <_svfiprintf_r+0x2e>
 80075a6:	2001      	movs	r0, #1
 80075a8:	4240      	negs	r0, r0
 80075aa:	e72a      	b.n	8007402 <_svfiprintf_r+0x2e>
 80075ac:	ab07      	add	r3, sp, #28
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	003a      	movs	r2, r7
 80075b2:	0021      	movs	r1, r4
 80075b4:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <_svfiprintf_r+0x1fc>)
 80075b6:	9803      	ldr	r0, [sp, #12]
 80075b8:	f7fe fa58 	bl	8005a6c <_printf_i>
 80075bc:	e7ea      	b.n	8007594 <_svfiprintf_r+0x1c0>
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	08008634 	.word	0x08008634
 80075c4:	0800863a 	.word	0x0800863a
 80075c8:	0800863e 	.word	0x0800863e
 80075cc:	080054f1 	.word	0x080054f1
 80075d0:	08007311 	.word	0x08007311

080075d4 <_sbrk_r>:
 80075d4:	2300      	movs	r3, #0
 80075d6:	b570      	push	{r4, r5, r6, lr}
 80075d8:	4d06      	ldr	r5, [pc, #24]	; (80075f4 <_sbrk_r+0x20>)
 80075da:	0004      	movs	r4, r0
 80075dc:	0008      	movs	r0, r1
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	f7fb fc4a 	bl	8002e78 <_sbrk>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d103      	bne.n	80075f0 <_sbrk_r+0x1c>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d000      	beq.n	80075f0 <_sbrk_r+0x1c>
 80075ee:	6023      	str	r3, [r4, #0]
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	20000348 	.word	0x20000348

080075f8 <__assert_func>:
 80075f8:	b530      	push	{r4, r5, lr}
 80075fa:	0014      	movs	r4, r2
 80075fc:	001a      	movs	r2, r3
 80075fe:	4b09      	ldr	r3, [pc, #36]	; (8007624 <__assert_func+0x2c>)
 8007600:	0005      	movs	r5, r0
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	b085      	sub	sp, #20
 8007606:	68d8      	ldr	r0, [r3, #12]
 8007608:	4b07      	ldr	r3, [pc, #28]	; (8007628 <__assert_func+0x30>)
 800760a:	2c00      	cmp	r4, #0
 800760c:	d101      	bne.n	8007612 <__assert_func+0x1a>
 800760e:	4b07      	ldr	r3, [pc, #28]	; (800762c <__assert_func+0x34>)
 8007610:	001c      	movs	r4, r3
 8007612:	9301      	str	r3, [sp, #4]
 8007614:	9100      	str	r1, [sp, #0]
 8007616:	002b      	movs	r3, r5
 8007618:	4905      	ldr	r1, [pc, #20]	; (8007630 <__assert_func+0x38>)
 800761a:	9402      	str	r4, [sp, #8]
 800761c:	f000 f80a 	bl	8007634 <fiprintf>
 8007620:	f000 fab2 	bl	8007b88 <abort>
 8007624:	2000000c 	.word	0x2000000c
 8007628:	08008645 	.word	0x08008645
 800762c:	08008680 	.word	0x08008680
 8007630:	08008652 	.word	0x08008652

08007634 <fiprintf>:
 8007634:	b40e      	push	{r1, r2, r3}
 8007636:	b503      	push	{r0, r1, lr}
 8007638:	0001      	movs	r1, r0
 800763a:	ab03      	add	r3, sp, #12
 800763c:	4804      	ldr	r0, [pc, #16]	; (8007650 <fiprintf+0x1c>)
 800763e:	cb04      	ldmia	r3!, {r2}
 8007640:	6800      	ldr	r0, [r0, #0]
 8007642:	9301      	str	r3, [sp, #4]
 8007644:	f000 f88a 	bl	800775c <_vfiprintf_r>
 8007648:	b002      	add	sp, #8
 800764a:	bc08      	pop	{r3}
 800764c:	b003      	add	sp, #12
 800764e:	4718      	bx	r3
 8007650:	2000000c 	.word	0x2000000c

08007654 <__ascii_mbtowc>:
 8007654:	b082      	sub	sp, #8
 8007656:	2900      	cmp	r1, #0
 8007658:	d100      	bne.n	800765c <__ascii_mbtowc+0x8>
 800765a:	a901      	add	r1, sp, #4
 800765c:	1e10      	subs	r0, r2, #0
 800765e:	d006      	beq.n	800766e <__ascii_mbtowc+0x1a>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d006      	beq.n	8007672 <__ascii_mbtowc+0x1e>
 8007664:	7813      	ldrb	r3, [r2, #0]
 8007666:	600b      	str	r3, [r1, #0]
 8007668:	7810      	ldrb	r0, [r2, #0]
 800766a:	1e43      	subs	r3, r0, #1
 800766c:	4198      	sbcs	r0, r3
 800766e:	b002      	add	sp, #8
 8007670:	4770      	bx	lr
 8007672:	2002      	movs	r0, #2
 8007674:	4240      	negs	r0, r0
 8007676:	e7fa      	b.n	800766e <__ascii_mbtowc+0x1a>

08007678 <memmove>:
 8007678:	b510      	push	{r4, lr}
 800767a:	4288      	cmp	r0, r1
 800767c:	d902      	bls.n	8007684 <memmove+0xc>
 800767e:	188b      	adds	r3, r1, r2
 8007680:	4298      	cmp	r0, r3
 8007682:	d303      	bcc.n	800768c <memmove+0x14>
 8007684:	2300      	movs	r3, #0
 8007686:	e007      	b.n	8007698 <memmove+0x20>
 8007688:	5c8b      	ldrb	r3, [r1, r2]
 800768a:	5483      	strb	r3, [r0, r2]
 800768c:	3a01      	subs	r2, #1
 800768e:	d2fb      	bcs.n	8007688 <memmove+0x10>
 8007690:	bd10      	pop	{r4, pc}
 8007692:	5ccc      	ldrb	r4, [r1, r3]
 8007694:	54c4      	strb	r4, [r0, r3]
 8007696:	3301      	adds	r3, #1
 8007698:	429a      	cmp	r2, r3
 800769a:	d1fa      	bne.n	8007692 <memmove+0x1a>
 800769c:	e7f8      	b.n	8007690 <memmove+0x18>
	...

080076a0 <__malloc_lock>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	4802      	ldr	r0, [pc, #8]	; (80076ac <__malloc_lock+0xc>)
 80076a4:	f000 fc47 	bl	8007f36 <__retarget_lock_acquire_recursive>
 80076a8:	bd10      	pop	{r4, pc}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	20000350 	.word	0x20000350

080076b0 <__malloc_unlock>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	4802      	ldr	r0, [pc, #8]	; (80076bc <__malloc_unlock+0xc>)
 80076b4:	f000 fc40 	bl	8007f38 <__retarget_lock_release_recursive>
 80076b8:	bd10      	pop	{r4, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	20000350 	.word	0x20000350

080076c0 <_realloc_r>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	0007      	movs	r7, r0
 80076c4:	000d      	movs	r5, r1
 80076c6:	0016      	movs	r6, r2
 80076c8:	2900      	cmp	r1, #0
 80076ca:	d105      	bne.n	80076d8 <_realloc_r+0x18>
 80076cc:	0011      	movs	r1, r2
 80076ce:	f7ff fdc1 	bl	8007254 <_malloc_r>
 80076d2:	0004      	movs	r4, r0
 80076d4:	0020      	movs	r0, r4
 80076d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d8:	2a00      	cmp	r2, #0
 80076da:	d103      	bne.n	80076e4 <_realloc_r+0x24>
 80076dc:	f7ff fd70 	bl	80071c0 <_free_r>
 80076e0:	0034      	movs	r4, r6
 80076e2:	e7f7      	b.n	80076d4 <_realloc_r+0x14>
 80076e4:	f000 fc96 	bl	8008014 <_malloc_usable_size_r>
 80076e8:	002c      	movs	r4, r5
 80076ea:	42b0      	cmp	r0, r6
 80076ec:	d2f2      	bcs.n	80076d4 <_realloc_r+0x14>
 80076ee:	0031      	movs	r1, r6
 80076f0:	0038      	movs	r0, r7
 80076f2:	f7ff fdaf 	bl	8007254 <_malloc_r>
 80076f6:	1e04      	subs	r4, r0, #0
 80076f8:	d0ec      	beq.n	80076d4 <_realloc_r+0x14>
 80076fa:	0029      	movs	r1, r5
 80076fc:	0032      	movs	r2, r6
 80076fe:	f7ff f9aa 	bl	8006a56 <memcpy>
 8007702:	0029      	movs	r1, r5
 8007704:	0038      	movs	r0, r7
 8007706:	f7ff fd5b 	bl	80071c0 <_free_r>
 800770a:	e7e3      	b.n	80076d4 <_realloc_r+0x14>

0800770c <__sfputc_r>:
 800770c:	6893      	ldr	r3, [r2, #8]
 800770e:	b510      	push	{r4, lr}
 8007710:	3b01      	subs	r3, #1
 8007712:	6093      	str	r3, [r2, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	da04      	bge.n	8007722 <__sfputc_r+0x16>
 8007718:	6994      	ldr	r4, [r2, #24]
 800771a:	42a3      	cmp	r3, r4
 800771c:	db07      	blt.n	800772e <__sfputc_r+0x22>
 800771e:	290a      	cmp	r1, #10
 8007720:	d005      	beq.n	800772e <__sfputc_r+0x22>
 8007722:	6813      	ldr	r3, [r2, #0]
 8007724:	1c58      	adds	r0, r3, #1
 8007726:	6010      	str	r0, [r2, #0]
 8007728:	7019      	strb	r1, [r3, #0]
 800772a:	0008      	movs	r0, r1
 800772c:	bd10      	pop	{r4, pc}
 800772e:	f000 f94f 	bl	80079d0 <__swbuf_r>
 8007732:	0001      	movs	r1, r0
 8007734:	e7f9      	b.n	800772a <__sfputc_r+0x1e>

08007736 <__sfputs_r>:
 8007736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007738:	0006      	movs	r6, r0
 800773a:	000f      	movs	r7, r1
 800773c:	0014      	movs	r4, r2
 800773e:	18d5      	adds	r5, r2, r3
 8007740:	42ac      	cmp	r4, r5
 8007742:	d101      	bne.n	8007748 <__sfputs_r+0x12>
 8007744:	2000      	movs	r0, #0
 8007746:	e007      	b.n	8007758 <__sfputs_r+0x22>
 8007748:	7821      	ldrb	r1, [r4, #0]
 800774a:	003a      	movs	r2, r7
 800774c:	0030      	movs	r0, r6
 800774e:	f7ff ffdd 	bl	800770c <__sfputc_r>
 8007752:	3401      	adds	r4, #1
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d1f3      	bne.n	8007740 <__sfputs_r+0xa>
 8007758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800775c <_vfiprintf_r>:
 800775c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775e:	b0a1      	sub	sp, #132	; 0x84
 8007760:	0006      	movs	r6, r0
 8007762:	000c      	movs	r4, r1
 8007764:	001f      	movs	r7, r3
 8007766:	9203      	str	r2, [sp, #12]
 8007768:	2800      	cmp	r0, #0
 800776a:	d004      	beq.n	8007776 <_vfiprintf_r+0x1a>
 800776c:	6983      	ldr	r3, [r0, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <_vfiprintf_r+0x1a>
 8007772:	f000 fb3f 	bl	8007df4 <__sinit>
 8007776:	4b8e      	ldr	r3, [pc, #568]	; (80079b0 <_vfiprintf_r+0x254>)
 8007778:	429c      	cmp	r4, r3
 800777a:	d11c      	bne.n	80077b6 <_vfiprintf_r+0x5a>
 800777c:	6874      	ldr	r4, [r6, #4]
 800777e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007780:	07db      	lsls	r3, r3, #31
 8007782:	d405      	bmi.n	8007790 <_vfiprintf_r+0x34>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	059b      	lsls	r3, r3, #22
 8007788:	d402      	bmi.n	8007790 <_vfiprintf_r+0x34>
 800778a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800778c:	f000 fbd3 	bl	8007f36 <__retarget_lock_acquire_recursive>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	071b      	lsls	r3, r3, #28
 8007794:	d502      	bpl.n	800779c <_vfiprintf_r+0x40>
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11d      	bne.n	80077d8 <_vfiprintf_r+0x7c>
 800779c:	0021      	movs	r1, r4
 800779e:	0030      	movs	r0, r6
 80077a0:	f000 f97a 	bl	8007a98 <__swsetup_r>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d017      	beq.n	80077d8 <_vfiprintf_r+0x7c>
 80077a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077aa:	07db      	lsls	r3, r3, #31
 80077ac:	d50d      	bpl.n	80077ca <_vfiprintf_r+0x6e>
 80077ae:	2001      	movs	r0, #1
 80077b0:	4240      	negs	r0, r0
 80077b2:	b021      	add	sp, #132	; 0x84
 80077b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b6:	4b7f      	ldr	r3, [pc, #508]	; (80079b4 <_vfiprintf_r+0x258>)
 80077b8:	429c      	cmp	r4, r3
 80077ba:	d101      	bne.n	80077c0 <_vfiprintf_r+0x64>
 80077bc:	68b4      	ldr	r4, [r6, #8]
 80077be:	e7de      	b.n	800777e <_vfiprintf_r+0x22>
 80077c0:	4b7d      	ldr	r3, [pc, #500]	; (80079b8 <_vfiprintf_r+0x25c>)
 80077c2:	429c      	cmp	r4, r3
 80077c4:	d1db      	bne.n	800777e <_vfiprintf_r+0x22>
 80077c6:	68f4      	ldr	r4, [r6, #12]
 80077c8:	e7d9      	b.n	800777e <_vfiprintf_r+0x22>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	059b      	lsls	r3, r3, #22
 80077ce:	d4ee      	bmi.n	80077ae <_vfiprintf_r+0x52>
 80077d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077d2:	f000 fbb1 	bl	8007f38 <__retarget_lock_release_recursive>
 80077d6:	e7ea      	b.n	80077ae <_vfiprintf_r+0x52>
 80077d8:	2300      	movs	r3, #0
 80077da:	ad08      	add	r5, sp, #32
 80077dc:	616b      	str	r3, [r5, #20]
 80077de:	3320      	adds	r3, #32
 80077e0:	766b      	strb	r3, [r5, #25]
 80077e2:	3310      	adds	r3, #16
 80077e4:	76ab      	strb	r3, [r5, #26]
 80077e6:	9707      	str	r7, [sp, #28]
 80077e8:	9f03      	ldr	r7, [sp, #12]
 80077ea:	783b      	ldrb	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <_vfiprintf_r+0x98>
 80077f0:	2b25      	cmp	r3, #37	; 0x25
 80077f2:	d14e      	bne.n	8007892 <_vfiprintf_r+0x136>
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	1afb      	subs	r3, r7, r3
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	9b03      	ldr	r3, [sp, #12]
 80077fc:	429f      	cmp	r7, r3
 80077fe:	d00d      	beq.n	800781c <_vfiprintf_r+0xc0>
 8007800:	9b05      	ldr	r3, [sp, #20]
 8007802:	0021      	movs	r1, r4
 8007804:	0030      	movs	r0, r6
 8007806:	9a03      	ldr	r2, [sp, #12]
 8007808:	f7ff ff95 	bl	8007736 <__sfputs_r>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d100      	bne.n	8007812 <_vfiprintf_r+0xb6>
 8007810:	e0b5      	b.n	800797e <_vfiprintf_r+0x222>
 8007812:	696a      	ldr	r2, [r5, #20]
 8007814:	9b05      	ldr	r3, [sp, #20]
 8007816:	4694      	mov	ip, r2
 8007818:	4463      	add	r3, ip
 800781a:	616b      	str	r3, [r5, #20]
 800781c:	783b      	ldrb	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d100      	bne.n	8007824 <_vfiprintf_r+0xc8>
 8007822:	e0ac      	b.n	800797e <_vfiprintf_r+0x222>
 8007824:	2201      	movs	r2, #1
 8007826:	1c7b      	adds	r3, r7, #1
 8007828:	9303      	str	r3, [sp, #12]
 800782a:	2300      	movs	r3, #0
 800782c:	4252      	negs	r2, r2
 800782e:	606a      	str	r2, [r5, #4]
 8007830:	a904      	add	r1, sp, #16
 8007832:	3254      	adds	r2, #84	; 0x54
 8007834:	1852      	adds	r2, r2, r1
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	60eb      	str	r3, [r5, #12]
 800783a:	60ab      	str	r3, [r5, #8]
 800783c:	7013      	strb	r3, [r2, #0]
 800783e:	65ab      	str	r3, [r5, #88]	; 0x58
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	2205      	movs	r2, #5
 8007844:	7819      	ldrb	r1, [r3, #0]
 8007846:	485d      	ldr	r0, [pc, #372]	; (80079bc <_vfiprintf_r+0x260>)
 8007848:	f7ff f8fa 	bl	8006a40 <memchr>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	1c5f      	adds	r7, r3, #1
 8007850:	2800      	cmp	r0, #0
 8007852:	d120      	bne.n	8007896 <_vfiprintf_r+0x13a>
 8007854:	682a      	ldr	r2, [r5, #0]
 8007856:	06d3      	lsls	r3, r2, #27
 8007858:	d504      	bpl.n	8007864 <_vfiprintf_r+0x108>
 800785a:	2353      	movs	r3, #83	; 0x53
 800785c:	a904      	add	r1, sp, #16
 800785e:	185b      	adds	r3, r3, r1
 8007860:	2120      	movs	r1, #32
 8007862:	7019      	strb	r1, [r3, #0]
 8007864:	0713      	lsls	r3, r2, #28
 8007866:	d504      	bpl.n	8007872 <_vfiprintf_r+0x116>
 8007868:	2353      	movs	r3, #83	; 0x53
 800786a:	a904      	add	r1, sp, #16
 800786c:	185b      	adds	r3, r3, r1
 800786e:	212b      	movs	r1, #43	; 0x2b
 8007870:	7019      	strb	r1, [r3, #0]
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b2a      	cmp	r3, #42	; 0x2a
 8007878:	d016      	beq.n	80078a8 <_vfiprintf_r+0x14c>
 800787a:	2100      	movs	r1, #0
 800787c:	68eb      	ldr	r3, [r5, #12]
 800787e:	9f03      	ldr	r7, [sp, #12]
 8007880:	783a      	ldrb	r2, [r7, #0]
 8007882:	1c78      	adds	r0, r7, #1
 8007884:	3a30      	subs	r2, #48	; 0x30
 8007886:	4684      	mov	ip, r0
 8007888:	2a09      	cmp	r2, #9
 800788a:	d94f      	bls.n	800792c <_vfiprintf_r+0x1d0>
 800788c:	2900      	cmp	r1, #0
 800788e:	d111      	bne.n	80078b4 <_vfiprintf_r+0x158>
 8007890:	e017      	b.n	80078c2 <_vfiprintf_r+0x166>
 8007892:	3701      	adds	r7, #1
 8007894:	e7a9      	b.n	80077ea <_vfiprintf_r+0x8e>
 8007896:	4b49      	ldr	r3, [pc, #292]	; (80079bc <_vfiprintf_r+0x260>)
 8007898:	682a      	ldr	r2, [r5, #0]
 800789a:	1ac0      	subs	r0, r0, r3
 800789c:	2301      	movs	r3, #1
 800789e:	4083      	lsls	r3, r0
 80078a0:	4313      	orrs	r3, r2
 80078a2:	602b      	str	r3, [r5, #0]
 80078a4:	9703      	str	r7, [sp, #12]
 80078a6:	e7cb      	b.n	8007840 <_vfiprintf_r+0xe4>
 80078a8:	9b07      	ldr	r3, [sp, #28]
 80078aa:	1d19      	adds	r1, r3, #4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	9107      	str	r1, [sp, #28]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	db01      	blt.n	80078b8 <_vfiprintf_r+0x15c>
 80078b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b6:	e004      	b.n	80078c2 <_vfiprintf_r+0x166>
 80078b8:	425b      	negs	r3, r3
 80078ba:	60eb      	str	r3, [r5, #12]
 80078bc:	2302      	movs	r3, #2
 80078be:	4313      	orrs	r3, r2
 80078c0:	602b      	str	r3, [r5, #0]
 80078c2:	783b      	ldrb	r3, [r7, #0]
 80078c4:	2b2e      	cmp	r3, #46	; 0x2e
 80078c6:	d10a      	bne.n	80078de <_vfiprintf_r+0x182>
 80078c8:	787b      	ldrb	r3, [r7, #1]
 80078ca:	2b2a      	cmp	r3, #42	; 0x2a
 80078cc:	d137      	bne.n	800793e <_vfiprintf_r+0x1e2>
 80078ce:	9b07      	ldr	r3, [sp, #28]
 80078d0:	3702      	adds	r7, #2
 80078d2:	1d1a      	adds	r2, r3, #4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	9207      	str	r2, [sp, #28]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	db2d      	blt.n	8007938 <_vfiprintf_r+0x1dc>
 80078dc:	9309      	str	r3, [sp, #36]	; 0x24
 80078de:	2203      	movs	r2, #3
 80078e0:	7839      	ldrb	r1, [r7, #0]
 80078e2:	4837      	ldr	r0, [pc, #220]	; (80079c0 <_vfiprintf_r+0x264>)
 80078e4:	f7ff f8ac 	bl	8006a40 <memchr>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d007      	beq.n	80078fc <_vfiprintf_r+0x1a0>
 80078ec:	4b34      	ldr	r3, [pc, #208]	; (80079c0 <_vfiprintf_r+0x264>)
 80078ee:	682a      	ldr	r2, [r5, #0]
 80078f0:	1ac0      	subs	r0, r0, r3
 80078f2:	2340      	movs	r3, #64	; 0x40
 80078f4:	4083      	lsls	r3, r0
 80078f6:	4313      	orrs	r3, r2
 80078f8:	3701      	adds	r7, #1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	7839      	ldrb	r1, [r7, #0]
 80078fe:	1c7b      	adds	r3, r7, #1
 8007900:	2206      	movs	r2, #6
 8007902:	4830      	ldr	r0, [pc, #192]	; (80079c4 <_vfiprintf_r+0x268>)
 8007904:	9303      	str	r3, [sp, #12]
 8007906:	7629      	strb	r1, [r5, #24]
 8007908:	f7ff f89a 	bl	8006a40 <memchr>
 800790c:	2800      	cmp	r0, #0
 800790e:	d045      	beq.n	800799c <_vfiprintf_r+0x240>
 8007910:	4b2d      	ldr	r3, [pc, #180]	; (80079c8 <_vfiprintf_r+0x26c>)
 8007912:	2b00      	cmp	r3, #0
 8007914:	d127      	bne.n	8007966 <_vfiprintf_r+0x20a>
 8007916:	2207      	movs	r2, #7
 8007918:	9b07      	ldr	r3, [sp, #28]
 800791a:	3307      	adds	r3, #7
 800791c:	4393      	bics	r3, r2
 800791e:	3308      	adds	r3, #8
 8007920:	9307      	str	r3, [sp, #28]
 8007922:	696b      	ldr	r3, [r5, #20]
 8007924:	9a04      	ldr	r2, [sp, #16]
 8007926:	189b      	adds	r3, r3, r2
 8007928:	616b      	str	r3, [r5, #20]
 800792a:	e75d      	b.n	80077e8 <_vfiprintf_r+0x8c>
 800792c:	210a      	movs	r1, #10
 800792e:	434b      	muls	r3, r1
 8007930:	4667      	mov	r7, ip
 8007932:	189b      	adds	r3, r3, r2
 8007934:	3909      	subs	r1, #9
 8007936:	e7a3      	b.n	8007880 <_vfiprintf_r+0x124>
 8007938:	2301      	movs	r3, #1
 800793a:	425b      	negs	r3, r3
 800793c:	e7ce      	b.n	80078dc <_vfiprintf_r+0x180>
 800793e:	2300      	movs	r3, #0
 8007940:	001a      	movs	r2, r3
 8007942:	3701      	adds	r7, #1
 8007944:	606b      	str	r3, [r5, #4]
 8007946:	7839      	ldrb	r1, [r7, #0]
 8007948:	1c78      	adds	r0, r7, #1
 800794a:	3930      	subs	r1, #48	; 0x30
 800794c:	4684      	mov	ip, r0
 800794e:	2909      	cmp	r1, #9
 8007950:	d903      	bls.n	800795a <_vfiprintf_r+0x1fe>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0c3      	beq.n	80078de <_vfiprintf_r+0x182>
 8007956:	9209      	str	r2, [sp, #36]	; 0x24
 8007958:	e7c1      	b.n	80078de <_vfiprintf_r+0x182>
 800795a:	230a      	movs	r3, #10
 800795c:	435a      	muls	r2, r3
 800795e:	4667      	mov	r7, ip
 8007960:	1852      	adds	r2, r2, r1
 8007962:	3b09      	subs	r3, #9
 8007964:	e7ef      	b.n	8007946 <_vfiprintf_r+0x1ea>
 8007966:	ab07      	add	r3, sp, #28
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	0022      	movs	r2, r4
 800796c:	0029      	movs	r1, r5
 800796e:	0030      	movs	r0, r6
 8007970:	4b16      	ldr	r3, [pc, #88]	; (80079cc <_vfiprintf_r+0x270>)
 8007972:	f7fd fdbd 	bl	80054f0 <_printf_float>
 8007976:	9004      	str	r0, [sp, #16]
 8007978:	9b04      	ldr	r3, [sp, #16]
 800797a:	3301      	adds	r3, #1
 800797c:	d1d1      	bne.n	8007922 <_vfiprintf_r+0x1c6>
 800797e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007980:	07db      	lsls	r3, r3, #31
 8007982:	d405      	bmi.n	8007990 <_vfiprintf_r+0x234>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	059b      	lsls	r3, r3, #22
 8007988:	d402      	bmi.n	8007990 <_vfiprintf_r+0x234>
 800798a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798c:	f000 fad4 	bl	8007f38 <__retarget_lock_release_recursive>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	065b      	lsls	r3, r3, #25
 8007994:	d500      	bpl.n	8007998 <_vfiprintf_r+0x23c>
 8007996:	e70a      	b.n	80077ae <_vfiprintf_r+0x52>
 8007998:	980d      	ldr	r0, [sp, #52]	; 0x34
 800799a:	e70a      	b.n	80077b2 <_vfiprintf_r+0x56>
 800799c:	ab07      	add	r3, sp, #28
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	0022      	movs	r2, r4
 80079a2:	0029      	movs	r1, r5
 80079a4:	0030      	movs	r0, r6
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <_vfiprintf_r+0x270>)
 80079a8:	f7fe f860 	bl	8005a6c <_printf_i>
 80079ac:	e7e3      	b.n	8007976 <_vfiprintf_r+0x21a>
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	080087ac 	.word	0x080087ac
 80079b4:	080087cc 	.word	0x080087cc
 80079b8:	0800878c 	.word	0x0800878c
 80079bc:	08008634 	.word	0x08008634
 80079c0:	0800863a 	.word	0x0800863a
 80079c4:	0800863e 	.word	0x0800863e
 80079c8:	080054f1 	.word	0x080054f1
 80079cc:	08007737 	.word	0x08007737

080079d0 <__swbuf_r>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	0005      	movs	r5, r0
 80079d4:	000e      	movs	r6, r1
 80079d6:	0014      	movs	r4, r2
 80079d8:	2800      	cmp	r0, #0
 80079da:	d004      	beq.n	80079e6 <__swbuf_r+0x16>
 80079dc:	6983      	ldr	r3, [r0, #24]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <__swbuf_r+0x16>
 80079e2:	f000 fa07 	bl	8007df4 <__sinit>
 80079e6:	4b22      	ldr	r3, [pc, #136]	; (8007a70 <__swbuf_r+0xa0>)
 80079e8:	429c      	cmp	r4, r3
 80079ea:	d12e      	bne.n	8007a4a <__swbuf_r+0x7a>
 80079ec:	686c      	ldr	r4, [r5, #4]
 80079ee:	69a3      	ldr	r3, [r4, #24]
 80079f0:	60a3      	str	r3, [r4, #8]
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	071b      	lsls	r3, r3, #28
 80079f6:	d532      	bpl.n	8007a5e <__swbuf_r+0x8e>
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d02f      	beq.n	8007a5e <__swbuf_r+0x8e>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	6922      	ldr	r2, [r4, #16]
 8007a02:	b2f7      	uxtb	r7, r6
 8007a04:	1a98      	subs	r0, r3, r2
 8007a06:	6963      	ldr	r3, [r4, #20]
 8007a08:	b2f6      	uxtb	r6, r6
 8007a0a:	4283      	cmp	r3, r0
 8007a0c:	dc05      	bgt.n	8007a1a <__swbuf_r+0x4a>
 8007a0e:	0021      	movs	r1, r4
 8007a10:	0028      	movs	r0, r5
 8007a12:	f000 f94d 	bl	8007cb0 <_fflush_r>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d127      	bne.n	8007a6a <__swbuf_r+0x9a>
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	60a3      	str	r3, [r4, #8]
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	6022      	str	r2, [r4, #0]
 8007a28:	701f      	strb	r7, [r3, #0]
 8007a2a:	6963      	ldr	r3, [r4, #20]
 8007a2c:	4283      	cmp	r3, r0
 8007a2e:	d004      	beq.n	8007a3a <__swbuf_r+0x6a>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	07db      	lsls	r3, r3, #31
 8007a34:	d507      	bpl.n	8007a46 <__swbuf_r+0x76>
 8007a36:	2e0a      	cmp	r6, #10
 8007a38:	d105      	bne.n	8007a46 <__swbuf_r+0x76>
 8007a3a:	0021      	movs	r1, r4
 8007a3c:	0028      	movs	r0, r5
 8007a3e:	f000 f937 	bl	8007cb0 <_fflush_r>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d111      	bne.n	8007a6a <__swbuf_r+0x9a>
 8007a46:	0030      	movs	r0, r6
 8007a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4a:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <__swbuf_r+0xa4>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	d101      	bne.n	8007a54 <__swbuf_r+0x84>
 8007a50:	68ac      	ldr	r4, [r5, #8]
 8007a52:	e7cc      	b.n	80079ee <__swbuf_r+0x1e>
 8007a54:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <__swbuf_r+0xa8>)
 8007a56:	429c      	cmp	r4, r3
 8007a58:	d1c9      	bne.n	80079ee <__swbuf_r+0x1e>
 8007a5a:	68ec      	ldr	r4, [r5, #12]
 8007a5c:	e7c7      	b.n	80079ee <__swbuf_r+0x1e>
 8007a5e:	0021      	movs	r1, r4
 8007a60:	0028      	movs	r0, r5
 8007a62:	f000 f819 	bl	8007a98 <__swsetup_r>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d0c9      	beq.n	80079fe <__swbuf_r+0x2e>
 8007a6a:	2601      	movs	r6, #1
 8007a6c:	4276      	negs	r6, r6
 8007a6e:	e7ea      	b.n	8007a46 <__swbuf_r+0x76>
 8007a70:	080087ac 	.word	0x080087ac
 8007a74:	080087cc 	.word	0x080087cc
 8007a78:	0800878c 	.word	0x0800878c

08007a7c <__ascii_wctomb>:
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	1e08      	subs	r0, r1, #0
 8007a80:	d005      	beq.n	8007a8e <__ascii_wctomb+0x12>
 8007a82:	2aff      	cmp	r2, #255	; 0xff
 8007a84:	d904      	bls.n	8007a90 <__ascii_wctomb+0x14>
 8007a86:	228a      	movs	r2, #138	; 0x8a
 8007a88:	2001      	movs	r0, #1
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	4240      	negs	r0, r0
 8007a8e:	4770      	bx	lr
 8007a90:	2001      	movs	r0, #1
 8007a92:	700a      	strb	r2, [r1, #0]
 8007a94:	e7fb      	b.n	8007a8e <__ascii_wctomb+0x12>
	...

08007a98 <__swsetup_r>:
 8007a98:	4b37      	ldr	r3, [pc, #220]	; (8007b78 <__swsetup_r+0xe0>)
 8007a9a:	b570      	push	{r4, r5, r6, lr}
 8007a9c:	681d      	ldr	r5, [r3, #0]
 8007a9e:	0006      	movs	r6, r0
 8007aa0:	000c      	movs	r4, r1
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	d005      	beq.n	8007ab2 <__swsetup_r+0x1a>
 8007aa6:	69ab      	ldr	r3, [r5, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <__swsetup_r+0x1a>
 8007aac:	0028      	movs	r0, r5
 8007aae:	f000 f9a1 	bl	8007df4 <__sinit>
 8007ab2:	4b32      	ldr	r3, [pc, #200]	; (8007b7c <__swsetup_r+0xe4>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	d10f      	bne.n	8007ad8 <__swsetup_r+0x40>
 8007ab8:	686c      	ldr	r4, [r5, #4]
 8007aba:	230c      	movs	r3, #12
 8007abc:	5ee2      	ldrsh	r2, [r4, r3]
 8007abe:	b293      	uxth	r3, r2
 8007ac0:	0711      	lsls	r1, r2, #28
 8007ac2:	d42d      	bmi.n	8007b20 <__swsetup_r+0x88>
 8007ac4:	06d9      	lsls	r1, r3, #27
 8007ac6:	d411      	bmi.n	8007aec <__swsetup_r+0x54>
 8007ac8:	2309      	movs	r3, #9
 8007aca:	2001      	movs	r0, #1
 8007acc:	6033      	str	r3, [r6, #0]
 8007ace:	3337      	adds	r3, #55	; 0x37
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	4240      	negs	r0, r0
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	4b29      	ldr	r3, [pc, #164]	; (8007b80 <__swsetup_r+0xe8>)
 8007ada:	429c      	cmp	r4, r3
 8007adc:	d101      	bne.n	8007ae2 <__swsetup_r+0x4a>
 8007ade:	68ac      	ldr	r4, [r5, #8]
 8007ae0:	e7eb      	b.n	8007aba <__swsetup_r+0x22>
 8007ae2:	4b28      	ldr	r3, [pc, #160]	; (8007b84 <__swsetup_r+0xec>)
 8007ae4:	429c      	cmp	r4, r3
 8007ae6:	d1e8      	bne.n	8007aba <__swsetup_r+0x22>
 8007ae8:	68ec      	ldr	r4, [r5, #12]
 8007aea:	e7e6      	b.n	8007aba <__swsetup_r+0x22>
 8007aec:	075b      	lsls	r3, r3, #29
 8007aee:	d513      	bpl.n	8007b18 <__swsetup_r+0x80>
 8007af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007af2:	2900      	cmp	r1, #0
 8007af4:	d008      	beq.n	8007b08 <__swsetup_r+0x70>
 8007af6:	0023      	movs	r3, r4
 8007af8:	3344      	adds	r3, #68	; 0x44
 8007afa:	4299      	cmp	r1, r3
 8007afc:	d002      	beq.n	8007b04 <__swsetup_r+0x6c>
 8007afe:	0030      	movs	r0, r6
 8007b00:	f7ff fb5e 	bl	80071c0 <_free_r>
 8007b04:	2300      	movs	r3, #0
 8007b06:	6363      	str	r3, [r4, #52]	; 0x34
 8007b08:	2224      	movs	r2, #36	; 0x24
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	4393      	bics	r3, r2
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	2300      	movs	r3, #0
 8007b12:	6063      	str	r3, [r4, #4]
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	6023      	str	r3, [r4, #0]
 8007b18:	2308      	movs	r3, #8
 8007b1a:	89a2      	ldrh	r2, [r4, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	6923      	ldr	r3, [r4, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10b      	bne.n	8007b3e <__swsetup_r+0xa6>
 8007b26:	21a0      	movs	r1, #160	; 0xa0
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	0089      	lsls	r1, r1, #2
 8007b2e:	0092      	lsls	r2, r2, #2
 8007b30:	400b      	ands	r3, r1
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d003      	beq.n	8007b3e <__swsetup_r+0xa6>
 8007b36:	0021      	movs	r1, r4
 8007b38:	0030      	movs	r0, r6
 8007b3a:	f000 fa27 	bl	8007f8c <__smakebuf_r>
 8007b3e:	220c      	movs	r2, #12
 8007b40:	5ea3      	ldrsh	r3, [r4, r2]
 8007b42:	2001      	movs	r0, #1
 8007b44:	001a      	movs	r2, r3
 8007b46:	b299      	uxth	r1, r3
 8007b48:	4002      	ands	r2, r0
 8007b4a:	4203      	tst	r3, r0
 8007b4c:	d00f      	beq.n	8007b6e <__swsetup_r+0xd6>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	60a2      	str	r2, [r4, #8]
 8007b52:	6962      	ldr	r2, [r4, #20]
 8007b54:	4252      	negs	r2, r2
 8007b56:	61a2      	str	r2, [r4, #24]
 8007b58:	2000      	movs	r0, #0
 8007b5a:	6922      	ldr	r2, [r4, #16]
 8007b5c:	4282      	cmp	r2, r0
 8007b5e:	d1ba      	bne.n	8007ad6 <__swsetup_r+0x3e>
 8007b60:	060a      	lsls	r2, r1, #24
 8007b62:	d5b8      	bpl.n	8007ad6 <__swsetup_r+0x3e>
 8007b64:	2240      	movs	r2, #64	; 0x40
 8007b66:	4313      	orrs	r3, r2
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	3801      	subs	r0, #1
 8007b6c:	e7b3      	b.n	8007ad6 <__swsetup_r+0x3e>
 8007b6e:	0788      	lsls	r0, r1, #30
 8007b70:	d400      	bmi.n	8007b74 <__swsetup_r+0xdc>
 8007b72:	6962      	ldr	r2, [r4, #20]
 8007b74:	60a2      	str	r2, [r4, #8]
 8007b76:	e7ef      	b.n	8007b58 <__swsetup_r+0xc0>
 8007b78:	2000000c 	.word	0x2000000c
 8007b7c:	080087ac 	.word	0x080087ac
 8007b80:	080087cc 	.word	0x080087cc
 8007b84:	0800878c 	.word	0x0800878c

08007b88 <abort>:
 8007b88:	2006      	movs	r0, #6
 8007b8a:	b510      	push	{r4, lr}
 8007b8c:	f000 fa74 	bl	8008078 <raise>
 8007b90:	2001      	movs	r0, #1
 8007b92:	f7fb f900 	bl	8002d96 <_exit>
	...

08007b98 <__sflush_r>:
 8007b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b9a:	898b      	ldrh	r3, [r1, #12]
 8007b9c:	0005      	movs	r5, r0
 8007b9e:	000c      	movs	r4, r1
 8007ba0:	071a      	lsls	r2, r3, #28
 8007ba2:	d45f      	bmi.n	8007c64 <__sflush_r+0xcc>
 8007ba4:	684a      	ldr	r2, [r1, #4]
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	dc04      	bgt.n	8007bb4 <__sflush_r+0x1c>
 8007baa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007bac:	2a00      	cmp	r2, #0
 8007bae:	dc01      	bgt.n	8007bb4 <__sflush_r+0x1c>
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bb4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007bb6:	2f00      	cmp	r7, #0
 8007bb8:	d0fa      	beq.n	8007bb0 <__sflush_r+0x18>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2180      	movs	r1, #128	; 0x80
 8007bbe:	682e      	ldr	r6, [r5, #0]
 8007bc0:	602a      	str	r2, [r5, #0]
 8007bc2:	001a      	movs	r2, r3
 8007bc4:	0149      	lsls	r1, r1, #5
 8007bc6:	400a      	ands	r2, r1
 8007bc8:	420b      	tst	r3, r1
 8007bca:	d034      	beq.n	8007c36 <__sflush_r+0x9e>
 8007bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	075b      	lsls	r3, r3, #29
 8007bd2:	d506      	bpl.n	8007be2 <__sflush_r+0x4a>
 8007bd4:	6863      	ldr	r3, [r4, #4]
 8007bd6:	1ac0      	subs	r0, r0, r3
 8007bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <__sflush_r+0x4a>
 8007bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be0:	1ac0      	subs	r0, r0, r3
 8007be2:	0002      	movs	r2, r0
 8007be4:	6a21      	ldr	r1, [r4, #32]
 8007be6:	2300      	movs	r3, #0
 8007be8:	0028      	movs	r0, r5
 8007bea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007bec:	47b8      	blx	r7
 8007bee:	89a1      	ldrh	r1, [r4, #12]
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d106      	bne.n	8007c02 <__sflush_r+0x6a>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	2b1d      	cmp	r3, #29
 8007bf8:	d831      	bhi.n	8007c5e <__sflush_r+0xc6>
 8007bfa:	4a2c      	ldr	r2, [pc, #176]	; (8007cac <__sflush_r+0x114>)
 8007bfc:	40da      	lsrs	r2, r3
 8007bfe:	07d3      	lsls	r3, r2, #31
 8007c00:	d52d      	bpl.n	8007c5e <__sflush_r+0xc6>
 8007c02:	2300      	movs	r3, #0
 8007c04:	6063      	str	r3, [r4, #4]
 8007c06:	6923      	ldr	r3, [r4, #16]
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	04cb      	lsls	r3, r1, #19
 8007c0c:	d505      	bpl.n	8007c1a <__sflush_r+0x82>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	d102      	bne.n	8007c18 <__sflush_r+0x80>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d100      	bne.n	8007c1a <__sflush_r+0x82>
 8007c18:	6560      	str	r0, [r4, #84]	; 0x54
 8007c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c1c:	602e      	str	r6, [r5, #0]
 8007c1e:	2900      	cmp	r1, #0
 8007c20:	d0c6      	beq.n	8007bb0 <__sflush_r+0x18>
 8007c22:	0023      	movs	r3, r4
 8007c24:	3344      	adds	r3, #68	; 0x44
 8007c26:	4299      	cmp	r1, r3
 8007c28:	d002      	beq.n	8007c30 <__sflush_r+0x98>
 8007c2a:	0028      	movs	r0, r5
 8007c2c:	f7ff fac8 	bl	80071c0 <_free_r>
 8007c30:	2000      	movs	r0, #0
 8007c32:	6360      	str	r0, [r4, #52]	; 0x34
 8007c34:	e7bd      	b.n	8007bb2 <__sflush_r+0x1a>
 8007c36:	2301      	movs	r3, #1
 8007c38:	0028      	movs	r0, r5
 8007c3a:	6a21      	ldr	r1, [r4, #32]
 8007c3c:	47b8      	blx	r7
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	d1c5      	bne.n	8007bce <__sflush_r+0x36>
 8007c42:	682b      	ldr	r3, [r5, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d0c2      	beq.n	8007bce <__sflush_r+0x36>
 8007c48:	2b1d      	cmp	r3, #29
 8007c4a:	d001      	beq.n	8007c50 <__sflush_r+0xb8>
 8007c4c:	2b16      	cmp	r3, #22
 8007c4e:	d101      	bne.n	8007c54 <__sflush_r+0xbc>
 8007c50:	602e      	str	r6, [r5, #0]
 8007c52:	e7ad      	b.n	8007bb0 <__sflush_r+0x18>
 8007c54:	2340      	movs	r3, #64	; 0x40
 8007c56:	89a2      	ldrh	r2, [r4, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	e7a9      	b.n	8007bb2 <__sflush_r+0x1a>
 8007c5e:	2340      	movs	r3, #64	; 0x40
 8007c60:	430b      	orrs	r3, r1
 8007c62:	e7fa      	b.n	8007c5a <__sflush_r+0xc2>
 8007c64:	690f      	ldr	r7, [r1, #16]
 8007c66:	2f00      	cmp	r7, #0
 8007c68:	d0a2      	beq.n	8007bb0 <__sflush_r+0x18>
 8007c6a:	680a      	ldr	r2, [r1, #0]
 8007c6c:	600f      	str	r7, [r1, #0]
 8007c6e:	1bd2      	subs	r2, r2, r7
 8007c70:	9201      	str	r2, [sp, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	079b      	lsls	r3, r3, #30
 8007c76:	d100      	bne.n	8007c7a <__sflush_r+0xe2>
 8007c78:	694a      	ldr	r2, [r1, #20]
 8007c7a:	60a2      	str	r2, [r4, #8]
 8007c7c:	9b01      	ldr	r3, [sp, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	dc00      	bgt.n	8007c84 <__sflush_r+0xec>
 8007c82:	e795      	b.n	8007bb0 <__sflush_r+0x18>
 8007c84:	003a      	movs	r2, r7
 8007c86:	0028      	movs	r0, r5
 8007c88:	9b01      	ldr	r3, [sp, #4]
 8007c8a:	6a21      	ldr	r1, [r4, #32]
 8007c8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c8e:	47b0      	blx	r6
 8007c90:	2800      	cmp	r0, #0
 8007c92:	dc06      	bgt.n	8007ca2 <__sflush_r+0x10a>
 8007c94:	2340      	movs	r3, #64	; 0x40
 8007c96:	2001      	movs	r0, #1
 8007c98:	89a2      	ldrh	r2, [r4, #12]
 8007c9a:	4240      	negs	r0, r0
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	e787      	b.n	8007bb2 <__sflush_r+0x1a>
 8007ca2:	9b01      	ldr	r3, [sp, #4]
 8007ca4:	183f      	adds	r7, r7, r0
 8007ca6:	1a1b      	subs	r3, r3, r0
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	e7e7      	b.n	8007c7c <__sflush_r+0xe4>
 8007cac:	20400001 	.word	0x20400001

08007cb0 <_fflush_r>:
 8007cb0:	690b      	ldr	r3, [r1, #16]
 8007cb2:	b570      	push	{r4, r5, r6, lr}
 8007cb4:	0005      	movs	r5, r0
 8007cb6:	000c      	movs	r4, r1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <_fflush_r+0x12>
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	0028      	movs	r0, r5
 8007cc0:	bd70      	pop	{r4, r5, r6, pc}
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d004      	beq.n	8007cd0 <_fflush_r+0x20>
 8007cc6:	6983      	ldr	r3, [r0, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <_fflush_r+0x20>
 8007ccc:	f000 f892 	bl	8007df4 <__sinit>
 8007cd0:	4b14      	ldr	r3, [pc, #80]	; (8007d24 <_fflush_r+0x74>)
 8007cd2:	429c      	cmp	r4, r3
 8007cd4:	d11b      	bne.n	8007d0e <_fflush_r+0x5e>
 8007cd6:	686c      	ldr	r4, [r5, #4]
 8007cd8:	220c      	movs	r2, #12
 8007cda:	5ea3      	ldrsh	r3, [r4, r2]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0ed      	beq.n	8007cbc <_fflush_r+0xc>
 8007ce0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ce2:	07d2      	lsls	r2, r2, #31
 8007ce4:	d404      	bmi.n	8007cf0 <_fflush_r+0x40>
 8007ce6:	059b      	lsls	r3, r3, #22
 8007ce8:	d402      	bmi.n	8007cf0 <_fflush_r+0x40>
 8007cea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cec:	f000 f923 	bl	8007f36 <__retarget_lock_acquire_recursive>
 8007cf0:	0028      	movs	r0, r5
 8007cf2:	0021      	movs	r1, r4
 8007cf4:	f7ff ff50 	bl	8007b98 <__sflush_r>
 8007cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cfa:	0005      	movs	r5, r0
 8007cfc:	07db      	lsls	r3, r3, #31
 8007cfe:	d4de      	bmi.n	8007cbe <_fflush_r+0xe>
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	059b      	lsls	r3, r3, #22
 8007d04:	d4db      	bmi.n	8007cbe <_fflush_r+0xe>
 8007d06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d08:	f000 f916 	bl	8007f38 <__retarget_lock_release_recursive>
 8007d0c:	e7d7      	b.n	8007cbe <_fflush_r+0xe>
 8007d0e:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <_fflush_r+0x78>)
 8007d10:	429c      	cmp	r4, r3
 8007d12:	d101      	bne.n	8007d18 <_fflush_r+0x68>
 8007d14:	68ac      	ldr	r4, [r5, #8]
 8007d16:	e7df      	b.n	8007cd8 <_fflush_r+0x28>
 8007d18:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <_fflush_r+0x7c>)
 8007d1a:	429c      	cmp	r4, r3
 8007d1c:	d1dc      	bne.n	8007cd8 <_fflush_r+0x28>
 8007d1e:	68ec      	ldr	r4, [r5, #12]
 8007d20:	e7da      	b.n	8007cd8 <_fflush_r+0x28>
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	080087ac 	.word	0x080087ac
 8007d28:	080087cc 	.word	0x080087cc
 8007d2c:	0800878c 	.word	0x0800878c

08007d30 <std>:
 8007d30:	2300      	movs	r3, #0
 8007d32:	b510      	push	{r4, lr}
 8007d34:	0004      	movs	r4, r0
 8007d36:	6003      	str	r3, [r0, #0]
 8007d38:	6043      	str	r3, [r0, #4]
 8007d3a:	6083      	str	r3, [r0, #8]
 8007d3c:	8181      	strh	r1, [r0, #12]
 8007d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d40:	0019      	movs	r1, r3
 8007d42:	81c2      	strh	r2, [r0, #14]
 8007d44:	6103      	str	r3, [r0, #16]
 8007d46:	6143      	str	r3, [r0, #20]
 8007d48:	6183      	str	r3, [r0, #24]
 8007d4a:	2208      	movs	r2, #8
 8007d4c:	305c      	adds	r0, #92	; 0x5c
 8007d4e:	f7fd fb1d 	bl	800538c <memset>
 8007d52:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <std+0x38>)
 8007d54:	6263      	str	r3, [r4, #36]	; 0x24
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <std+0x3c>)
 8007d58:	6224      	str	r4, [r4, #32]
 8007d5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <std+0x40>)
 8007d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d60:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <std+0x44>)
 8007d62:	6323      	str	r3, [r4, #48]	; 0x30
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	080080b9 	.word	0x080080b9
 8007d6c:	080080e1 	.word	0x080080e1
 8007d70:	08008119 	.word	0x08008119
 8007d74:	08008145 	.word	0x08008145

08007d78 <_cleanup_r>:
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	4902      	ldr	r1, [pc, #8]	; (8007d84 <_cleanup_r+0xc>)
 8007d7c:	f000 f8ba 	bl	8007ef4 <_fwalk_reent>
 8007d80:	bd10      	pop	{r4, pc}
 8007d82:	46c0      	nop			; (mov r8, r8)
 8007d84:	08007cb1 	.word	0x08007cb1

08007d88 <__sfmoreglue>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	2568      	movs	r5, #104	; 0x68
 8007d8c:	1e4a      	subs	r2, r1, #1
 8007d8e:	4355      	muls	r5, r2
 8007d90:	000e      	movs	r6, r1
 8007d92:	0029      	movs	r1, r5
 8007d94:	3174      	adds	r1, #116	; 0x74
 8007d96:	f7ff fa5d 	bl	8007254 <_malloc_r>
 8007d9a:	1e04      	subs	r4, r0, #0
 8007d9c:	d008      	beq.n	8007db0 <__sfmoreglue+0x28>
 8007d9e:	2100      	movs	r1, #0
 8007da0:	002a      	movs	r2, r5
 8007da2:	6001      	str	r1, [r0, #0]
 8007da4:	6046      	str	r6, [r0, #4]
 8007da6:	300c      	adds	r0, #12
 8007da8:	60a0      	str	r0, [r4, #8]
 8007daa:	3268      	adds	r2, #104	; 0x68
 8007dac:	f7fd faee 	bl	800538c <memset>
 8007db0:	0020      	movs	r0, r4
 8007db2:	bd70      	pop	{r4, r5, r6, pc}

08007db4 <__sfp_lock_acquire>:
 8007db4:	b510      	push	{r4, lr}
 8007db6:	4802      	ldr	r0, [pc, #8]	; (8007dc0 <__sfp_lock_acquire+0xc>)
 8007db8:	f000 f8bd 	bl	8007f36 <__retarget_lock_acquire_recursive>
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	20000354 	.word	0x20000354

08007dc4 <__sfp_lock_release>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	4802      	ldr	r0, [pc, #8]	; (8007dd0 <__sfp_lock_release+0xc>)
 8007dc8:	f000 f8b6 	bl	8007f38 <__retarget_lock_release_recursive>
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	20000354 	.word	0x20000354

08007dd4 <__sinit_lock_acquire>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	4802      	ldr	r0, [pc, #8]	; (8007de0 <__sinit_lock_acquire+0xc>)
 8007dd8:	f000 f8ad 	bl	8007f36 <__retarget_lock_acquire_recursive>
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	2000034f 	.word	0x2000034f

08007de4 <__sinit_lock_release>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	4802      	ldr	r0, [pc, #8]	; (8007df0 <__sinit_lock_release+0xc>)
 8007de8:	f000 f8a6 	bl	8007f38 <__retarget_lock_release_recursive>
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	2000034f 	.word	0x2000034f

08007df4 <__sinit>:
 8007df4:	b513      	push	{r0, r1, r4, lr}
 8007df6:	0004      	movs	r4, r0
 8007df8:	f7ff ffec 	bl	8007dd4 <__sinit_lock_acquire>
 8007dfc:	69a3      	ldr	r3, [r4, #24]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <__sinit+0x14>
 8007e02:	f7ff ffef 	bl	8007de4 <__sinit_lock_release>
 8007e06:	bd13      	pop	{r0, r1, r4, pc}
 8007e08:	64a3      	str	r3, [r4, #72]	; 0x48
 8007e0a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8007e0e:	4b13      	ldr	r3, [pc, #76]	; (8007e5c <__sinit+0x68>)
 8007e10:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <__sinit+0x6c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	d101      	bne.n	8007e20 <__sinit+0x2c>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	61a3      	str	r3, [r4, #24]
 8007e20:	0020      	movs	r0, r4
 8007e22:	f000 f81f 	bl	8007e64 <__sfp>
 8007e26:	6060      	str	r0, [r4, #4]
 8007e28:	0020      	movs	r0, r4
 8007e2a:	f000 f81b 	bl	8007e64 <__sfp>
 8007e2e:	60a0      	str	r0, [r4, #8]
 8007e30:	0020      	movs	r0, r4
 8007e32:	f000 f817 	bl	8007e64 <__sfp>
 8007e36:	2200      	movs	r2, #0
 8007e38:	2104      	movs	r1, #4
 8007e3a:	60e0      	str	r0, [r4, #12]
 8007e3c:	6860      	ldr	r0, [r4, #4]
 8007e3e:	f7ff ff77 	bl	8007d30 <std>
 8007e42:	2201      	movs	r2, #1
 8007e44:	2109      	movs	r1, #9
 8007e46:	68a0      	ldr	r0, [r4, #8]
 8007e48:	f7ff ff72 	bl	8007d30 <std>
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	2112      	movs	r1, #18
 8007e50:	68e0      	ldr	r0, [r4, #12]
 8007e52:	f7ff ff6d 	bl	8007d30 <std>
 8007e56:	2301      	movs	r3, #1
 8007e58:	61a3      	str	r3, [r4, #24]
 8007e5a:	e7d2      	b.n	8007e02 <__sinit+0xe>
 8007e5c:	08008408 	.word	0x08008408
 8007e60:	08007d79 	.word	0x08007d79

08007e64 <__sfp>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	0007      	movs	r7, r0
 8007e68:	f7ff ffa4 	bl	8007db4 <__sfp_lock_acquire>
 8007e6c:	4b1f      	ldr	r3, [pc, #124]	; (8007eec <__sfp+0x88>)
 8007e6e:	681e      	ldr	r6, [r3, #0]
 8007e70:	69b3      	ldr	r3, [r6, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d102      	bne.n	8007e7c <__sfp+0x18>
 8007e76:	0030      	movs	r0, r6
 8007e78:	f7ff ffbc 	bl	8007df4 <__sinit>
 8007e7c:	3648      	adds	r6, #72	; 0x48
 8007e7e:	68b4      	ldr	r4, [r6, #8]
 8007e80:	6873      	ldr	r3, [r6, #4]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	d504      	bpl.n	8007e90 <__sfp+0x2c>
 8007e86:	6833      	ldr	r3, [r6, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d022      	beq.n	8007ed2 <__sfp+0x6e>
 8007e8c:	6836      	ldr	r6, [r6, #0]
 8007e8e:	e7f6      	b.n	8007e7e <__sfp+0x1a>
 8007e90:	220c      	movs	r2, #12
 8007e92:	5ea5      	ldrsh	r5, [r4, r2]
 8007e94:	2d00      	cmp	r5, #0
 8007e96:	d11a      	bne.n	8007ece <__sfp+0x6a>
 8007e98:	0020      	movs	r0, r4
 8007e9a:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <__sfp+0x8c>)
 8007e9c:	3058      	adds	r0, #88	; 0x58
 8007e9e:	60e3      	str	r3, [r4, #12]
 8007ea0:	6665      	str	r5, [r4, #100]	; 0x64
 8007ea2:	f000 f847 	bl	8007f34 <__retarget_lock_init_recursive>
 8007ea6:	f7ff ff8d 	bl	8007dc4 <__sfp_lock_release>
 8007eaa:	0020      	movs	r0, r4
 8007eac:	2208      	movs	r2, #8
 8007eae:	0029      	movs	r1, r5
 8007eb0:	6025      	str	r5, [r4, #0]
 8007eb2:	60a5      	str	r5, [r4, #8]
 8007eb4:	6065      	str	r5, [r4, #4]
 8007eb6:	6125      	str	r5, [r4, #16]
 8007eb8:	6165      	str	r5, [r4, #20]
 8007eba:	61a5      	str	r5, [r4, #24]
 8007ebc:	305c      	adds	r0, #92	; 0x5c
 8007ebe:	f7fd fa65 	bl	800538c <memset>
 8007ec2:	6365      	str	r5, [r4, #52]	; 0x34
 8007ec4:	63a5      	str	r5, [r4, #56]	; 0x38
 8007ec6:	64a5      	str	r5, [r4, #72]	; 0x48
 8007ec8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007eca:	0020      	movs	r0, r4
 8007ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ece:	3468      	adds	r4, #104	; 0x68
 8007ed0:	e7d7      	b.n	8007e82 <__sfp+0x1e>
 8007ed2:	2104      	movs	r1, #4
 8007ed4:	0038      	movs	r0, r7
 8007ed6:	f7ff ff57 	bl	8007d88 <__sfmoreglue>
 8007eda:	1e04      	subs	r4, r0, #0
 8007edc:	6030      	str	r0, [r6, #0]
 8007ede:	d1d5      	bne.n	8007e8c <__sfp+0x28>
 8007ee0:	f7ff ff70 	bl	8007dc4 <__sfp_lock_release>
 8007ee4:	230c      	movs	r3, #12
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	e7ef      	b.n	8007eca <__sfp+0x66>
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	08008408 	.word	0x08008408
 8007ef0:	ffff0001 	.word	0xffff0001

08007ef4 <_fwalk_reent>:
 8007ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ef6:	0004      	movs	r4, r0
 8007ef8:	0006      	movs	r6, r0
 8007efa:	2700      	movs	r7, #0
 8007efc:	9101      	str	r1, [sp, #4]
 8007efe:	3448      	adds	r4, #72	; 0x48
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	68a5      	ldr	r5, [r4, #8]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	9b00      	ldr	r3, [sp, #0]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	d504      	bpl.n	8007f18 <_fwalk_reent+0x24>
 8007f0e:	6824      	ldr	r4, [r4, #0]
 8007f10:	2c00      	cmp	r4, #0
 8007f12:	d1f5      	bne.n	8007f00 <_fwalk_reent+0xc>
 8007f14:	0038      	movs	r0, r7
 8007f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f18:	89ab      	ldrh	r3, [r5, #12]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d908      	bls.n	8007f30 <_fwalk_reent+0x3c>
 8007f1e:	220e      	movs	r2, #14
 8007f20:	5eab      	ldrsh	r3, [r5, r2]
 8007f22:	3301      	adds	r3, #1
 8007f24:	d004      	beq.n	8007f30 <_fwalk_reent+0x3c>
 8007f26:	0029      	movs	r1, r5
 8007f28:	0030      	movs	r0, r6
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	4798      	blx	r3
 8007f2e:	4307      	orrs	r7, r0
 8007f30:	3568      	adds	r5, #104	; 0x68
 8007f32:	e7e8      	b.n	8007f06 <_fwalk_reent+0x12>

08007f34 <__retarget_lock_init_recursive>:
 8007f34:	4770      	bx	lr

08007f36 <__retarget_lock_acquire_recursive>:
 8007f36:	4770      	bx	lr

08007f38 <__retarget_lock_release_recursive>:
 8007f38:	4770      	bx	lr
	...

08007f3c <__swhatbuf_r>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	000e      	movs	r6, r1
 8007f40:	001d      	movs	r5, r3
 8007f42:	230e      	movs	r3, #14
 8007f44:	5ec9      	ldrsh	r1, [r1, r3]
 8007f46:	0014      	movs	r4, r2
 8007f48:	b096      	sub	sp, #88	; 0x58
 8007f4a:	2900      	cmp	r1, #0
 8007f4c:	da07      	bge.n	8007f5e <__swhatbuf_r+0x22>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	602b      	str	r3, [r5, #0]
 8007f52:	89b3      	ldrh	r3, [r6, #12]
 8007f54:	061b      	lsls	r3, r3, #24
 8007f56:	d411      	bmi.n	8007f7c <__swhatbuf_r+0x40>
 8007f58:	2380      	movs	r3, #128	; 0x80
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	e00f      	b.n	8007f7e <__swhatbuf_r+0x42>
 8007f5e:	466a      	mov	r2, sp
 8007f60:	f000 f91c 	bl	800819c <_fstat_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	dbf2      	blt.n	8007f4e <__swhatbuf_r+0x12>
 8007f68:	23f0      	movs	r3, #240	; 0xf0
 8007f6a:	9901      	ldr	r1, [sp, #4]
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	4019      	ands	r1, r3
 8007f70:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <__swhatbuf_r+0x4c>)
 8007f72:	18c9      	adds	r1, r1, r3
 8007f74:	424b      	negs	r3, r1
 8007f76:	4159      	adcs	r1, r3
 8007f78:	6029      	str	r1, [r5, #0]
 8007f7a:	e7ed      	b.n	8007f58 <__swhatbuf_r+0x1c>
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	2000      	movs	r0, #0
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	b016      	add	sp, #88	; 0x58
 8007f84:	bd70      	pop	{r4, r5, r6, pc}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	ffffe000 	.word	0xffffe000

08007f8c <__smakebuf_r>:
 8007f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f8e:	2602      	movs	r6, #2
 8007f90:	898b      	ldrh	r3, [r1, #12]
 8007f92:	0005      	movs	r5, r0
 8007f94:	000c      	movs	r4, r1
 8007f96:	4233      	tst	r3, r6
 8007f98:	d006      	beq.n	8007fa8 <__smakebuf_r+0x1c>
 8007f9a:	0023      	movs	r3, r4
 8007f9c:	3347      	adds	r3, #71	; 0x47
 8007f9e:	6023      	str	r3, [r4, #0]
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	6163      	str	r3, [r4, #20]
 8007fa6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007fa8:	466a      	mov	r2, sp
 8007faa:	ab01      	add	r3, sp, #4
 8007fac:	f7ff ffc6 	bl	8007f3c <__swhatbuf_r>
 8007fb0:	9900      	ldr	r1, [sp, #0]
 8007fb2:	0007      	movs	r7, r0
 8007fb4:	0028      	movs	r0, r5
 8007fb6:	f7ff f94d 	bl	8007254 <_malloc_r>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d108      	bne.n	8007fd0 <__smakebuf_r+0x44>
 8007fbe:	220c      	movs	r2, #12
 8007fc0:	5ea3      	ldrsh	r3, [r4, r2]
 8007fc2:	059a      	lsls	r2, r3, #22
 8007fc4:	d4ef      	bmi.n	8007fa6 <__smakebuf_r+0x1a>
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	4393      	bics	r3, r2
 8007fca:	431e      	orrs	r6, r3
 8007fcc:	81a6      	strh	r6, [r4, #12]
 8007fce:	e7e4      	b.n	8007f9a <__smakebuf_r+0xe>
 8007fd0:	4b0f      	ldr	r3, [pc, #60]	; (8008010 <__smakebuf_r+0x84>)
 8007fd2:	62ab      	str	r3, [r5, #40]	; 0x28
 8007fd4:	2380      	movs	r3, #128	; 0x80
 8007fd6:	89a2      	ldrh	r2, [r4, #12]
 8007fd8:	6020      	str	r0, [r4, #0]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	81a3      	strh	r3, [r4, #12]
 8007fde:	9b00      	ldr	r3, [sp, #0]
 8007fe0:	6120      	str	r0, [r4, #16]
 8007fe2:	6163      	str	r3, [r4, #20]
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00d      	beq.n	8008006 <__smakebuf_r+0x7a>
 8007fea:	0028      	movs	r0, r5
 8007fec:	230e      	movs	r3, #14
 8007fee:	5ee1      	ldrsh	r1, [r4, r3]
 8007ff0:	f000 f8e6 	bl	80081c0 <_isatty_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d006      	beq.n	8008006 <__smakebuf_r+0x7a>
 8007ff8:	2203      	movs	r2, #3
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	4393      	bics	r3, r2
 8007ffe:	001a      	movs	r2, r3
 8008000:	2301      	movs	r3, #1
 8008002:	4313      	orrs	r3, r2
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	89a0      	ldrh	r0, [r4, #12]
 8008008:	4307      	orrs	r7, r0
 800800a:	81a7      	strh	r7, [r4, #12]
 800800c:	e7cb      	b.n	8007fa6 <__smakebuf_r+0x1a>
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	08007d79 	.word	0x08007d79

08008014 <_malloc_usable_size_r>:
 8008014:	1f0b      	subs	r3, r1, #4
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	1f18      	subs	r0, r3, #4
 800801a:	2b00      	cmp	r3, #0
 800801c:	da01      	bge.n	8008022 <_malloc_usable_size_r+0xe>
 800801e:	580b      	ldr	r3, [r1, r0]
 8008020:	18c0      	adds	r0, r0, r3
 8008022:	4770      	bx	lr

08008024 <_raise_r>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	0004      	movs	r4, r0
 8008028:	000d      	movs	r5, r1
 800802a:	291f      	cmp	r1, #31
 800802c:	d904      	bls.n	8008038 <_raise_r+0x14>
 800802e:	2316      	movs	r3, #22
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	2001      	movs	r0, #1
 8008034:	4240      	negs	r0, r0
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <_raise_r+0x24>
 800803e:	008a      	lsls	r2, r1, #2
 8008040:	189b      	adds	r3, r3, r2
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	2a00      	cmp	r2, #0
 8008046:	d108      	bne.n	800805a <_raise_r+0x36>
 8008048:	0020      	movs	r0, r4
 800804a:	f000 f831 	bl	80080b0 <_getpid_r>
 800804e:	002a      	movs	r2, r5
 8008050:	0001      	movs	r1, r0
 8008052:	0020      	movs	r0, r4
 8008054:	f000 f81a 	bl	800808c <_kill_r>
 8008058:	e7ed      	b.n	8008036 <_raise_r+0x12>
 800805a:	2000      	movs	r0, #0
 800805c:	2a01      	cmp	r2, #1
 800805e:	d0ea      	beq.n	8008036 <_raise_r+0x12>
 8008060:	1c51      	adds	r1, r2, #1
 8008062:	d103      	bne.n	800806c <_raise_r+0x48>
 8008064:	2316      	movs	r3, #22
 8008066:	3001      	adds	r0, #1
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	e7e4      	b.n	8008036 <_raise_r+0x12>
 800806c:	2400      	movs	r4, #0
 800806e:	0028      	movs	r0, r5
 8008070:	601c      	str	r4, [r3, #0]
 8008072:	4790      	blx	r2
 8008074:	0020      	movs	r0, r4
 8008076:	e7de      	b.n	8008036 <_raise_r+0x12>

08008078 <raise>:
 8008078:	b510      	push	{r4, lr}
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <raise+0x10>)
 800807c:	0001      	movs	r1, r0
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	f7ff ffd0 	bl	8008024 <_raise_r>
 8008084:	bd10      	pop	{r4, pc}
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	2000000c 	.word	0x2000000c

0800808c <_kill_r>:
 800808c:	2300      	movs	r3, #0
 800808e:	b570      	push	{r4, r5, r6, lr}
 8008090:	4d06      	ldr	r5, [pc, #24]	; (80080ac <_kill_r+0x20>)
 8008092:	0004      	movs	r4, r0
 8008094:	0008      	movs	r0, r1
 8008096:	0011      	movs	r1, r2
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	f7fa fe6c 	bl	8002d76 <_kill>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	d103      	bne.n	80080aa <_kill_r+0x1e>
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d000      	beq.n	80080aa <_kill_r+0x1e>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	20000348 	.word	0x20000348

080080b0 <_getpid_r>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	f7fa fe5a 	bl	8002d6a <_getpid>
 80080b6:	bd10      	pop	{r4, pc}

080080b8 <__sread>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	000c      	movs	r4, r1
 80080bc:	250e      	movs	r5, #14
 80080be:	5f49      	ldrsh	r1, [r1, r5]
 80080c0:	f000 f8a4 	bl	800820c <_read_r>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	db03      	blt.n	80080d0 <__sread+0x18>
 80080c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80080ca:	181b      	adds	r3, r3, r0
 80080cc:	6563      	str	r3, [r4, #84]	; 0x54
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	4a02      	ldr	r2, [pc, #8]	; (80080dc <__sread+0x24>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	e7f9      	b.n	80080ce <__sread+0x16>
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	ffffefff 	.word	0xffffefff

080080e0 <__swrite>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	001f      	movs	r7, r3
 80080e4:	898b      	ldrh	r3, [r1, #12]
 80080e6:	0005      	movs	r5, r0
 80080e8:	000c      	movs	r4, r1
 80080ea:	0016      	movs	r6, r2
 80080ec:	05db      	lsls	r3, r3, #23
 80080ee:	d505      	bpl.n	80080fc <__swrite+0x1c>
 80080f0:	230e      	movs	r3, #14
 80080f2:	5ec9      	ldrsh	r1, [r1, r3]
 80080f4:	2200      	movs	r2, #0
 80080f6:	2302      	movs	r3, #2
 80080f8:	f000 f874 	bl	80081e4 <_lseek_r>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	4a05      	ldr	r2, [pc, #20]	; (8008114 <__swrite+0x34>)
 8008100:	0028      	movs	r0, r5
 8008102:	4013      	ands	r3, r2
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	0032      	movs	r2, r6
 8008108:	230e      	movs	r3, #14
 800810a:	5ee1      	ldrsh	r1, [r4, r3]
 800810c:	003b      	movs	r3, r7
 800810e:	f000 f81f 	bl	8008150 <_write_r>
 8008112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008114:	ffffefff 	.word	0xffffefff

08008118 <__sseek>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	000c      	movs	r4, r1
 800811c:	250e      	movs	r5, #14
 800811e:	5f49      	ldrsh	r1, [r1, r5]
 8008120:	f000 f860 	bl	80081e4 <_lseek_r>
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	1c42      	adds	r2, r0, #1
 8008128:	d103      	bne.n	8008132 <__sseek+0x1a>
 800812a:	4a05      	ldr	r2, [pc, #20]	; (8008140 <__sseek+0x28>)
 800812c:	4013      	ands	r3, r2
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	2280      	movs	r2, #128	; 0x80
 8008134:	0152      	lsls	r2, r2, #5
 8008136:	4313      	orrs	r3, r2
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	6560      	str	r0, [r4, #84]	; 0x54
 800813c:	e7f8      	b.n	8008130 <__sseek+0x18>
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	ffffefff 	.word	0xffffefff

08008144 <__sclose>:
 8008144:	b510      	push	{r4, lr}
 8008146:	230e      	movs	r3, #14
 8008148:	5ec9      	ldrsh	r1, [r1, r3]
 800814a:	f000 f815 	bl	8008178 <_close_r>
 800814e:	bd10      	pop	{r4, pc}

08008150 <_write_r>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	0004      	movs	r4, r0
 8008154:	0008      	movs	r0, r1
 8008156:	0011      	movs	r1, r2
 8008158:	001a      	movs	r2, r3
 800815a:	2300      	movs	r3, #0
 800815c:	4d05      	ldr	r5, [pc, #20]	; (8008174 <_write_r+0x24>)
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	f7fa fe42 	bl	8002de8 <_write>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d103      	bne.n	8008170 <_write_r+0x20>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d000      	beq.n	8008170 <_write_r+0x20>
 800816e:	6023      	str	r3, [r4, #0]
 8008170:	bd70      	pop	{r4, r5, r6, pc}
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	20000348 	.word	0x20000348

08008178 <_close_r>:
 8008178:	2300      	movs	r3, #0
 800817a:	b570      	push	{r4, r5, r6, lr}
 800817c:	4d06      	ldr	r5, [pc, #24]	; (8008198 <_close_r+0x20>)
 800817e:	0004      	movs	r4, r0
 8008180:	0008      	movs	r0, r1
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	f7fa fe4c 	bl	8002e20 <_close>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d103      	bne.n	8008194 <_close_r+0x1c>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d000      	beq.n	8008194 <_close_r+0x1c>
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	20000348 	.word	0x20000348

0800819c <_fstat_r>:
 800819c:	2300      	movs	r3, #0
 800819e:	b570      	push	{r4, r5, r6, lr}
 80081a0:	4d06      	ldr	r5, [pc, #24]	; (80081bc <_fstat_r+0x20>)
 80081a2:	0004      	movs	r4, r0
 80081a4:	0008      	movs	r0, r1
 80081a6:	0011      	movs	r1, r2
 80081a8:	602b      	str	r3, [r5, #0]
 80081aa:	f7fa fe43 	bl	8002e34 <_fstat>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d103      	bne.n	80081ba <_fstat_r+0x1e>
 80081b2:	682b      	ldr	r3, [r5, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d000      	beq.n	80081ba <_fstat_r+0x1e>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	20000348 	.word	0x20000348

080081c0 <_isatty_r>:
 80081c0:	2300      	movs	r3, #0
 80081c2:	b570      	push	{r4, r5, r6, lr}
 80081c4:	4d06      	ldr	r5, [pc, #24]	; (80081e0 <_isatty_r+0x20>)
 80081c6:	0004      	movs	r4, r0
 80081c8:	0008      	movs	r0, r1
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	f7fa fe40 	bl	8002e50 <_isatty>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d103      	bne.n	80081dc <_isatty_r+0x1c>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d000      	beq.n	80081dc <_isatty_r+0x1c>
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	bd70      	pop	{r4, r5, r6, pc}
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	20000348 	.word	0x20000348

080081e4 <_lseek_r>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	0004      	movs	r4, r0
 80081e8:	0008      	movs	r0, r1
 80081ea:	0011      	movs	r1, r2
 80081ec:	001a      	movs	r2, r3
 80081ee:	2300      	movs	r3, #0
 80081f0:	4d05      	ldr	r5, [pc, #20]	; (8008208 <_lseek_r+0x24>)
 80081f2:	602b      	str	r3, [r5, #0]
 80081f4:	f7fa fe35 	bl	8002e62 <_lseek>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d103      	bne.n	8008204 <_lseek_r+0x20>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d000      	beq.n	8008204 <_lseek_r+0x20>
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	bd70      	pop	{r4, r5, r6, pc}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	20000348 	.word	0x20000348

0800820c <_read_r>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	0004      	movs	r4, r0
 8008210:	0008      	movs	r0, r1
 8008212:	0011      	movs	r1, r2
 8008214:	001a      	movs	r2, r3
 8008216:	2300      	movs	r3, #0
 8008218:	4d05      	ldr	r5, [pc, #20]	; (8008230 <_read_r+0x24>)
 800821a:	602b      	str	r3, [r5, #0]
 800821c:	f7fa fdc7 	bl	8002dae <_read>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	d103      	bne.n	800822c <_read_r+0x20>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d000      	beq.n	800822c <_read_r+0x20>
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	20000348 	.word	0x20000348

08008234 <_init>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823a:	bc08      	pop	{r3}
 800823c:	469e      	mov	lr, r3
 800823e:	4770      	bx	lr

08008240 <_fini>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008246:	bc08      	pop	{r3}
 8008248:	469e      	mov	lr, r3
 800824a:	4770      	bx	lr
